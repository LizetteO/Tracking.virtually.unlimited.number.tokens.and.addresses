---

title: Anomaly-based detection of SQL injection attacks
abstract: A method for detecting a SQL injection attack comprises a training phase and a detection phase. In the training phase, a plurality of SQL queries is transformed into a respective plurality of SQL token domain queries which are processed using a n-gram analysis to provide a threshold and an averaging vector. In the detection phase, each newly arrived SQL query is transformed into a new SQL token domain query, and the n-gram analysis is applied together with the averaging vector and the threshold to each new SQL token domain query to determine if the new SQL query is normal or abnormal. The detection may be online or offline.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225402&OS=08225402&RS=08225402
owner: 
number: 08225402
owner_city: 
owner_country: 
publication_date: 20090408
---
This application claims the benefit of U.S. provisional patent application 61 043 442 filed Apr. 9 2008 which is incorporated herein by reference in its entirety.

The invention relates in general to methods and systems for detection of anomalies abnormalities that deviate from normal behavior in multi dimensional data and more particularly to online based detection of Structured Query Language SQL injection attacks.

Web applications have become a popular way to provide services over the Internet. Common applications include activities such as reading news and emails shopping online and paying bills. As the use of these applications grows we witness an increase in their vulnerabilities to attacks via the Internet. One of the most dangerous attacks is SQL injection performed by malicious insertion of crafted SQL queries into a vulnerable web page. Through SQL injection an attacker gains unrestricted and unauthorized access to the underlying database. This may result in stealing of confidential financial information such as credit card numbers modification of sensitive and personal data records and more.

The challenge of a security system facing these types of attacks is to perform full proof intrusion detection without any misdetections and false alarms. To achieve this most security systems use signatures developed and gathered manually. This approach is problematic because security systems using signatures can only detect attacks which are already known but cannot detect attacks with slight modifications or new attacks. Thus known anomaly detection based approaches either fail to address the full range of SQL injection attacks or have technical limitations that prevent their adoption and deployment in real world installations.

SQL is a textual language used to interact with relational databases. It is a standard interactive and programming language for querying modifying and managing databases. A query is a typical execution unit and includes a collection of SQL statements. SQL statements can modify the structure of a database add or remove schemes and manipulate database content.

A SQL attack is performed by embedding SQL statements and meta characters into a query. To launch an attack a malicious user needs to craft input strings and to send them to an application. The malicious user may then gain unauthorized access to the database observe sensitive and confidential data leak the data out of the web site or even destroy the data in the database. Web applications which read inputs from users e.g. through web forms and use these inputs to compose a query to the underlying database are vulnerable. A SQL attack is caused by insufficient input validation and inability to perform such input validation. Hackers have developed new methods to bypass these validations and to hack into applications. Moreover the use of input validation techniques is labor consuming which makes them impractical for use.

Even though the vulnerabilities that lead to SQL attacks are well known and well understood such attacks continue to emerge due to lack of effective techniques for detecting and preventing them. Programming techniques which utilize sophisticated input validation may prevent some of these attacks but are usually ineffective.

We show several ways in which an attack can exploit known vulnerabilities. Three different examples of attacks are given. These attacks show how a potential attacker can modify the original intention of the query as designed by its programmer. The examples are based upon the following typical query 

The query performs a search for an employee record in a database table called employeelist according to given first and last names. If such a record exists then it is returned. Otherwise nothing is returned. Parameters such as first and last names are supplied by the application user through for example a web form. The following examples demonstrate that by entering specific meta characters and crafted strings as parameters the original behavior of the query changes. As a result a complete employeelist database table is retrieved instead of the one searched employee record .

Example 1 demonstrates a tautology based attack. The user submits for firstName and lastName the values some string and OR b b respectively. Therefore the WHERE clause is evaluated to be true. The constructed query looks as follows 

Example 2 demonstrates a tautology based attack combined with a commenting technique. The user submits for firstName and lastName the values OR 1 1 and some string respectively. The SQL special character denotes the beginning of a comment. Therefore part of the WHERE clause until the character is evaluated to be true while the rest of it becomes irrelevant due to the presence of the comment sign. The constructed query looks as follows 

Example 3 demonstrates the use of a UNION SELECT attack combined with a commenting technique. The SQL UNION command combines the results of two queries. The attacker submits for firstName and lastName the values union select from employeelist and some string respectively. By doing that the attacker adds another injected query which can be fully controlled. The returned result is a union of the first query and the second query which is an injected query. The constructed query looks as follows 

A wide range of solutions that address the SQL injection phenomena have been proposed over the years. These solutions range from development of new programming techniques to fully automated frameworks for detection and prevention of these attacks. Some of the latest methods which handle SQL injections are reviewed next.

a AMNESIA see W. G. Halfond and A. Orso AMNESIA Analysis and Monitoring for NEutralizing SQL Injection Attacks Proceedings of the IEEE and ACM International Conference on Automated Software Engineering ASE 2005 Long Beach Calif. USA November 2005 is a model based technique which uses static analysis and runtime monitoring. It is based on the assumption that it is possible to describe a model for legitimate SQL queries by analyzing the source code that generates them. In the static analysis part AMNESIA uses offline program analysis to build a model for the legitimate and expected queries that can be generated by the application. It scans the source code in order to find the points where SQL queries are constructed. It then builds a model for each point. In the dynamic part it monitors the dynamically generated queries at runtime and checks their compliance with the statically generated model. Queries that violate the model represent potential hazard and are thus prevented from being executed on the database while being reported.

b CSSE see T. Pietraszek and C. V. Berghe Defending Against Injection Attacks through Context Sensitive String Evaluation Proceedings of Recent Advances in Intrusion Detection RAID2005 2005 is a technique for defending against SQL injection attacks by tracking the query fragments origin and taint information if existing . This technique uses a context sensitive analysis to detect and reject queries which include untrusted inputs. At the first step it marks with metadata all the user originated data in order to keep track of the fragments origin. This is done by overriding Personal Home Page PHP interpreter functions. PHP is a scripting language originally designed for producing dynamic web pages. This way the metadata allows distinguishing between developer provided and user provided strings. Then it intercepts all the application programming interface API calls to the database layer. CSSE checks if there is any metadata associated with the SQL expression and then performs the necessary checks on the un trusted parts.

c Parse Tree see G. T. Buehrer B. W. Weide and P. A. G. Sivilotti Using Parse Tree Validation to Prevent SQL Injection Attacks International Workshop on Software Engineering and Middleware SEM 2005 is based on comparing the grammatical structure of a SQL query and an expected query model at runtime. The first one is the original query which does not include the user s input tokens. The second one is the resulting query after incorporating the user s input. The comparison is done between the parse trees of these queries. This technique determines if the two queries are equal by comparing their tree structures. It uses an API which provides parsing and string building capabilities. Concatenation of SQL query fragments is done using this API.

d SQLRand see S. W. Boyd and A. D. Keromytis SQLrand Preventing SQL Injection Attacks Proceedings of the 2nd Applied Cryptography and Network Security ACNS Conference pages 292 302 June 2004 performs instruction set randomization of SQL keywords. It provides a framework which allows developers to create SQL queries using encoded keywords instead of normal ones. The SQL standard keywords are manipulated by appending thereto a random integer. This is something that cannot easily be guessed by an attacker. A proxy filter intercepts these queries to the database. Its primary obligation is to validate the random SQL query de randomize the keywords and then forward the SQL query to the database. A query that includes a user attack is evaluated as an invalid expression because hard coded keywords are randomized while the user s input keywords are not. The system design includes a library for the developer to rewrite the keywords.

All the above proposed solutions suffer from the same deployment problem. Since every solution intercepts a SQL query after incorporating the user s input the detection system cannot be installed physically before the web server itself. Since large organizations have many web servers these systems have to be duplicated. This makes them less suited for deployment.

Yet another anomaly detection solution for the SQL injection attack problem is provided in U.S. patent application Ser. No. 12 263 473 by Averbuch et al. filed Nov. 2 2008. In this solution multidimensional data which is reduced in dimension to form clusters of normal data with abnormal data points residing outside the clusters.

The solution provided in the invention is anomaly based in contrast with signature based solutions such as SNORT which is an open source network intrusion prevention and detection utilizing a rule driven language that combines the benefits of signature protocol and anomaly based inspection methods. The present solution is based on the idea that normal queries have certain common characteristics features . These features are used to form a statistical model. Normal queries satisfy this model whereas a SQL injection attack violates it. Thus a SQL injection attack is classified as having an abnormal behavior.

The normal behavior of queries sent to a database is learned in a training phase by extracting relevant features from them and by building a unique normal profile that identifies them. Then each newly arrived query sent to the database is analyzed in a detection phase according to the normal profile. Every deviation from the normal profile is classified as an anomaly.

The training phase includes processing of training data which includes several SQL queries. Each SQL query in the training data is transformed into a SQL token domain query in a token domain characterized by an alphabet built from elements called tokens. Each symbol of the SQL query is searched for its associated token and is replaced with the associated token. A n gram operation or analysis is applied to the SQL token domain queries to provide a threshold and an averaging vector.

In the detection phase each newly arrived or new SQL query is transformed into a new SQL token domain query. As in the training phase each symbol of the SQL query is searched for its associated token and is replaced by it. The n gram operation is applied together with the averaging vector and the threshold to the SQL token domain query to determine if the newly arrived SQL query is normal or abnormal.

Together with the ability to successfully detect SQL injection attacks the solution provided herein can be deployed into the network s root segments A and B . In addition it can be integrated into an existing infrastructure smoothly and transparently without the need to access any source code or to impose new programming methodologies.

According to the invention there is provided a method for detecting a SQL injection attack including the steps of transforming a new SQL query into a new SQL token domain query and applying a n gram analysis together with a threshold and an averaging vector to the new SQL token domain query to determine whether or not the SQL query is an injection attack query. In some embodiments these steps are performed online. In some embodiments these steps are performed offline.

In some embodiments of the method the steps of transforming a new SQL query into a new SQL token domain query and applying a n gram analysis together with a threshold and an averaging vector to the new SQL token domain query are preceded by the steps of transforming a plurality of SQL queries into respective SQL token domain queries and applying a n gram analysis to the SQL token domain queries to obtain the threshold and the averaging vector. The latter two steps are performed offline.

According to the invention there is provided a computer readable storage medium having computer readable code embodied therein the computer readable code used for detecting a SQL injection attack and comprising program code for transforming a new SQL query into a new SQL token domain query and program code for applying a n gram analysis together with a threshold and an averaging vector to the new SQL token domain query to determine whether or not the SQL query is an injection attack query. In some embodiments the computer readable code further comprises program code for transforming a plurality of SQL queries into respective SQL token domain queries and program code for applying a n gram analysis to the SQL token domain queries to obtain the threshold and the averaging vector.

According to the invention there is provided a method for detecting a SQL injection attack comprising the steps of in a training procedure obtaining a threshold and an averaging vector from a plurality of SQL token domain queries and in a detection procedure applying a n gram analysis together with the threshold and the averaging vector to a new SQL token domain query to determine whether or not the SQL query is an injection attack query.

The anti SQL injection attack solution provided by the invention was evaluated empirically through tests on real and simulated datasets and exhibited excellent results.

A n gram is a sub sequence of n overlapping items in a given sequence. The analyzed items are symbols that can be either characters or words. n gram models are widely used in various areas of statistical natural language processing where it is applied to predict and validate grammatical inferences. Other common fields are signal processing speech recognition cryptography network intrusion detection systems see K. Wang J. Parekh and S. Stolfo Anagram a content anomaly detector resistant to mimicry attack Recent Advances in Intrusion Detection RAID 2006 pp. 226 248 and more. For example the 2 gram character model in the sentence good evening everyone is go oo od . . . ne . By using the n gram model one builds a histogram which represents the frequency of any sequence in an input sentence.

In our case we apply the n gram model to SQL queries which have already changed their textual representation to a token representation. A n gram histogram for such a query has 12 bins since each item can be one of 12 possible tokens. The n gram processing generates large matrices. To make this processing practical the matrices dimensionality is reduced by applying the random projection RP algorithm described next.

Random projection is a technique for dimensionality reduction. In RP the original high dimensional data is projected onto a lower dimensional subspace using a random matrix whose columns have unit lengths. Although it is a crude technique RP has been found to be computationally efficient and sufficiently accurate for dimensionality reduction of high dimensional data sets.

Let Xbe a matrix of size m n m is the number of observations rows and n is the original dimensionality of the data columns . Let k be the desired reduced dimensionality of the data k

There are several ways how to choose random matrix R. Most often the elements Rof R are Gaussian distributed but there are other possibilities. Two choices with simpler distributions were proposed in D. Achlioptas Database friendly random projections in Proceedings of the ACM Symposium on the Principles of Database Systems pp. 274 281 2001 

The model for transforming a SQL query into a SQL token domain query was developed according to certain guidelines 

We apply the n gram model to SQL token domain queries. For example by applying a 2 gram on the previously given representation

An exemplary process method and algorithm for detection of SQL injection attacks is described next. The process includes two steps offline training from designated datasets and online detection of newly arrived SQL queries.

In one embodiment in the detection phase represented by the flow shown in the SQL queries are processed upon their arrival if the processing is in real time . In an alternative embodiment the SQL queries are processed offline. The inputs to the detection phase are a newly arrived SQL query and T and Afrom the training phase. Each newly arrived SQL query is transformed into a SQL token domain query in step . Then an n gram analysis is applied to this query yielding matrix Fin step . Fis reshaped as a row vector denoted by F in step . Each entry in Fis divided by a corresponding entry in averaging vector Ain step to obtain F. An inner product of Fwith a Gaussian random vector is computed in step . The result is denoted by S. The newly arrived SQL query is classified as either normal or abnormal based on a comparison of S with T performed in step . If S T the SQL query is abnormal. Otherwise it is normal.

Algorithm 1 describes the training phase. To simplify the presentation the pseudo code of the algorithm is described only for n 2. The pseudo code can be generalized to any n. In this invention the algorithm was tested for n 2 . . . 12.

In order to test the proposed algorithm we built a physical network which simulates a typical network environment. The physical network included a client machine running a browser and a server machine running an environment which includes an HTTP server a SQL database and a web site. In addition it included four intrusion detection systems IDS connected in a row two hardware appliances and two IDSs implemented in software. The simulation network was used for 

The client machine runs the SQL simulation engine. The engine was conceived and developed in order to provide a large variety of SQL queries. The simulator can operate in three different modes 

The server machine runs a full web site environment. This environment includes three components Apache HTTP server PHP application and MySQL server.

To verify the algorithm we used three pairs of datasets. Each pair included two datasets one for the training phase and the other for the detection phase. Each dataset was a list of SQL queries. These datasets originated from two different sources one pair was generated by a SQL engine and the other two were recorded in academic network and they are called ASQL. Here is a brief overview of the different sources 

Training set This dataset was generated by the simulator using the Normal Mode option. It included 100000 random SQL queries.

Testing set This dataset was generated by the simulator using the Mixed Mode option with one attack per 50 valid queries. 2000 queries were generated this way. The attacks were chosen randomly and were embedded into this set.

From these graphs we see that our system achieved 100 of true detections for n 4 . . . 9 with 0 of false positive and false negative detections. When n 1 2 3 then this technique does not produce any false positive detection while having some false negative detection. Starting from n 10 we get false positive detections. High values of n introduce noise to the detection process. Nevertheless they do not produce any false negative detection. Table 6 summarizes the results from .

This capture started on 6 Jan. 2008 and ended on 8 Jan. 2008. More than 12000 queries were captured during this time. We used them as follows 

Testing set 2000 queries were used as the testing set. In addition we embedded several SQL injection attacks into it to make sure it undoubtedly included malicious queries.

This capture started on 10 Jan. 2008 and ended on 21 Jan. 2008. More than 147 000 queries were captured during this time. We used them as follows 

Testing set 2000 queries were used as the testing set. In addition we embedded several SQL injection attacks into it to make sure it undoubtedly included malicious queries.

The algorithm with n 3 . . . 9 produces the best results. In the first experiment n 4 . . . 9 produce 100 of success having neither false positive nor false negative detections. In the second experiment n 2 3 produce the best results where n 4 . . . 12 yield only one false positive detection. This can be attributed to the small size of the training set which was extremely small. Except this the results are close to perfect. In the third experiment n 2 . . . 12 produce 100 success having neither false positive nor false negative detections.

The test included only a dataset with 14 different attack queries. They were based on the examples presented in the section on SQL injection attacks examples with minor changes. Since these IDSs are signature based there is no use of a training phase. The results show that AMS detected 9 of the 14 65 attacks whereas SNORT failed to detect any attack.

A summary of the above comparisons between systems that detect SQL injection attacks is given in Table 9 

As seen the four known solutions SNORT AMS CISCO4215 and Imperva had only limited to none success in the detection of SQL injection attacks. None of the four known solutions detected all the attacks. Thus the systems protected by these solutions remain unsecured and vulnerable.

Tables 10 and 11 provide a full overview of the comparisons among the tested systems. The markings mean the following S SNORT A AMS C CISCO4215 I IMPERVA T this invention X Failure V Success. The tests were conducted using the PHP application described in . The following queries except the last one are based upon the template 

As seen from Tables 10 and 11 neither the known anomaly based IDSs nor the signature based IDSs had satisfactory performance in detecting SQL injection attacks. Detection percentage varies from very low SNORT to Medium AMS . The signature based IDSs succeeded in detecting attacks which matched existing signatures in their signatures database. New attacks or old ones with minor changes in them could not be detected this way. The anomaly based IDSs did not succeed either. Despite the fact that a profile was dynamically established the system could not identify anomalous behaviors. The signature based mechanism succeeded partially.

In summary the invention disclosed herein delivers complete success in identifying all the SQL injection attacks by using the described approach for anomaly based detection.

The various features and steps discussed above as well as other known equivalents for each such feature or step can be mixed and matched by one of ordinary skill in this art to perform methods in accordance with principles described herein. Although the disclosure has been provided in the context of certain embodiments and examples it will be understood by those skilled in the art that the disclosure extends beyond the specifically described embodiments to other alternative embodiments and or uses and obvious modifications and equivalents thereof. Accordingly the disclosure is not intended to be limited by the specific disclosures of embodiments herein. For example any digital computer system can be configured or otherwise programmed to implement the methods disclosed herein and to the extent that a particular digital computer system is configured to implement the methods of this invention it is within the scope and spirit of the present invention. Once a digital computer system is programmed to perform particular functions pursuant to computer executable instructions from program software that implements the present invention it in effect becomes a special purpose computer particular to the present invention. The techniques necessary to achieve this are well known to those skilled in the art and thus are not further described herein.

Computer executable instructions implementing the methods and techniques of the present invention can be distributed to users on a computer readable medium and are often copied onto a hard disk or other storage medium. When such a program of instructions is to be executed it is usually loaded into the random access memory of the computer thereby configuring the computer to act in accordance with the techniques disclosed herein. All these operations are well known to those skilled in the art and thus are not further described herein. The term computer readable medium encompasses distribution media intermediate storage media execution memory of a computer and any other medium or device capable of storing for later reading by a computer a computer program implementing the present invention.

Accordingly drawings tables and description disclosed herein illustrate technologies related to the invention show examples of the invention and provide examples of using the invention and are not to be construed as limiting the present invention. Known methods techniques or systems may be discussed without giving details so to avoid obscuring the principles of the invention. As it will be appreciated by one of ordinary skill in the art the present invention can be implemented modified or otherwise altered without departing from the principles and spirit of the present invention. Therefore the scope of the present invention should be determined by the following claims and their legal equivalents.

All patents patent applications and publications mentioned in this specification are herein incorporated in their entirety by reference into the specification to the same extent as if each individual patent patent application or publication was specifically and individually indicated to be incorporated herein by reference. In addition citation or identification of any reference in this application shall not be construed as an admission that such reference is available as prior art to the present invention.

