---

title: Method and system for segmenting a multidimensional dataset
abstract: A computer-implemented method for generating and sharing dataset segment schemes of a multidimensional dataset at a client device is provided. The client device displays a first filter definition template and an attribute list. Upon detecting a user selection of a first attribute, the client device displays the first attribute and one or more candidate filter conditions in the first filter definition template. Upon detecting a user selection of a first filter condition in the first filter definition template, the client device submits a segment scheme generation request to the server system and receives from the server system a first segment identifier; and displays a first segment link at the client device, the first segment link including the first segment identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08412719&OS=08412719&RS=08412719
owner: Google Inc.
number: 08412719
owner_city: Mountain View
owner_country: US
publication_date: 20091007
---
This application claims priority to U.S. Provisional Patent Application No. 61 239 388 filed Sep. 2 2009 entitled Method And System For Segmenting A Multidimensional Dataset Generating And Sharing Dataset Segment Schemes the content of which is incorporated by reference herein in its entirety.

This application is related to U.S. Provisional Patent Application No. 61 181 275 filed May 26 2009 entitled System and Method for Aggregating Analytics Data the content of which is incorporated by reference herein in its entirety.

This application is related to U.S. Provisional Patent Application No. 61 181 276 filed May 26 2009 entitled Dynamically Generating Aggregate Tables the content of which is incorporated by reference herein in its entirety.

This application is related to U.S. Provisional Patent Application No. 61 239 372 filed Sep. 2 2009 entitled Method and System for Pivoting a Multidimensional Dataset the content of which is incorporated by reference herein in its entirety.

The disclosed embodiments relate generally to the visualization of multidimensional database and in particular to a system and method for segmenting a multidimensional dataset.

Web analytics is the measurement collection analysis and reporting of the traffic data of a web site for purposes of understanding and optimizing the web site usage. The traffic data is typically organized in the form of a multidimensional dataset whose metadata may include multiple dimensions and metric attributes also known as measures . One method of performing web analytics is to visualize different subsets of the multidimensional dataset defined by various configurations of dimensions and metric attributes. From examining the visualized traffic data an information analyst may be able to discover information valuable for improving the quality and volume of the traffic to a web site. But the exercise of searching information within the multidimensional dataset is non trivial if the volume of the traffic data is significant or the metadata includes a large number of dimensions and metric attributes.

In accordance with some embodiments described below a computer implemented method for segmenting a multidimensional dataset at a server system is disclosed. The server system is connected to one or more client devices through a network and the dataset is characterized by a set of dimension attributes and a set of metric attributes. The method includes receiving a segment request from a user at a respective client device the segment request identifying a dataset segment scheme stored at the server system identifying at the server system one or more independent data filters associated with the dataset segment scheme each data filter including at least one user specified attribute of the dataset and its associated filter condition for each of the one or more independent data filters selecting among a set of data records a subset of data records that satisfies the data filter s corresponding filter condition determining a result set of data records by aggregating the subsets of data records in accordance with the dataset segment scheme and returning information derived from the result set of data records to the requesting client device as a response to the segment request.

In accordance with some embodiments described below a server system for segmenting a multidimensional dataset is disclosed. The server system is connected to one or more client devices through a network and the multidimensional dataset is characterized by a set of dimension attributes and a set of metric attributes and managed by the server system. The server system includes one or more processors for executing programs and memory to store data and to store one or more programs to be executed by the one or more processors. The one or more programs including instructions for receiving a segment request from a user at a respective client device the segment request identifying a dataset segment scheme stored at the server system identifying at the server system one or more independent data filters associated with the dataset segment scheme each data filter including at least one user specified attribute of the dataset and its associated filter condition for each of the one or more independent data filters selecting among a set of data records a subset of data records that satisfies the data filter s corresponding filter condition determining a result set of data records by aggregating the subsets of data records in accordance with the dataset segment scheme and returning information derived from the result set of data records to the requesting client device as a response to the segment request.

In accordance with some embodiments described below a computer readable storage medium stores one or more programs for execution by one or more processors of a server system. The server system is connected to one or more client devices through a network and the multidimensional dataset is characterized by a set of dimension attributes and a set of metric attributes and managed by the server system. The one or more programs include instructions for receiving a segment request from a user at a respective client device the segment request identifying a dataset segment scheme stored at the server system identifying at the server system one or more independent data filters associated with the dataset segment scheme each data filter including at least one user specified attribute of the dataset and its associated filter condition for each of the one or more independent data filters selecting among a set of data records a subset of data records that satisfies the data filter s corresponding filter condition determining a result set of data records by aggregating the subsets of data records in accordance with the dataset segment scheme and returning information derived from the result set of data records to the requesting client device as a response to the segment request.

Reference will now be made in detail to embodiments examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the embodiments it will be understood that the invention is not limited to these particular embodiments. On the contrary the invention includes alternatives modifications and equivalents that are within the spirit and scope of the appended claims. Numerous specific details are set forth in order to provide a thorough understanding of the subject matter presented herein. But it will be apparent to one of ordinary skill in the art that the subject matter may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.

A client device also known as a client may be any computer or similar device through which a user of the client device can submit data access requests to and receive results or other services from the server system . Examples include without limitation desktop computers laptop computers tablet computers mobile devices such as mobile phones personal digital assistants set top boxes or any combination of the above. A respective client may contain at least one client application for submitting requests to the server system . For example the client application can be a web browser or other type of application that permits a user to access the services provided by the server system .

In some embodiments the client application includes one or more client assistants . A client assistant can be a software application that performs tasks related to assisting a user s activities with respect to the client application and or other applications. For example the client assistant may assist a user at the client device with browsing information e.g. web pages processing information e.g. query results received from the server system and monitoring the user s activities on the query results. In some embodiments the client assistant is embedded in a web page e.g. a query results web page or other documents downloaded from the server system . In some embodiments the client assistant is a part of the client application e.g. a plug in application of a web browser . The client further includes a communication interface to support the communication between the client and other devices e.g. the server system or another client device .

The communication network s can be any wired or wireless local area network LAN and or wide area network WAN such as an intranet an extranet the Internet or a combination of such networks. In some embodiments the communication network uses the HyperText Transport Protocol HTTP and the Transmission Control Protocol Internet Protocol TCP IP to transport information between different networks. The HTTP permits client devices to access various information items available on the Internet via the communication network . The various embodiments of the invention however are not limited to the use of any particular protocol.

In some embodiments the server system includes a web interface also referred to as a front end server a server application also referred to as a mid tier server and a backend server . The web interface receives data access requests from client devices and forwards the requests to the server application . In response to receiving the requests the server application decides how to process the requests including identifying data filters associated with a request checking whether it has data available for the request submitting queries to the backend for data requested by the client processing the data returned by the backend that matches the queries and returning the processed data as results to the requesting clients . After receiving a result the client application at a particular client displays the result to the user who submits the original request.

In some embodiments the backend is effectively a database management system including a database server that is configured to manage a large number of data records stored at the server system . In response to a query submitted by the server application the database server identifies zero or more data records that satisfy the query and return the data records to the server application for further processing. More detailed descriptions of the operations within the backend are provided below in connection with .

In some embodiments the server system is an application service provider ASP that provides web analytics services to its customers e.g. a web site owner by visualizing the traffic data generated at a web site in accordance with various user requests. To do so the server system may include an analytics system adapted for processing the raw traffic data of a web server such as the logfiles and other types of traffic data generated by the web server through techniques such as page tagging. The raw web traffic data is first processed into a multidimensional dataset that includes multiple dimensions and multiple metric attributes or measures before the server system can answer any data visualization requests through the web interface . A more detailed description of the processing of raw web traffic data can be found in the U.S. Provisional Patent Application No. 61 181 275 filed May 26 2009 entitled System and Method for Aggregating Analytics Data and the U.S. Provisional Patent Application No. 61 181 276 filed May 26 2009 entitled Dynamically Generating Aggregate Tables the contents of which are incorporated by reference herein in their entirety. For simplicity it is assumed herein that the data records managed by the backend and accessible to the server application are not the raw web traffic data but the data after being pre processed.

For convenience and custom the web traffic data of a user session or a visit is further divided into one or more hits A to N. Note that the terms session and visit are used interchangeably throughout this application. In the context of web traffic a hit typically corresponds to a request to a web server for a document such as a web page an image a JavaScript file a Cascading Style Sheet CSS file etc. Each hit A may be characterized by attributes such as type of hit A e.g. transaction hit etc. referral URL B i.e. the web page the visitor was on when the hit was generated a timestamp C that indicates when the hit occurs and so on. Note that the session level and hit level attributes as shown in are listed for illustrative purposes only. As will be shown in the examples below a session or a hit may have many other attributes that either exist in the raw traffic data e.g. the timestamp or can be derived from the raw traffic data by the analytics system e.g. the average pageviews per session .

Referring back to a user at a client device submits a request to the server system for generating a report of the web traffic data associated with a particular web site. Upon receipt of the request the server application generates or identifies one or more queries and submits the queries to the backend server that manages the web site s sessionized traffic data in the data structure and processes the query results returned by the backend server such that they can be visualized at the client device in the form of a web analytics report.

Within the server system the web interface receives the request and forwards the request to the server application . In some embodiments the client request is received in the form of one or more data packets defined by a communication protocol. The web interface may perform predefined operations such as extracting information from the data packets and grouping the extracted information together into a format understood by the server application . Upon receipt of the client request for the analytics report the server application may check whether the client requested traffic data for preparing the report is ready or not . In some embodiments the current client request may follow an earlier client request and the two requests correspond to the same set of data records that have been generated or identified by the server application in response to the earlier request. Thus there is no need for the server application to resubmit any new queries to the backend .

If the client requested data is available yes the server application then prepares the analytics report using the existing data and returns the report to the requesting client device . In some embodiments the server application prepares the analytics report by identifying a client requested portion of a set of data records in the analytics report that was generated in response to a previous request and customizing the client requested portion in a format to be rendered at the client device .

If the report requested data is not available no the server application needs to generate or identify one or more queries or data filters and submit the queries for the data to the backend . In some embodiments the server application converts the client request into one or more database queries or data filters stores the queries in the server system and applies them to the backend . Upon receipt of the data filters the database processes the session based web traffic data records as shown in to identify those data records that satisfy the data filters. A more detailed description of this process is provided below in connection with . At the end of the process the backend returns the identified data records to the server application for preparing the analytics report . Note that the reply from the backend may be empty if no data is found that satisfies the data filters. Based on the reply from the backend the server application prepares the requested analytics report and returns the report to the client device .

In either case the client device receives the requested analytics report and displays the report to the user . Web traffic data can be visualized using different visualization tools including table bar chart pie chart curve map pivot table etc. Among these tools pivot table is often a good choice because it provides an in depth view of the flat data and helps a user to derive useful information from the web traffic data.

The backend receives one or more data filter definitions from the server application . For example to determine the bounce rate of a web site for a given time period the backend may need to count i the total number of visits made by different users during the time period and ii the total number of a subset of the visits during which users view only a single web page at the web site and then leave the web site. In this case the determination of each respective total number corresponds to a data filter definition. The data filter definition may be written in a standard database query language or a proprietary database query language that is developed for processing the web traffic data stored in a multidimensional dataset.

The database server identifies a new session in the data structure and compares the session s content items with a new data filter s filter condition . If the session meets the filter condition yes the database server updates the report data for the corresponding data filter and optionally increments the total number of the satisfying data records by one. If the data filter is the last one to be processed yes the database server checks whether this session record is the last one in the data structure to be processed . Otherwise no the database returns to compare the same session record with the next user specified data filter and update the report data accordingly. The backend processes the sessions one by one until it finishes processing the last session yes . In some embodiments the backend also aggregates the report data corresponding to different data filters e.g. determining the bounce rate by dividing the total number of bounced visits by the total number of visits and returns the aggregated data to the server application for preparing the analytics report . In some other embodiments the backend returns the results corresponding to different data filters to the server application and the server application then performs the aggregation operation as described above.

Given the nature of web traffic data stored in a multidimensional dataset most user requests for visualizing the web traffic data are effectively to slice and dice the dataset in a user specified manner as defined by one or more data filters and the relationships between the data filters. A client device is responsible for submitting the user requests to the server system and the server system is responsible for identifying a subset of the dataset for each user request and generating a view of data including the subset of the dataset and information derived from the subset to be presented to an end user at the client device . For convenience a specific type of user request called segment request and related subjects are described in more detail below. But it would be apparent to one of ordinary skill in the art that the same approach is applicable to many types of user request corresponding to the different visualization tools such as table bar chart pie chart curve map pivot table etc.

A segment request corresponds to a user defined dataset segment scheme for extracting a subset of data records from a set of data records associated with a particular user within a database. In some embodiments the set of data records are web traffic sessions or visits generated at a particular web site and the user refers to one or more individuals who are affiliated with the web site and authorized to access the set of data records managed by the server system . There are many reasons for a user to segment a set of web traffic data records and extract useful information from the segmented dataset. For example a manager or an owner of an online shopping web site may be interested in researching the customer activities for a certain period of time to identify a group of customers that is more or less likely to purchase certain types of products and then designing more customized marketing strategies at those existing customer visitors as well as those non customer visitors to convert them into existing customers by providing more product items that fit into their shopping habits. To do so the web site manager needs to have a user friendly tool for carving out that specific group of visitors by defining the criteria for a certain segment of customers.

As will be explained below the user defines a dataset segment scheme by specifying one or more data filters through a graphical user interface each data filter having at least one attribute and one associated filter condition. The different data filters are related to one another through logic conjunctive or logic disjunctive operations. To allow a user to resubmit a previously defined dataset segment scheme without having to reenter the scheme the server system is responsible for generating a corresponding dataset segment scheme when it receives the segment scheme from the user for the first time and returning a segment identifier to the user. The user can resubmit the same request to the server system as long as the resubmitted segment request includes information such as the segment identifier that identifies the dataset segment scheme.

In some embodiments the multiple data filters are organized into a multi layer data structure each layer including one or more data filters e.g. A and AM being one layer while Z and ZM being another layer that are related to one another through logic disjunctive operations and different layers of data filters being related to each other through logic conjunctive operations. In Boolean logic such expression is equivalent to a formula in conjunctive normal form CNF . An advantage of defining segments in this form is that any logical expression can be formed using CNF expressions which means that a user has practically unlimited flexibility in defining ways of segmenting a multidimensional dataset. Note that there are many known ways of representing the CNF formula in the server system including a linked list as shown in or a text string as follows Filter A1 Attribute Condition OR . . . Filter AM Attribute Condition AND Filter Z1 Attribute Condition OR . . . Filter ZN Attribute Condition 

For each user defined dataset segment scheme the server system generates a dataset segment scheme and returns the corresponding segment ID to the requesting client. When a user subsequently submits a request for segmenting the dataset in accordance with the dataset segment scheme the user does not need to reenter the definition for the dataset segment scheme. Instead the user request needs to include the segment ID of the dataset segment scheme previously stored at the server system and the server system can then identify those data filters associated with the segment scheme and perform operations based on the data filters. The association of a segment ID with a dataset segment scheme also enables different users to share their dataset segment schemes. This feature is useful for different users of a web analytics application to exchange their knowledge of and experience with the dataset.

The server application has access to the dataset segment scheme corresponding to the data filters used for generating the subsets of data records. To prepare a report in response to the segment request the server application aggregates the multiple subsets of data records F FN into a result set of data records in accordance with relationships between the different data filters as defined by the dataset segment scheme. For example for two data filters that are within the same layer of the dataset segment scheme the server application applies a logic disjunctive operation to the two subsets of data records to identify a new set of data records each of which appears in at least one of the two subsets of data records. For two data filters that are within the different layers of the dataset segment scheme the server application applies a logic conjunctive operation to the two subsets of data records to identify a new set of data records each of which appears in both of the two subsets of data records. The result set of data records and additional information derived therein e.g. the average pageviews of the data records within the result set are used for generating the user requested segment report.

To further illustrate how the server application prepares the segment report includes a block diagram of an example of aggregating data filtering results into a segment result in accordance with some embodiments.

The raw data corresponds to a set of data records associated with a particular user and stored in the backend . This set of data records is the target of a segment request. The segment request corresponds to a dataset segment scheme that has three data filter definitions . Filter A specifies that the data records that satisfy the filter should be those data records whose country matches exactly United States. Filter B specifies that the data records that satisfy the filter should be those data records whose pageview is greater than 6. Filter C specifies that the data records that satisfy the filter should be those data records whose browser matches exactly Firefox.

The application of the three filters to the raw data produces three subsets of data records. The subset A for the filter A includes three data records each data record having a Country attribute of US. The subset B for the filter B includes four data records each data record having a pageview attribute of at least 7. The subset C for the filter C includes three data records each data record having a browser attribute of Firefox. An aggregation of the three subsets A B and C results in the segment result that includes one data record that satisfies all the three filters.

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory and may store a subset of the modules and data structures identified above. Furthermore memory and may store additional modules and data structures not described above.

The server system initially receives a segment request from a user at a respective client device . The segment request includes a segment ID identifying a dataset segment scheme previously generated and stored at the server system. In some embodiments the segment request is received in connection with the request to test a dataset segment scheme that is under construction. In this case the server system may not have a previously generated dataset segment scheme for the test request. Instead the segment request includes the definition of data filters corresponding to the scheme a user provided dataset segment name and a parameter such as a flag indicating that the request is for testing the user provided data filters. A more detailed description of this embodiment is provided below in connection with . In some embodiments the dataset segment scheme is expressed in the form of a CNF logic formula to simplify the process of the server application applying the dataset segment scheme to the backend .

Upon receipt of the segment request the server application identifies one or more independent data filters associated with the dataset segment scheme and submits the independent data filters to the backend for further processing . As described above in connection with each data filter includes at least one user specified attribute of the dataset and its associated filter condition. For each of the one or more independent data filters the backend selects among a set of data records a subset of data records that satisfies the data filter s corresponding filter condition and returns the subset of data records to the server application . A more detailed description of the application of a data filter to a set of data records is provided below in connection with . The server application then aggregates the subsets of data records into a result set of data records in accordance with the dataset segment scheme and returns the result set of data records and information derived from the result set of data records to the requesting client device as a response to the segment request . Aggregation of the subsets of data records includes a logic conjunctive operation by identifying a subset of data records that appears in both two subsets of data records or a logic disjunctive operation by identifying a subset of data records that appears in at least one of the two subsets of data records. In some embodiments the derived information includes a data record count of a subset of data records corresponding to a respective data filter and a data record count of the result set of data records. In some other embodiments the derived information includes an average of the content items in the result set of data records that correspond to a respective metric attribute of the dataset.

In some embodiments the backend applies the independent data filters to the set of data records simultaneously for selecting the respective subsets of data records. For example the backend may not wait until the completion of processing one data filter before it starts processing another data filter. These parallel operations are possible because the data filters are independent from each other and the operation of one data filter does not depends on the operation of another filter.

In some embodiments a second user can submit a segment request corresponding to a dataset segment scheme defined by a first user. In other words the first user who specifies the attributes and the respective associated filter conditions of the dataset segment scheme is different from the second user who submits the segment request. In some embodiments the server system generates the dataset segment scheme in response to an HTTP request from the second user that corresponds to a URL link that includes a segment ID identifying another dataset segment scheme defined by the first user and stored in the server system. In this case the server system duplicates the other dataset segment scheme and gives a new user ID and segment ID to the duplicated one as the dataset segment scheme associated with the user selects the URL link.

Given a set of data records and a data filter associated with a user the backend selects a particular data record from the set and identifies a content item in the data record that corresponds to a user specified attribute in the data filter and compares the content item with the attribute s associated filter condition . Referring to the example shown in the attribute of the filter A is Country and the corresponding filter condition is that a satisfying data record is the one whose Country attribute matches exactly US. Therefore the backend identifies the country name in each data record of the raw data and checks whether the country name is US or not. If the filter condition is met yes the backend then adds the record into the subset of data records which is to be returned to the server application as the corresponding filter result. This process repeats until the last data record is processed yes .

As noted above the data filters within a dataset segment scheme are organized into a CNF logic formula by the server application so that different data filters can be applied to the backend independently. In some embodiments a set of graphical user interfaces is provided at a client device such that the user provided data filter definitions through the graphical user interfaces can be easily converted into the CNF format at the server system . For illustrative purpose three exemplary sets of graphical user interfaces and the corresponding processes implemented at the client devices are described below.

Initially the client device displays a first filter definition template and an attribute list including at least one dimension attribute and at least one metric attribute . As shown in the filter definition template includes a dashed line box into which a user can drag and drop an attribute from the attribute list into the box. In addition the filter definition template may include a logic disjunctive link and a logic conjunctive link . As further described below in connection with a user can add more data filters by selecting either link repeatedly. As will be described below in connection with the Test Segment button is used for testing a segment scheme under construction before officially adopting it. The text box is provided for a user to enter a segment name for the segment scheme being constructed. This name is effectively an identifier of the segment scheme at the client side which is different from the segment ID generated by the server system.

After receiving a user selection of a first attribute in the attribute list to define a first data filter in the first filter definition template the client device displays the first attribute and one or more candidate filter conditions in the first filter definition template . As shown in in response to a user drag and drop of the attribute Country Territory into filter definition template the client device automatically generates a set of candidate conditions in the dropdown list and a set of candidate values in the dropdown list .

After receiving a user selection of a first filter condition among the one or more candidate filter conditions in the first filter definition template the client device has sufficient information for generating a data filter to build a new dataset segment scheme in the server system. In some embodiments a user can repeat the aforementioned process by adding more data filters to the filter definition template. After entering all the user specified data filter definitions the user can enter a segment name into the text box and select the Create Segment button. In response the client device submits a segment scheme generation request including the data filter definitions to the server system . Upon receipt of the client request the server system generates a dataset segment scheme like the one shown in for future use and returns a segment ID of the newly generated dataset segment scheme to the requesting client device. Using the new segment ID the client device generates a new segment link and displays the segment link together with other segment links in a graphical user interface . See e.g. the list of segment links shown in .

Subsequently in response to a user selection of the new segment link the client device submits a segment request to the server system . In some embodiments the segment request includes the segment ID that corresponds to the dataset segment scheme. At the server system the server application processes the segment request in a way that is similar to the process described above in connection with and returns information including a first data record count derived from the result set of data records that satisfies the segment request as a first segment result. Upon receipt of the first segment result the client device displays information including the first data record count to a first user that submits the segment request .

In some embodiments the process of defining an appropriate dataset segment scheme may require a user to conduct many tests using different filter conditions and different combination of data filters until an appropriate combination of data filters with appropriate filter conditions is identified as being able to providing valuable insights into a multidimensional dataset. Although this process is developed on the basis of a particular set of data records accessible by the user who conducts the tests the identified dataset segment scheme may be found useful when being applied to a set of data records associated with a different user. An embodiment of how to share a dataset segment scheme defined by a first user with a second user is provided below in connection with .

As shown in the request could be a user selection of a segment link s corresponding Share item . is a screenshot of the graphical user interface after the first client device detects a user selection of the Share item for the segment link named test in accordance with some embodiments. In this case the first client device generates a small pop up window and the pop up window includes a URL link that includes information about the segment ID of the dataset segment scheme the first user plans to share with the second user and the first user ID.

In some embodiments the first client device sends the URL link to the second user . For example the pop up window shown in may include a field for the first user to enter the second user s email address and the URL link can be sent to the second user via email. Alternatively the first user can make a copy of the URL link in the pop up window and paste it into an email message. In some embodiments the first user may post the URL link on a web page such as a blog to share the segment scheme with others. In some other embodiments an application programming interface API is provided for a user to define a dataset segment scheme. The API generates a text string including the user entered information in a format that is to be interpreted by the server system as a dataset segment scheme. The user can share the dataset segment scheme by providing the text string to others. In yet some other embodiments a Javascript application is provided for a user to enter a segment scheme and the user can then share the Javascript application in conjunction with the user entered information with other users of this web site or a different web site.

Upon receipt of the URL link at a second client device which might be the same as the first client device but is logged in by the second user the second user can click the link which causes the second client device to submit to the server system a request to generate another instance of the first dataset segment scheme identified by the first segment ID at the second client device . In response the sever system extracts and decrypts if necessary the segment ID and the first user ID from the URL link loads the first dataset segment scheme identified by the segment ID and first user ID from a server side storage device generates a new dataset segment scheme including one or more data filters associated with the second user ID and returns the data filters defined in the second dataset segment scheme to the second client device. The second client device uses the returned filter definitions to populate a second filter definition template displayed at the second client device . depicts a graphical user interface that includes multiple populated filter definition templates and at the second client device in accordance with some embodiments. In some embodiments the server system extracts and decrypts if necessary the segment ID and the first user ID from the URL link loads the first dataset segment scheme identified by the segment ID and first user ID from a server side storage device and returns the data filters defined in the first dataset segment scheme to the second client device.

In some embodiments the server system does not generate any new dataset segment scheme associated with the second user until after it receives further instructions from the second client device. In this case the second client device then receives a user instruction to submit a request from the second user to generate a second dataset segment scheme at the server system using the information in the second template . In response the server system generates a second dataset segment scheme that is almost identical to the first dataset segment scheme associated with the first user except that the second scheme has a second segment ID and the second user s user ID. The second system returns the second segment ID and the second user ID both of which may have been encrypted to the second client device from which the request is submitted. Upon receipt of the second segment ID and the second user ID the second client device generates a new segment link using the second segment ID and the second user ID that are different from the first segment ID and the first user ID respectively and adds the new segment link to the second user s profile like the one shown in .

In some embodiments the set of data records associated with the second user may not be the same as the set of data records associated with the first user. For example the second user may have a higher user privilege and can access more data records generated at a web site than the first user can. In some other embodiments the second user may have access to a different web site than the first user. Therefore an application of the second dataset segment scheme to the data records associated with the second user is likely to generate segment results that are completely different from the segment results seen by the first user.

As noted above in connection with the filter definition template includes links that allow a user to add more data filters to an existing dataset segment scheme using logic conjunctive or disjunctive operations. Below is a description of an exemplary set of graphical user interface and the corresponding process as depicted in .

In some embodiments upon receiving a user selection of a logic disjunctive link of or a logic conjunctive link of the client device generates and displays a second filter definition template e.g. and of adjacent the first filter definition template. Upon receipt of a user selection of a second attribute in the attribute list to define a second data filter in the second filter definition template the client devices displays the second attribute and one or more candidate filter conditions in the second filter definition template . depicts a filter definition template that applies a logic disjunctive operation to two attributes a dimension attribute Country Territory and a metric attribute Pageviews . In contrast depicts another filter definition template that applies a logic conjunctive operation to the same two attributes the dimension attribute Country Territory and the metric attribute Pageviews .

Using the user selection of a second filter condition among the one or more candidate filter conditions in the second filter definition template the client device submits a segment scheme generation request to the server system . The segment scheme generation request includes first data filter and second data filter as well as a relationship between the two data filters logic conjunctive or logic disjunctive . The server system then generates a new dataset segment scheme and returns a corresponding segment ID that corresponds to the new dataset segment scheme to the client device . The client device can then generate a segment link including the returned segment ID and display the segment link in the user s profile . Note that the usage of the segment link is the same as the process described above in connection with .

Note that the process of identifying appropriate attributes and filter conditions for a dataset segment scheme is a trial and err process that iterates many times. In this case it would be much less efficient if a user has to create a segment scheme apply the scheme to a set of data records view the segment result and then reopen the filter definition template to modify any data filter.

In some embodiments after a user enters all the data filter definitions including a segment name and before the user submits a request to generate a corresponding dataset segment scheme at the server system the client device may allow the user to test the user provided data filters and adjust the filter definitions on the fly based on the test results. In this case as shown in the client device submits a segment scheme testing request to the server system . Upon receipt of the testing request including the user provided data filter definitions the server system performs a process similar to the one shown in and determines a data record count for each data filter and a data record count for the entire segment scheme. Assuming that the scheme has only two data filters and the two data filters are logically conjunctive to each other the scheme s data record count equals to the number of data records that satisfy both data filters filter conditions. Conversely if the two data filters are logically disjunctive to each other the scheme s data record count equals to the number of data records that satisfy at least one of the two data filters filter conditions. Upon receipt of the data record counts the client device displays them adjacent their corresponding data filters .

After the entry of the user provided segment name and a user selection of the Test Segment button the client device submits a segment scheme testing request to the server system.

Although some of the various drawings illustrate a number of logical stages in a particular order stages which are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned others will be obvious to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover it should be recognized that the stages could be implemented in hardware firmware software or any combination thereof.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

