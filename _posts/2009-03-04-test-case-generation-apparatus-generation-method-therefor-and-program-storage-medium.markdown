---

title: Test case generation apparatus, generation method therefor, and program storage medium
abstract: A method of the present invention includes: inputting a state transition diagram that represents first transitions between a plurality of states; inputting a mapping function that maps a given state to a value within a certain range; mapping each of the states with the mapping function to obtain mapping values, and perform grouping of the states into a plurality of groups based on the mapping values; for each of pairs of two groups obtained by combining two of the groups, setting a second transition from one group of the two groups to the other group when there is at least one first transition between therein; generating a representative transition path which is a sequence of the second transitions by tracing sequentially the second transitions; converting the representative transition path to a transition path in the state transition diagram; outputting the transition path as the test case.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08219573&OS=08219573&RS=08219573
owner: Kabushiki Kaisha Toshiba
number: 08219573
owner_city: Tokyo
owner_country: JP
publication_date: 20090304
---
This application is based upon and claims the benefit of priority from the prior Japanese Patent Applications No. 2008 117173 filed on Apr. 28 2008 the entire contents of which are incorporated herein by reference.

The present invention relates to a test case generation apparatus a generation method therefor and a program storage medium storing a program for generating a test case and to a program verification technique for example.

Designing of a test case using a state transition diagram is known as an effective method for creating a systematic test case. When the calculation process of a computer system is abstracted into a state transition diagram a comprehensive test case is represented by a path that covers all states or all transitions. Because a state transition diagram can be regarded as a directed graph various approximation solutions are known for the problem of test case generation by reducing to a problem of generating the shortest path that covers the nodes or arcs of a directed graph e.g. traveling salesman problem Chinese postman problem or the like .

As actual computer systems have complex internal states when the abstraction level of a state transition diagram is low the state transition diagram would have an extremely large number of states and a corresponding test case would be also very large. On the other hand when the abstraction level of a state transition diagram is high it would have less states and a corresponding test case would be also small but it is necessary to create a state transition diagram with abstraction applied according to the purpose of a test.

According to an aspect of the present invention there is provided with a test case generation apparatus including a computer readable storage medium containing a set of instructions that cause a computer processor to perform a data analyzing process which generates a test case for a target system comprising 

a first input unit configured to input a state transition diagram of the target system the state transition diagram representing first transitions between a plurality of states in the target system 

a second input unit configured to input a mapping function that maps a given state to a value within a certain range 

a grouping unit configured to map each of the states included in the state transition diagram with the mapping function to obtain a plurality of mapping values and groups the states in the state transition diagram based on the mapping values by classifying the states having same mapping value into same group to generate a plurality of groups each including one or more states 

a contracted state transition diagram generator configured to specify any two groups among the groups set a second transition from one group of the two groups to the other group when there is at least one first transition from one of states included in the one group to one of states included in the other group and by iterating these specifying and setting generate a contracted state transition diagram that represents second transitions between the groups 

a representative transition path generator configured to generate a representative transition path which is a sequence of the second transitions by tracing each second transition in the contracted state transition diagram starting from a predetermined group in a serial manner 

for each selected second transition find a first transition which has same transition source state as one of states included in a transition source group of the selected second transition has same transition destination state as one of states included in a transition destination group of the selected second transition and has same transition source state as a transition destination state of an immediately found first transition and

According to an aspect of the present invention there is provided with a test case generation method performed in a computer apparatus including a computer readable storage medium containing a set of instructions that cause a computer processor to perform a data analyzing process which generates a test case for a target system comprising 

inputting a state transition diagram of the target system the state transition diagram representing first transitions between a plurality of states in the target system 

mapping each of the states included in the state transition diagram with the mapping function to obtain a plurality of mapping values and groups of the states in the state transition diagram based on the mapping values by classifying states having same mapping value into same group to generate into a plurality of groups each including one or more states 

specifying any two groups among the groups setting a second transition from one group of the two groups to the other group when there is at least one first transition from one of states in the one group to one of states included in the other group and by iterating these specifying and setting generating a contracted state transition diagram that represents second transitions between the groups 

generating a representative transition path which is a sequence of the second transitions by tracing each second transition in the contracted state transition diagram starting from a predetermined group in a serial manner 

sequentially selecting each second transition in the representative transition path in a traced order 

for each selected second transition finding a first transition which has same transition source state as one of states included in a transition source group of the selected second transition has same transition destination state as one of states included in a transition destination group of the selected second transition and has same transition source state as a transition destination state of an immediately found first transition 

According to an aspect of the present invention there is provided with a program storage medium storing a computer program for causing a computer which generates a test case for a target system to execute instructions to perform the steps of 

inputting a state transition diagram of the target system the state transition diagram representing first transitions between a plurality of states in the target system 

mapping each of the states included in the state transition diagram with the mapping function to obtain a plurality of mapping values and groups of the states in the state transition diagram based on the mapping values by classifying states having same mapping value into same group to generate into a plurality of groups each including one or more states 

specifying any two groups among the groups setting a second transition from one group of the two groups to the other group when there is at least one first transition from one of states in the one group to one of states included in the other group and by iterating these specifying and setting generating a contracted state transition diagram that represents second transitions between the groups 

generating a representative transition path which is a sequence of the second transitions by tracing each second transition in the contracted state transition diagram starting from a predetermined group in a serial manner 

sequentially selecting each second transition in the representative transition path in a traced order 

for each selected second transition finding a first transition which has same transition source state as one of states included in a transition source group of the selected second transition has same transition destination state as one of states included in a transition destination group of the selected second transition and has same transition source state as a transition destination state of an immediately found first transition 

This test case generation apparatus has a first input unit which inputs the state transition diagram that represents transitions first transitions between a plurality of states that a tested system target system such as automatic dispenser etc. can have and a second input unit which inputs state abstraction mapping a mapping function that has a plurality of states as a domain and maps a given state to a value within a certain range and generates a transition path which is a test case for the target system based on the state transition diagram and the mapping function . The test case generation apparatus has an output unit which output the transition path . As an example of practical application of the present invention by using the test case it is possible to verify whether the target system satisfies the state transition diagram or an operation specification on which the state transition diagram is based. Specifically by generating actually transition events of the test case in the target system and confirming occurrence of same operations as those of the state transition diagram or the operation specification a user can confirm that the target system satisfies the state transition diagram or the operation specification .

While the present embodiment is discussed with an example of the state transition diagram of a task control monitor as the state transition diagram the embodiment is also effective on other examples. The task control monitor will be described here.

Consider a monitor function for controlling the execution state of tasks in an information system in which a plurality of tasks exist. As shown in each task in the monitor has three states running RUN ready RDY and sleep WAI states.

The monitor provides each task with three Application Programming Interface API functions including spontaneous CPU handover operation yield spontaneous transition operation to the sleep state sleep and change of a task in the sleep state to the ready state wakeup . These functions are called by a task which is in running RUN state.

A state transition diagram representing states that the task control monitor can have and transitions between those states when there are three tasks is shown in . The state transition diagram of is a directed graph that is described with the states in Table shown in and the transitions of Table shown in and its initial state is state s0 .

More specifically Table shows identifiers SID or StateID and respective states and Table shows identifiers of transitions TID or TransitionID identifiers of source states SID identifiers of destination states SID and contents of transitions events . However the mapping result of Table is added during processing by a state equivalence relation generator a grouping unit discussed below and does not exists yet when Table is input to the present apparatus.

To check the operation of a task control monitor described by this state transition diagram and Tables and API functions corresponding to individual task transitions may be called in sequence starting from the initial state of the diagram and occurrence of a task change corresponding to a state as the destination of transition may be checked. For example operation may be checked such that when tasks 1 calls sleep in the initial state s0 task 2 becomes running and when task 2 in turn calls sleep task 3 becomes running and when task 3 in turn calls yield tasks 3 becomes ready . . . and so on. This checking procedure corresponds to a transition path t t t that starts from the state s0 and reaches state s5 in the state transition diagram.

To carry out checking of system operation comprehensively and by the shortest procedure considering the state transition diagram to be a directed graph the shortest transition path that covers the transitions in the directed graph may be calculated and the system may be operated with events that correspond to transitions in the shortest transition sequence.

The problem of generating the shortest transition sequence that covers the transitions in a directed graph is known as Chinese Postman Problem or CPP in the field of graph algorithm and there is an approximation algorithm for determining a transition sequence that guarantees comprehensiveness see Document Harold W. Thimbleby The directed Chinese Postman Problem In Software Practice and Experience SPE Volume 33 pp. 1081 1096 2003 . The approximation of the algorithm in this case means generation of a transition sequence that is close to the shortest transition sequence.

A result of determining a transition sequence that covers the transitions in the state transition diagram 16 states and 42 transitions with the approximation algorithm see Document 1 is shown in Table of . The 42 states can be covered with 50 consecutive transitions if the system is driven along the four transition sequences that start from the initial state. Such transition sequences are called test cases for the system. It is assumed that a transition sequence always starts from the initial state s0 . The reason why the number of transition sequences is not one is that state s12 is a state that has no destination state and subsequent transition could not continue once state s12 is entered.

A test that covers all transitions in a system is not practical because the size of a test case generally exponentially increases as the size of the system grows. To make a test practicable it is required to give a certain test criterion to reduce the size of the test case. For instance the 16 states of the task control monitor of the example include states that would match if task identifier numbers are rearranged. For example as possible distinctions states s0 and s2 would match if the order of task identifiers is changed whereas states s0 and s12 would not match even if the order of task identifiers is changed. An example of the certain test criterion may be to consider states that will match with rearrangement of task identifier numbers as equivalent states and perform operation check only on transitions between non equivalent states .

This embodiment automatically generates an efficient test case a transition path that satisfies a designated test criterion by inputting such a certain test criterion represented in the form of the state abstraction mapping which is discussed below.

A state transition diagram F is defined by combination of a finite set of states S a finite set of transitions T S S and the initial state s0 . A contracted state transition diagram F can be defined by giving the state transition diagram F and an equivalence relation relating to the states of F . The states of the contracted state transition diagram F are equivalence classes or groups obtained by performing equivalence partitioning grouping for the states of the state transition diagram F based on an equivalence relation . As the transitions in the contracted state transition diagram F transition relations between equivalence classes are defined on the assumption that when a transition exists between state s and state s of F a transition exists between equivalence classes containing those states s and s .

The relation means the equivalence relation equiv described above and the following equivalence class s is assumed to be a set that has state s as the representative element and is a collection of equivalent states in terms of an equivalence relation .

Functions that make reference to the preceding and subsequent states of a transition t for each transition t s s T in the state transition diagram are represented as src t s and dst t s which will be used hereinafter.

To calculate a contracted transition diagram from a state transition diagram it is necessary to define an equivalence relation between states An equivalence relation between states equiv s s is required to meet a reflexivity rule a symmetry rule and a transitivity rule as definition of an equivalence relation. B represents a set of Bloom values that represent either true or false true false values . When s and s are an equivalence equiv s s returns true.

In general a function that returns a true false value from two states does not always meet the equivalence relation axioms shown above. When generating a contracted transition diagram it is not desirable to let a user to describe an equivalence relation as a predicate function for two states because the user may describe a predicate function that does not form an equivalence relation.

The user accordingly describes mapping map that abstracts states and inputs the mapping to the present apparatus as the state abstraction mapping . The state equivalence relation generator grouping unit of the present apparatus generates definition of a state equivalence relation Table of described below utilized for generating the contracted transition diagram from the state abstraction mapping and the state transition diagram . The function equal represents an equal sign relation in a range V of the mapping map .

We provide below an instance of the state mapping that considers states that will match each other with rearrangement of task identifiers as the identical states. This mapping example is described in the format of a well known programming language Scheme see Document 2 Harold Abelson and Gerald Jay Sussman with Julie Sussman Structure and Interpretation of Computer Programs MIT Press 1996 .

The above examples use a function that returns the length of lists of variables RUN RDY and WAI which manage the states of tasks assuming that the contents states shown in Table of are stored in a variable s in the list format of the programming language Scheme see Document 2 . The function getval is a function for obtaining a corresponding value from the name of a variable. The result of applying this function to states is shown in the rightmost column of Table of mapping results or mapping values . By considering that states whose mapping values match each other are in an equivalence relation the classification into equivalence classes or groups is performed and the result of the classification is shown in Table of FIG. . Assuming that a state representative of an equivalence class is one that has the smallest state identifier the representative states SID of the equivalence classes are four states s0 s1 s5 and s12.

The states of a contracted state transition diagram are the equivalence classes of states hereinafter state classes the transitions in the contracted state transition diagram are transitions between the state classes and it is assumed that a transition relation exists between two state classes when there is a transition relation between states that are contained in those state classes.

An algorithm for generating such a contracted state transition diagram is described below. A flow of processing corresponding to the algorithm is shown in the flowchart of . This algorithm is executed by the contracted state transition diagram generator the contracted state transition diagram generator may be called a state transition diagram generator simply . The contracted state transition diagram generator the state transition diagram generator generates the contracted state transition diagram by using the state equivalence relation Table of and the state transition diagram according to the algorithm shown below.

In the description of the algorithm a symbol means an empty set and means substitution of the right side into the left side. KEYS refers to the procedure for obtaining the range of mapping. P X means the power set of X which is the set of all subsets of X.

Determine S from the state partitioning SMAP and T from the transition partitioning TMAP and output the contracted transition diagram F and stop

When the state equivalence relation generator completes classification of states into equivalence classes a representative state SID i.e. group has been determined for each state SID the leftmost column of Table of . State classes that serve as states of the contracted transition diagram are labeled with the identifiers of representative states i.e. group identifiers .

Transitions in the contracted transition diagram are determined by identifying representative states SID and SID to which the source and destination states i.e. SID and SID of each transition belong as shown in the transition table Table of and classifying transitions having the same combination of representative states in same equivalence class i.e same group Table of . A transition having the smallest identifier TID in a transition class is used for identification of the transition class as the representative transition TID . In this example there are eight transition classes i.e eight groups t t t t t t t and t.

In the above stated algorithm illustration of KEYS in the above SMAP example is KEYS SMAP s0 s1 s5 s12.

In this way the state transition diagram generator specifies two groups among the groups i.e. combines two representative states sequentially. For the specified two groups i.e. two representative states or two classes the state transition diagram generator sets a second transition from one group of the two groups to the other group when there is at least one first transition from one of states included in the one group to one of states included in the other group. The state transition diagram generator iterates this specifying of two groups and setting a second transition. Thereby the state transition diagram generator generates the contracted state transition diagram that represents second transitions between the groups i.e representative states or classes 

The representative transition path generator generates a representative transition path represented by representative states i.e. groups or classes and representative transition events the path covering the transitions i.e. second transitions in the contracted state transition diagram . That is the representative transition path generator generates a representative transition path which is a sequence of the second transitions by tracing sequentially the second transitions in the contracted state transition diagram starting from a predetermined representative state i.e. a predetermined group in the contracted state transition diagram. The predetermined representative state i.e. the predetermined group is a representative state i.e. group including an initial state s0. This can employ a known algorithm see Document 1 for example. Here a transition path that can be executed as a test is a continuous transition path that starts from the initial state s0. A continuous transition path means the destination state of the current transition is the same as the source state of the next transition within a transition sequence. The representative transition path which is continuous in the contracted state transition diagram is not always a continuous transition path in the state transition diagram. Thus if the shortest representative transition path that covers the contracted state transition diagram is not a continuous path in the original state transition diagram conversion to a continuous transition path based on the representative transition path is required. A procedure of such path conversion is shown below. A flow of processing corresponding to the procedure is shown in the flowchart of . This processing is performed by the transition path converting unit . This processing may be performed only when the transition path converting unit determines that the representative transition path is not a continuous path in the original state transition diagram or always performed without determination of whether the representative transition path is a continuous path in the original state transition diagram or not.

where DIJKSTRA is a known procedure of shortest path calculation e.g. Dijkstra s algorithm and the state s dsts has the shortest path length DIJKSTRA s s in the state s dsts 

Determination of a path that covers the transitions in the contracted state transition diagram with the representative transition path generator using a known algorithm see Document 1 results in the transition sequence shown in Table of the representative transition path . This representative transition sequence is a consecutive path in the contracted state transition diagram but is not always a consecutive path in the original state transition diagram . In that case it cannot serve as an executable test case as long as it is converted.

For example a transition sequence along the representative transitions in the second path in Table of is t t t t t t but the destination and source states do not connect in a continuous manner in the original state transition diagram. For example state s1 and state s6 have same state class thus they are the same state in the contracted state transition diagram but are different states in the original state transition diagram .

When the representative transition path is not a consecutive path in the original state transition diagram the transition path converting unit performs transition path conversion based on the representative transition path to obtain a transition path which is executable in the original state transition diagram. More specifically the transition path converting unit appropriately selects a transition from transitions belonging to each of transition classes of the representative transition path respectively and generates a transition path so that transition of the states is continuous in the original state transition diagram. When it cannot generate a transition path or a sequence of transitions that has continuous states only by selecting transitions the transition path converting unit makes states of the path continuous by utilizing an algorithm for calculating the shortest path step C in . That is for a certain transition class which is disincentive for generation of a continuous path the transition path converting unit adopts a transition that starts from the destination state of a transition selected from transitions belonging to the immediately preceding transition class toward one of states included in the state class of the destination state of the certain transition class and thereby gets the consecutive path.

Here an operation of finding a transition path which is consecutive in the original state transition diagram based on a representative transition path in the contracted state transition diagram is named path conversion or path reconstruction . The algorithm of path conversion or path reconstruction is as described above using .

The result of applying the path conversion or reconstruction algorithm with the transition paths of Table in and the initial state s0 as inputs is shown in Table of . The transition paths of Table are transition paths obtained by selecting one transition from transitions belonging to each of the transition classes of Table of with the state s0 as the initial state and are executable paths that are continuous in the original state transition diagram. The transition paths in Table of are the shortest test cases that meet the initially established test criterion to cover all states and transitions between the states to the extent task identifiers are not distinguished.

In this way the transition path converting unit sequentially select each transition i.e. second transition of the representative transition path in a traced order i.e. an order by which each second transition are traced in the representative transition path generator . For each of each selected second transition the transition path converting unit finds a first transition a which has same transition source state as one of states in a transition source group of the selected second transition and has same transition destination state as one of states in a transition destination group of the selected second transition and b which has same transition source state as a transition destination state of an immediately found first transition. It should be noted that the first transition is a transition included in the original state transition diagram as stated above. The transition path converting unit generates the transition path which is a sequence of each found first transition.

As previously mentioned when the first transition has not been found for one of the sequentially selected second transitions the transition path converting unit selects a first transition which has same transition source state as a transition destination state of the first transition found for an immediately preceding second transition of the one and has same transition destination state as one of states included in a transition destination group of the one. Thereby the transition path converting unit generates a transition path so that transition of the first states is continuous in the original state transition diagram.

There is no necessity to create a state transition diagram having a level of abstraction adapted for the purpose of a test and it is also possible to prevent errors at the time of describing an equivalence relation input of a relation that does not satisfy the reflexivity rule symmetry rule and transitivity rule by using abstraction mapping of states instead of an equivalence relation between states.

Also since the shortest path that covers a state space classified into equivalence classes through abstraction mapping is generated an efficient test case with a desired coverage rate can be generated.

In addition it is possible to automatically convert a transition path i.e. representative transition path in the contracted state transition diagram to a transition path in the original state transition diagram.

The test case generation apparatus may be implemented by using for example a general purpose computer device as basic hardware. Thus the elements in may be implemented by causing a processor provided in the above described computer device to execute a program. Then the apparatus may be implemented by previously installing the above described program in the computer device or by installing the program in the computer device as needed. The program to be installed may be stored on a recording medium or a program storage medium such as a CD ROM or distributed though a network.

