---

title: Real-time, bi-directional data management
abstract: An example method for real-time bi-directional data management includes receiving a requested data list from a field application, receiving an available data list from a data source, and subscribing to available data by mapping the available data list to the requested data list, the available data having a first data format and a first protocol and including a first context identifier for identifying a portion of data. The method further includes modifying the available data have a second data format and a second protocol, the modified data including the first context identifier, and performing a field operation based on the modified data to generate processed data, the processed data including the first context identifier. The method further includes modifying the processed data to generate second modified data having the first data format and the first protocol, the second modified data being stored in the data source.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08135862&OS=08135862&RS=08135862
owner: Schlumberger Technology Corporation
number: 08135862
owner_city: Sugar Land
owner_country: US
publication_date: 20090107
---
This application claims priority pursuant to 35 U.S.C. 119 e to the filing date of U.S. Patent Application Ser. No. 61 020 975 entitled Method and System for Field Drilling Operations filed on Jan. 14 2008 which is hereby incorporated by reference in its entirety.

This application contains subject matter that may be related to U.S. application Ser. No. 11 215 605 Francine Evans et al. Middleware method and apparatus and program storage device adapted for linking data sources to software applications filed Aug. 30 2005 and assigned to Schlumberger Technology Corporation.

Operations such as surveying drilling wireline testing completions production planning and field analysis are typically performed to locate and gather valuable downhole fluids. Surveys are often performed using acquisition methodologies such as seismic scanners or surveyors to generate maps of underground formations. These formations are often analyzed to determine the presence of subterranean assets such as valuable fluids or minerals or to determine if the formations have characteristics suitable for storing fluids.

During drilling and production operations data is typically collected for analysis and or monitoring of the operations. Such data may include for example information regarding subterranean formations equipment and historical and or other data.

Data concerning the subterranean formation is collected using a variety of sources. Such formation data may be static or dynamic. Static data relates to for example formation structure and geological stratigraphy that define geological structures of the subterranean formation. Dynamic data relates to for example fluids flowing through the geologic structures of the subterranean formation over time. Such static and or dynamic data may be collected to learn more about the formations and the valuable assets contained therein.

An example method for real time bi directional data management includes receiving a requested data description list from a field application associated with a drilling system receiving an available data description list from a data source and subscribing to available data by mapping the available data description list to the requested data description list the available data having a first data format and a first communication protocol associated with the data source and including a first context identifier assigned by the data source for identifying a portion of the available data. The method further includes modifying the available data to generate first modified data having a second data format and a second communication protocol for sending to the field application the first modified data including the first context identifier for identifying a portion of the first modified data and selectively performing a field operation based on the first modified data to generate processed data by the field application the processed data including the first context identifier for identifying a portion of the processed data. The method further includes modifying the processed data to generate second modified data having the first data format and the first communication protocol the second modified data being stored in the data source.

Other aspects of the inventive concept will be apparent from the following description and the appended claims.

Specific embodiments will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description numerous specific details are set forth in order to provide a more thorough understanding. In other instances well known features have not been described in detail to avoid obscuring embodiments of real time bi directional data management.

In general embodiments of real time bi directional data management provide a method and system for obtaining field data. More specifically use of real time bi directional data management in part includes read operations and write back operations for a wide variety of field applications e.g. acquisition system engineering analysis real time surveillance data broker service and other oilfield applications based on a wide variety of data sources for field operations such as database system file system web service peer application multi pass source subscription service and other data sources. In some embodiments real time data workflows of field data consider context information e.g. wellbore name drilling tool run number etc. throughout a read operation followed by a write back operation with modification of data in the intervening field application.

Furthermore in some embodiments of the invention real time data workflows are capable of requesting multiple data channels in a single operation and processing data logs from multiple drilling tool runs and associated drilling tool passes. In addition the exchange of field data may be performance optimized to reduce data transfers and also to manage the system load of both data sources and field applications. The real time data workflows may be capable of but not limited to one of more of the following efficient transparent write back multi homed write back write back cache persistency publishing data back to the data source efficient reading of multiple channels of data concurrently providing access to data from multiple operations providing context information to the application and reflecting the application context within the user interface providing detailed context information back to the application transforming queries and responses based upon a selected source without the need for a new adapter applying the transformations in a configurable pipeline effecting template reuse and modularization specifying a global start and end point to govern the data flow etc.

FIGS. . . depict simplified representative schematic views of a field having subterranean formation containing reservoir therein and depicting various field operations being performed on the field . depicts a survey operation being performed by a survey tool such as seismic truck . to measure properties of the subterranean formation. The survey operation is a seismic survey operation for producing sound vibrations . In one such sound vibration generated by a source and reflects off a plurality of horizons in an earth formation . The sound vibration s is are received in by sensors S such as geophone receivers situated on the earth s surface and the geophone receivers produce electrical output signals referred to as data received in . The data received is provided as input data to a computer of the seismic truck . and responsive to the input data the computer generates a seismic data output record .

A surface unit is used to communicate with the drilling tools . and or offsite operations. The surface unit is capable of communicating with the drilling tools . to send commands to the drilling tools and to receive data therefrom. The surface unit collects data generated during the drilling operation and produces data output which may be stored or transmitted. Computer facilities may be positioned at various locations about the field e.g. the surface unit and or at remote locations.

Sensors S such as gauges may be positioned about the field to collect data relating to various field operations. As shown the sensor S is positioned in one or more locations in the drilling tools and or at the rig to measure drilling parameters such as weight on bit torque on bit pressures temperatures flow rates compositions rotary speed and or other parameters of the field operation. Sensor may also be positioned in one or more locations in the circulating system.

The data gathered by the sensors S may be collected by the surface unit and or other data collection sources for analysis or other processing. The data may be historical data real time data or combinations thereof. The real time data may be used in real time or stored for later use. The data may also be combined with historical data or other inputs for further analysis. The data may be stored in separate databases or combined into a single database.

Data outputs from the various sensors S positioned about the field may be processed for use. The data may be historical data real time data or combinations thereof. The real time data may be used in real time or stored for later use. The data may also be combined with historical data or other inputs for further analysis. The data may be housed in separate databases or combined into a single database.

Sensors S such as gauges may be positioned about the field to collect data relating to various field operations as described previously. As shown the sensor S is positioned in the wireline tool to measure downhole parameters which relate to for instance porosity permeability fluid composition and or other parameters of the field operation.

Sensors S such as gauges may be positioned about the field to collect data relating to various field operations as described previously. As shown the sensor S may be positioned in the production tool . or associated equipment such as the Christmas tree gathering network surface facilities and or the production facility to measure fluid parameters such as fluid composition flow rates pressures temperatures and or other parameters of the production operation.

While only simplified wellsite configurations are shown it will be appreciated that the field may cover a portion of land sea and or water locations that hosts one or more wellsites. Production may also include injection wells not shown for added recovery. One or more gathering facilities may be operatively connected to one or more of the wellsites for selectively collecting downhole fluids from the wellsite s .

While FIGS. . . depict tools used to measure properties of a field it will be appreciated that the tools may be used in connection with non wellsite operations such as mines aquifers storage or other subterranean facilities. Also while certain data acquisition tools are depicted it will be appreciated that various measurement tools capable of sensing parameters such as seismic two way travel time density resistivity production rate etc. of the subterranean formation and or its geological formations may be used. Various sensors S may be located at various positions along the wellbore and or the monitoring tools to collect and or monitor the desired data. Other sources of data may also be provided from offsite locations.

The field configuration in FIGS. . . is intended to provide a brief description of an example of a field usable with real time data workflows. Part or all of the field may be on land and or sea. Also while a single field measured at a single location is depicted real time data workflows may be utilized with any combination of one or more fields one or more processing facilities and one or more wellsites.

The drilling system includes a drill string suspended within the borehole with a drill bit at its lower end. The drilling system also includes the land based platform and derrick assembly positioned over the borehole penetrating a subsurface formation F . The assembly includes a rotary table kelly hook and rotary swivel . The drill string is rotated by the rotary table energized by means not shown which engages the kelly at the upper end of the drill string. The drill string is suspended from hook attached to a traveling block also not shown through the kelly and a rotary swivel which permits rotation of the drill string relative to the hook.

The drilling system further includes drilling fluid or mud stored in a pit formed at the well site. A pump delivers the drilling fluid to the interior of the drill string via a port in the swivel inducing the drilling fluid to flow downwardly through the drill string as indicated by the directional arrow . The drilling fluid exits the drill string via ports in the drill bit and then circulates upwardly through the region between the outside of the drill string and the wall of the borehole called the annulus . In this manner the drilling fluid lubricates the drill bit and carries formation cuttings up to the surface as it is returned to the pit for recirculation.

The drill string further includes a bottom hole assembly BHA generally referred to as near the drill bit in other words within several drill collar lengths from the drill bit . The bottom hole assembly includes capabilities for measuring processing and storing information as well as communicating with the surface unit. The BHA further includes drill collars for performing various other measurement functions.

Sensors S are located about the wellsite to collect data in real time concerning the operation of the wellsite as well as conditions at the wellsite. The sensors S of may be the same as the sensors of FIGS. . ..

The drilling system is operatively connected to the surface unit for communication therewith. The BHA is provided with a communication subassembly that communicates with the surface unit. The communication subassembly is adapted to send signals to and receive signals from the surface using mud pulse telemetry. It will be appreciated by one of skill in the art that a variety of telemetry systems may be employed such as wired drill pipe electromagnetic or other known telemetry systems.

Typically the wellbore is drilled according to a drilling plan that is established prior to drilling. The drilling plan typically sets forth equipment pressures trajectories and or other parameters that define the drilling process for the wellsite. The drilling operation may then be performed according to the drilling plan. However as information is gathered the drilling operation may need to deviate from the drilling plan. Additionally as drilling or other operations are performed the subsurface conditions may change. The earth model may also need adjustment as new information is collected.

The middleware apparatus is capable of supporting real time data workflows and may be referred to as a Real Time Data Link RTDL in some examples. A field application may be configured to operate cooperatively with the RTDL and referred to as RTDL enabled software application also referred to herein as RTDL enabled application . Based on the functionality of the RTDL each software application may include a graphical user interface i.e. GUI to obtain data from any data source without the need to be configured specifically for the data formats and the communication protocols associated with the received data. The graphical user interface may be displayed to a user by the RTDL enabled field application .

Further as shown in the RTDL includes application programming interface API data adapters requested data description list RDDL available data description list ADDL write back engine and data dispatch engine .

The API may include public methods of RTDL which the field applications may call. These public methods of API abstract many differences between the real time data sources and provides the field applications with a consistent way of consuming source data which may be implemented in the graphical user interface . From a user interaction perspective one or more of the data sources may be selected via the graphical user interface available via one of the field applications and then the user is guided through a series of data source specific interactions that result in the selected data being asynchronously transferred to the application. In this process the data adapters handle all the communication with the data sources thus hiding the differences in the communication protocols from the field applications . Multiple data sources may be interfaced within an adapter. Most data sources may be live and supplying real time data to the RTDL but the RTDL may also be configured with the capability to process local drilling files having historical data. In the case of live data sources the RTDL may be further configured to optimize interactions with the data sources in order to reduce data transfers and to reduce the system load of both the data sources and the field applications .

In one or more embodiments the RTDL optimizes interactions with the data sources by accommodating for lagging channels i.e. sparsely available field data . For instance lagging channels may occur but not limited to when querying multiple data channels sharing a common index and at least one of the data channels does not span the entire index range when data gaps exist for certain data channels while others are real time data or when a late available data description selection by the user occurs during a mature real time session. In this instance the lagging channels may result in query responses including superfluous data that has been previously processed in the session causing the RTDL to fall behind real time because data sources may limit the amount of data returned in each query. The RTDL may be configured to accommodate the lagging channels by performing continuous pre query analysis of the requested data channels and sub dividing the data channels into independent query groups which are sent as separate requests. In this case the query group associated with the lagging channels may rejoin the real time query group once the lagging channels achieve real time.

In one or more embodiments the RTDL optimizes interactions with the data sources based on the status of field data in the data sources . Examples of statuses of field data include but are not limited to incrementally increasing temporarily paused or complete i.e. no additional field data . The RTDL may initially determine by default that the data of each data source is increasing. The RTDL may be further configured to pre query a timestamp of the data sources to reduce the occurrence of unnecessary queries for completed field data. For instance once the field data of a particular data source is complete the RTDL may determine based on a timestamp from the particular data source that a continuous query of the particular data source is no longer necessary. In this instance if the field data of the particular data source is subsequently increased the RTDL is notified based on the timestamp and may resume querying the particular data source normally.

The series of data source specific interactions described above may be embodied in a variety of workflows. For instance requested data description list RDDL may be supplied by the field application to the RTDL . An RDDL is a flexible object that provides a search filter for the RTDL in interrogating one or more data sources regarding available data. RDDL may be with or without wildcards. As a result search results may be returned from interrogated data sources in the form of available data description list ADDL . A user of the field applications may then map the RDDL and the ADDL for matching available data to the initial requests. An example of ADDL is described in detail with respect to below. A feature may also be available to automatically provide RDDL to ADDL mappings without the necessity of user interaction.

In addition the RTDL also includes a write back engine and a data dispatcher . The write back engine is configured to provide the capability to publish data back to the data sources . The data dispatcher is configured to provide context information to the application. Also the API can be employed to reflect the application context within the graphical user interface . The RTDL may also be configured with the capabilities to transform queries and responses based upon a selected source read multiple channels of data concurrently provide access to data from multiple operations etc. More details of these capabilities are described with respect to and below. Field applications and users may use the framework to specify a global start and end point to govern the real time data workflow.

As shown in one or more data sources of may include database system . web service . RTDL enabled peer application . multi pass source . file system . subscription service . or other field data sources. Each of these real time data sources may be coupled to a particular data adaptor such as data adaptors . . . For instance the data adapters may include functionalities for communicating with WITSML Wellsite Information Transfer Standard Markup Language API Servers communicating with a Drilling Acquisition Systems consuming real time drilling files published on a server consuming files recorded by a RTDL recorder tool e.g. testing and simulation tool etc. Although not shown in each adaptor type may be associated with a set of one or more data sources . Each data source s may be represented by an XML configuration which includes references to the various adaptor methods. In some instances a sub class may be derived from an adaptor to provide special behavior required by a data source. For instance source specific behavioral differentiation may be reflected in XSL extensible style sheet language transforms of the request and response messages for the WITSML API Servers.

The data adapters described above may be configured to transform data from one or more data sources based on the requirements of a field application . In this case the data adapters may use transformation scripts to transform the data from the data sources . Further the transformation scripts may be modularized such that common transformations may be shared between multiple data adapters and data sources i.e. a transformation pipeline . For instance multiple data sources may include similar types of data thus the corresponding data adapters may require a common transformation for at least a portion of the similar types of data. In this instance each data adapter may also use additional transformations that are specific to other data sources associated with the data adapter . Those skilled in the art will appreciate that the modularization of transformation scripts facilitates the combination of reusable vendor neutral transformation scripts and vendor specific transformation scripts.

In addition the field applications as also shown in may include acquisition system . engineering analysis . real time surveillance . data broker services . or other application types . . The acquisition system . may be write only in the sense that it only performs the write back operation in without any read operation in . The real time surveillance . and data broker services may be read only in the sense that it only performs read operation in without any write back operation in The engineering analysis . may be may be read write capable in the sense that read data from one of the data source s may be modified adjusted or otherwise processed by the engineering analysis . and written back to the data source s subsequently. In some examples the field application may be multi homed in the sense that it may be reading from one data source while writing back to another data source. A field application may connect simultaneously to two or more RTDL instances each associated with a different data source. The first RTDL instance may be used for reading data while the second RTDL instance may be used for writing back data. Multi homed field application may be used in for instance providing correlation between different wells or assimilating disparate data from multiple data sources.

One or more of the data sources . . may provide many different types of data such as data log trajectory risk message wellbore geometry wbGeometry tubular operations report opsReport etc. Each data type may be formatted differently. For instance data log may be formatted as a trace chart a spread sheet like table or other appropriate formats. In this instance a well log may represent resistivity or other measurements taken by a wireline tool at various depths as a depth indexed trace chart. A data log may also be time indexed containing for instance hookload measurements at various time points. Furthermore a data log may include data from multiple data channels corresponding to multiple sensors of a data source. For instance a data log with a table format may include multiple columns of data channels and multiple rows of data taken at different depth or time. Each point entry relating to a particular data channel at a particular depth or time is referred to as a data point. A single row of data points containing data relating to multiple data channels taken at a common index value is referred to as a vector of data points or a pseudo data frame . Data depicted in the data queues and may represent data points or vectors of data points. The data queues and may also contain more complex data structures such as trajectory station or risk data.

In addition data may be tagged with context information. Context information may include attributes for identifying a data source such as well name WellName well ID WellID wellbore name WellboreName wellbore ID WellboreID section name SectionName subsection name SubSectionName etc. Context information may also include attributes for identifying data collection parameters such as log name log ID run number pass number pass type etc. Further detailed information about logs channels and the ADDL in may be available via the API .

Further as shown in the write back engine may operate on data from a data queue enqueued through the API from the field application . . . The write back engine may be configured to perform multiple functionalities which are described below. Within the real time data workflows the field applications . . may specify the destination or target of the write back operation in FIG. . but the context may be late bound. For instance a write back call of the API may include a log name and log ID as a target but the WellName WellID WellboreName and WellboreID may be determined and applied after a connection to the data source is made prior to writing which is the meaning of the term with context in . The write back engine may support two possible operations namely add request for adding new data object on the data source or update request for updating existing data object on the data source. The operations adding or updating are transparent to the field applications . . . An add request may be sent first and if this fails because the data object already exists all future requests may then be converted to update requests by the write back engine .

In one or more embodiments the write back engine may be configured to process generic vendor neutral write requests for different vendor specific data sources . . . For instance the write back engine may handle non standardized error codes returned from the different data sources . . when a fault occurs. In this instance the RTDL may employ an error code normalization model to allow the write back engine to handle faults from different data sources . . in a homogenous manner.

Write back data may be cached inside RTDL under control of the write back engine so that the field applications . . may operate using a fire and forget model i.e. applications may use the Write Back API without waiting to determine whether the operations are immediately successful. Accordingly field applications . . need not be concerned with managing the connection state of the real time data workflows. RTDL manages the write back cache for data buffering during disconnects or until the write back operations are successfully completed. The data buffering may be performed in memory not shown and backed up on disk not shown . Statistics for numbers of rows and tables in the write back cache may be made available to the field applications . . .

Examples of high level calls associated with a RTDL.DataWriter object of the RTDL are given in TABLE 1 below.

Unwritten data in the write back cache is persisted to disk and reloaded when RTDL starts up. This guards against losing data updates caused by a system crash. A configuration property appUsageMode may be set to RO read only RW read write or WO write only . This setting may affect the behavior of the RTDL and the graphical user interface. It may be set dynamically or set in the configuration file of the field applications . . . Write backs may be scheduled relatively quickly for instance every 5 seconds.

TABLE 2 below includes sample code to illustrate with details omitted how an application would use the write back features supported by the RTDL .

Further as shown in the query preparation engine may request data by submitting a query to data sources . . . The query may be submitted based on the RDDL which may include requests relating to multiple data channels. A substantial performance increase may be realized by using Multi Channel Queries MCQ for data from data sources such as a WITSML API server. Instead of requesting a single data channel in a querying a data source the query preparation engine groups a query for multiple data channels into a single request resulting in a substantially lower number of requests and responses reducing overall bandwidth and improving overall performance. In a typical drilling operation processing depth indexed MCQ responses may require properly managing offsets and lagging channels while processing time indexed responses via MCQ is relatively straight forward. The response processing engine may be configured to consider effects of offset and lagging among multiple data channels with respect to a common index in a data log. The response processing engine may be configured to intelligently and frequently decide which data channels to involve in calculating the overall minimum depth index for accommodating lagging data channels without being bound by data channels that are not actively increasing. The response processing engine may also be configured to consider duplicated data from overlaps in prior queries when processing depth indexed MCQ responses. In this case a data source may be configured to provide a timestamp indicating when the data source was last updated. The query preparation engine may consult the last update timestamp of data sources to optimize data retrieval. For example the query preparation engine may specify that only data updated after a specified time should be queried where the response processing engine may use duplicate data from a prior query if the data has not been updated.

In addition the response processing engine may be configured to manage lagging channels as a query is performed. For instance if a lagging channel is detected the response processing engine may separate the portion of the MCQ related to the lagging channel into a separate query. In this instance the original query may be completed providing the requested data to a field application while the separate query associated with the lagging channel is still pending.

The high level algorithm and the detailed algorithm for MCQ are given in TABLE 3 and TABLE 4 respectively.

In addition the algorithm described above may be supplemented with considerations for WITMSL servers that do not keep updated minimum index minIndex and or maximum index maxIndex for each data channel. The minIndex may be considered in conjunction with a log Direction attribute. For instance in a decreasing log the minIndex index may represent a deeper depth and therefore is greater than the maxIndex.

Further as shown in the response processing engine processes data received from the data sources . . and enqueues data onto the data queue for sending to the field applications . . via the data dispatch engine . More details of the response processing engine and the data dispatch engine are described with respect to below.

In a typical drilling operation depicted in the drilling tool e.g. drill string bottom hole assembly BHA drill bit etc. shown in may traverse the borehole shown in in multiple drilling tool runs e.g. BHA Run Number and depicted in TABLE 5 below . Each drilling tool run may include multiple drilling tool passes e.g. PassNumber P P of BHA Run Number and PassNumber P P of BHA Run Number depicted in TABLE 5 below . Each drilling tool pass may include different types of passes e.g. RIH REAM DRILL BREAM STRIP POOH etc. as described in TABLE 5 below .

A drilling operation may include multiple operation stages e.g. drilling tool runs or passes . Data relates to each operation stage may be stored and dispatched separately. As shown in the data source s depicts a multi pass data source having data logs e.g. logged runs collected from two BHA runs Run and Run of a drilling operation. Each of the BHA runs may include multiple drilling passes such as Drilling ReamUp ReamDown TripIn TripOut etc. For instance the data logs may be collected from the sequence depicted in TABLE 6 below. In these multiple BHA runs passes that repeat multiple times in a single run may be identified by unique pass numbers.

Further as shown in the data logs e.g. logged runs may include context information. For instance the context information may include data log names such as Drilling Run in logged run ReamUp Run Pass in logged run etc. data log IDs such as LD in logged run LRU in logged run etc. channel data IDs such as Channels A B in logged runs corresponding to BHA Run and Channels A B C in logged runs corresponding to BHA Run . Multi pass data sources e.g. data source may store data logs in separate sections such as a main section and multiple subsections. The main section typically contains all time indexed data and the depth indexed data from the Drilling pass while the subsections under a main section typically contain depth indexed data from other passes for instance ReamUp TripOut etc.

According to the organization of data in the data source e.g. data logs of the multi pass data source s the log processing module including the response processing engine and dispatcher may receive and dispatch individual data points or a vector of data points to the field application . Examples of individual data points may include a single data channel in a single row of a table formatted data log. Examples of a vector of data points may include an entire row relating to multiple data channels sharing a common index value in a table formatted data log. Data context information e.g. PassNumber RunNumber and direction parameters needs to be provided to the field application along with the vector of data points for data interpretation. This vector of data points may be considered a Pseudo Data Frame . A data log e.g. any of the logged runs dispatched in vectors is typically globally ordered by index value and logically contains related groups having multiple adjacent Pseudo Data Frames that share a common index progressing through consecutive values. To split the related groups out of the vectors the response processing engine and the dispatcher of the log processing module may be configured to consider that in general the related groups may not be explicitly identified and data channels may be missing values corresponding to a given index value.

As RT field application requests data from data source s a request data description list RDDL is generated in the RTDL to describe details of data requested from the field application . The Channel Refresh Worker thread . executed in the RTDL may periodically query the data source s to determine whether any new data logs are created in the wellbore or if any new data channels have been added to the data logs already being read. The ADDL is updated accordingly by the Channel Refresh Worker thread . . For instance ADDL as depicted in indicates that available data from data channel A may be found in data logs LD LRU LRDm LRU LRD LTO LD LRU LRD and LTO available data from data channel B may be found in data logs LD LRU LRDm LRU LRD LTO LD LRU LRD and LTO and available data from data channel C may be found in data logs LD LRU LRD and LTO.

In addition the Data Worker thread . executed via the response processing engine and the dispatcher may treat drilling and non drilling passes in two distinct ways as follows 

In addition the response processing engine may enqueue data vectors into related groups . . based on context information by adding them into separate dispatch queues based upon processed context identifiers . The dispatcher may then batch data according to these context segregated queues while considering maximum size and minimum frequency.

Some RTDL applications may be multi pass enabled and others may not be designed to handle multi pass data. Therefore a global attribute e.g. referred to as Boolean MultiPassEnabled may be set on an API. By default this attribute may be set to False . It is expected that an application does not normally change this value during its session and it would be locked after connection is made to a specific wellbore or section. The value of this attribute may affect how available data is interpreted and queried. As mentioned above it also affects the context information that is dispatched to the application.

RTDL may provide capabilities for programmatic access to the entire state of the framework including the ability to create the GUI through the API. The framework enforces supported call sequences so that the application e.g. field application does not use the framework improperly. Additional capabilities that may be supported by RTDL are described in TABLE 7 below.

Initially data may be requested by a field software application using a requested data description list RDDL that is received by Real Time Data Link RTDL block . The RTDL may query a data source based on the RDDL combining multiple data channels in a single query block . Responsive to the query the RTDL may receive an available data description list ADDL from the data source block .

A user of the field software application may then map the RDDL and ADDL to select data not shown . Accordingly the RTDL may subscribe to the mapped available data from the ADDL block . The RTDL may modify the data format and communication protocol according to the data source specifics.

Data received from the data source may be multi pass data tagged with context information such as context marker or context identifier. The RTDL may format the received available data based on the context identifiers block for sending to the field application block . The RTDL may modify the data format and communication protocol according to the field application requirement. The field application may optionally process the formatted data in performing a field operation and generate processed data while retaining the context information block . The processed data may optionally be written back to the data source for updating or storage block . Finally the drilling operation may be optionally adjusted based on processed data block .

The Real Time Data Link RTDL may be implemented on virtually any type of computer regardless of the platform being used. For instance the RTDL may be implemented on a computer system that includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers. The computer system may also include input means such as a keyboard and a mouse and output means such as a monitor.

The computer system may be connected to a local area network LAN or a wide area network e.g. the Internet via a network interface connection. Those skilled in the art will appreciate that these input and output means may take other forms.

Further those skilled in the art will appreciate that one or more elements of the aforementioned computer system may be located at a remote location and connected to the other elements over a network. Further real time bi directional data management may be implemented on a distributed system having a plurality of nodes where each portion of real time bi directional data management may be located on a different node within the distributed system. In one example the node corresponds to a computer system. Alternatively the node may correspond to a processor with associated physical memory. The node may alternatively correspond to a processor with shared memory and resources. Further software instructions to perform embodiments of real time bi directional data management may be stored on a computer readable medium such as a compact disc CD a diskette a tape a file or any other computer readable storage device.

The method is depicted in a specific order. However it will be appreciated that portions of the method may be performed simultaneously or in a different order or sequence. Further throughout the method the field data may be displayed the canvases may provide a variety of displays for the various data collected and or generated and he display may have user inputs that permit users to tailor the field data collection processing and display.

It will be understood from the foregoing description that various modifications and changes may be made in the embodiments of real time bi directional data management without departing from its true spirit. For instance the method may be performed in a different sequence and the components provided may be integrated or separate.

This description is intended for purposes of illustration only and should not be construed in a limiting sense. The scope of real time bi directional data management should be determined only by the language of the claims that follow. The term comprising within the claims is intended to mean including at least such that the recited listing of elements in a claim are an open group. A an and other singular terms are intended to include the plural forms thereof unless specifically excluded.

