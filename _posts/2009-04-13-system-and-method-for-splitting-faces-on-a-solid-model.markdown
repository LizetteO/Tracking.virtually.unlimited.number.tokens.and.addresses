---

title: System and method for splitting faces on a solid model
abstract: A system, method, and computer program for selecting modifications to a solid model that is manipulated in a computer having software instructions, comprising a computer system, wherein the computer system includes a memory, a processor, a user input device, and a display device; a computer generated geometric model stored in the memory in the memory of the computer system; and wherein the computer system selects a selecting point on a modification feature directly on a solid model using a computer peripheral input; sorts by distance a plurality of adjacent faces that are adjacent to a selection face determined by the selecting point; determines whether a convex condition exists wherein the plurality of adjacent faces are convex to the selection face; determines whether a candidate curves exists where the plurality of adjacent faces share a same surface with a previously visited face and the convex condition exists; imprints the candidate curve on the solid model to prepare the solid model for modification according to a modification intent from a user; modifies the solid model according to the modification intent that results in a modified solid model and modified visual display information; and displays the modified solid model using the modified visual display information to the user, and appropriate means and computer-readable instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08872820&OS=08872820&RS=08872820
owner: Siemens Product Lifecycle Management Software Inc.
number: 08872820
owner_city: Plano
owner_country: US
publication_date: 20090413
---
This Application claims priority to Provisional U.S. Application Ser. No. 61 044 644 filed on Apr. 14 2008.

The system of the innovations described herein relates generally to computer aided design software applications. More specifically the system relates to splitting faces in a solid model representation.

In today s world of computer aided design CAD applications and geometry modeling systems parts are commonly designed in one of two ways history based or history less. A history based system is commonly characterized by the parametric modeling paradigm that emerged in the mid 1980s. In parametric modeling systems a recipe or history tree is created to reflect how things are related to one another. When a change is made to one original item all items created later in time from the original item are updated. In this way for example two faces may remain coplanar because they were designed with such a relationship captured during the design process and simply replayed during the update process. illustrate a trimetric projection of a three dimensional block. Referring to a C block in three dimension 3D is viewable to a user on a computer display and is in need of a modification by a user by altering a bottom leg a top leg or both the bottom leg and the top leg . In a history based system how easily the user modifies the C block depends upon how it was originally designed in the CAD application system such as SolidEdge by Siemens Product Lifecycle Management Software Inc. Commonly an original designer creates and or designs a part that is later modified by a modify designer who maybe completely unfamiliar to the original designer. For example if the original designer i.e. the person that originally designed the C block had the design method intent to constrain the faces related to the bottom leg and the top leg as coplanar then the modification action illustrated in is easy to accomplish using known parametric history based modeling techniques that are basic to one skilled in the art of 3D model design but for simple explanation because the two faces are constrained to be coplanar moving one face will cause the other face to move as well. If on the other hand the modify designer intends to move only the face associated with the bottom leg while leaving the top leg alone e.g. then several additional steps must transpire to remove the coplanar constraint requiring several additional steps that begins with understanding how the two legs of the C block were created if the modify designer was not the original designer. Furthermore if the original designer of the C block did not model the bottom leg and the top leg to be coplanar but modeled the legs by some other method such as a distance or a formula then to modify both as seen in would increase the difficulty to a point where the modify designer may as well model the C block from scratch.

On the other hand modifying the C block in a history less or the body based approach taken by companies like CoCreate IronCAD and Kubotek for example fails to maintain the history tree made popular by the parametric modeling paradigm. In the history less approach changes are made explicitly for each item on a solid model. If the original designer of the C block intended that the faces on the bottom leg and the top leg maintain a coplanar relationship later modifications require the manual selection of the faces for edit to ensure the desired result which is difficult if the original designer s intent is unknown or unascertainable. For example the modify designer can make either change illustrated in or FIG. simply be selecting the one face or individually select all of the other coplanar faces which happens to be a small number in this example but could be in the hundreds in a complex assembly model. Alternatively some software applications could allow the modify designer to make faces coplanar and permanently capture the design intent after the fact at time of edit but this can also be cumbersome particularly with very large models. This later alteration would make the modification see in difficult at a later date particularly since now the design intent may be baked into the model contrary to design intent.

The issue with the history based approach is that design intent is incorporated and fixed at the time of model creation which can complicate making changes later on that were not anticipated at the time of model creation. In contrast the history less systems are flexible about change at a later date but capture very little intelligence about how things are related. If modify designers determine to manually capture such intelligence at a later point in time then like history based systems that intelligence is incorporated and fixed thereby limiting further flexibility.

That said in the geometry modeling systems geometry selection techniques involve setting options prior to selecting the geometry i.e. the designers have to plan ahead to prepare for what they want to select. Planning ahead entails recommended preparatory actions and in many cases recommended error recovery when the selection does not satisfy the modification at hand. These recommended actions prove to overly labor intensive for history less systems. In history less system commands selection options used to perform a modification are likely to change between command sessions as well as within the command session. For example with a move face command the designer may move a boss a rib and a face connecting the boss and the rib in one command session. In another command session the designer may move a single face or simply a slot. There is a technical challenge to identify under what conditions faces exist on a model that can serve to bound the merged rib where the merged rib is a rib that has a face that is flush with a non rib face. It is known that a rib is a collection of faces that form a convex shape and a merged rib has the additional property that a rib face must be subdivided to isolate it from the remaining faces of the model. For example if the modify designer intends to modify the merged rib and intends to only select the merged rib face the modify designer may have accidentally selected an entire face of the C block indicated at .

The inventors have advantageously recognized a need for a system and method for splitting faces for modification particularly those of the merged rib in a solid model.

To address the identified need and related problems a system provides a system for selecting modifications to a solid model that is manipulated in a computer having software instructions comprising a computer system wherein the computer system includes a memory a processor a user input device and a display device a computer generated geometric model stored in the memory in the memory of the computer system and wherein the computer system selects a selecting point on a modification feature directly on a solid model using a computer peripheral input sorts by distance a plurality of adjacent faces that are adjacent to a selection face determined by the selecting point determines whether a convex condition exists wherein the plurality of adjacent faces are convex to the selection face determines whether a candidate curves exists where the plurality of adjacent faces share a same surface with a previously visited face and the convex condition exists imprints the candidate curve on the solid model to prepare the solid model for modification according to a modification intent from a user modifies the solid model according to the modification intent that results in a modified solid model and modified visual display information and displays the modified solid model using the modified visual display information to the user.

Other features of the system are set forth in part in the description and in the drawings that follow and in part are learned by practice of the system. The system will now be described with reference made to the following Figures that form a part hereof. It is understood that other embodiments may be utilized and changes may be made without departing from the scope of the system.

A method and system for modifying geometric relationships in a solid model are described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the system. It will be apparent however to one skilled in the art that the system may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the system.

Once the solid model is determined to be in a suitable form comporting to the original design requirements it is preferably tested using a computer aided engineering CAE application such as NX CAE or FEMAP offered by Siemens Product Lifecycle Management Software Inc by a CAE user for part fault tolerance tests and a variety of other engineering tests. If the CAE user determines that the solid model has to be modified to successfully pass the fault tolerance tests the solid model is returned to the CAD user for modification in the CAD application . This iteration between the CAD application and the CAE application and the respective users is recursive until the solid model successfully passes necessary design requirements and engineering test.

Following successful completion the solid model in its final design form is further designed for physical manufacture in a computer aided manufacturing CAM application such as NX CAM or CAM Express both offered by Siemens Product Lifecycle Management Software Inc. By using the CAM application a CAM user will model how numerical control programs molds tools and dies manufacture a physical product . The CAM user may have additional modifications to comport to the original design requirements for example using electro discharge machining EDM may require different techniques depending if a wire cut EDM or die sinking EDM is used to manufacture the physical product . To virtually mill a part the CAM application defines the preferably electrode path of the orbit for the EDM process. The CAM user may determine that in order to comport to design and engineering requirements the solid model requires a subtle modification in dimensions for example following a cool down to allow for hardening of the material comprising the physical product .

Following the successful virtual designing engineering and manufacturing of the product a manufacturer can link all manufacturing disciplines with product engineering related to the product including process layout and design process simulation engineering and production management utilizing a digital factory application such as Tecnomatix offered by Siemens Product Lifecycle Management Software Inc. The manufacturer may find the need to modify the physical product because the CAM users modeled the product with for example an EDM system that is outdated and requires the manufacturer to use a 5 axis turning machine to create the necessary blank or the manufacturer has shifted to injection molding rather than compression molding to form the parts that comprise the physical product . For example the solid model has to be modified to comport to the final requirements to manufacture the physical product .

Throughout the virtual product development described above the product design flowed for example from the customer request to the CAD user to the CAE user to the CAD user back to the CAE user to the CAM user and then to the Manufacturer for physical production of the physical product . With each edit to the solid model geometric relationships are also modified so as to comport to the necessary design changes by the CAD user the CAE user the CAM user and the Manufacturer for example. Further as each of the CAD CAE CAM users modify the solid model a data model that defines the solid model is also modified to properly account for the changes discussed above and properly stored in the solid model data files . The manufacturer then proceeds to produce the physical product according to the original design specifications and subsequent engineering modifications. The virtual product development occurs in a system where the system and method for modifying geometric relationships in a solid model is executable in a variety of software applications resident in memory on a variety of hardware systems described in more detail below.

Turning now to a hardware system is a block diagram of a computer system in which the system may be practiced. and the following discussion are intended to provide a brief general description of a suitable hardware system and computing environment in which the embodiment may be implemented. The embodiment may be performed in any of a variety of known computing environments.

Referring to an exemplary computer system includes a computing device in the form of a computer such as a desktop or laptop computer which includes a plurality of related peripheral devices not depicted . The computer includes a central processing unit CPU and a bus employed to connect and enable communication between the central processing unit and a plurality of components of the computer in accordance with known techniques. The operation of the CPU is well understood in the art that is preferably an electric circuit that can execute computer programs having computer executable instructions encoded thereon such as program modules which are executed by the computer . Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implementation particular data types. Preferably the program modules include a file processing module a data display module a logic processing module and a method processing module . The logic processing module sends requests to the file processing module the data display module and the method processing module to operate according to the computer executable instructions. Likewise the logic processing module receives requests from the file processing module the data display module and the method processing module to operate according to the computer executable instructions. The bus also enables communication among the various program modules and the plurality of components. The bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The computer typically includes a user interface adapter which connects the central processing unit via the bus to one or more interface devices such as a keyboard mouse and or other interface devices which can be any user interface device such as a touch sensitive screen digitized pen entry pad etc. The bus also connects a display device such as an LCD screen or monitor to the central processing unit via a display adapter . The bus also connects the central processing unit to a memory which can include ROM RAM etc.

The computer further includes a drive interface that couples at least one storage device and or at least one optical drive to the bus. The storage device can include a hard disk drive not shown for reading and writing to a disk a magnetic disk drive not shown for reading from or writing to a removable magnetic disk drive. Likewise the optical drive can include an optical disk drive not shown for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The aforementioned drives and associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the computer that is accessible by the file processing module according to instructions received by the logic processing module in the method described by instructions provided by the method processing module .

The computer can communicate via a communications channel with other computers or networks of computers. The computer may be associated with such other computers in a local area network LAN or a wide area network WAN or it can be a client in a client server arrangement with another computer etc. Furthermore the embodiment may also be practiced in distributed computing environments where task instructions provided by the logic processing module in the method described by instructions provided by the method processing module and are performed by remote processing devices that are linked through a communications network. In a distributed computing environment the program modules may be located in both local and remote memory storage devices. All of these configurations as well as the appropriate communications hardware and software are known in the art.

Turning now to the program modules in more detail illustrate a general concept of a software programming code embodied in a software application. Referring further to the program modules will be described in more detail below in the context of the embodiment where a software application contains accessible program modules as those discussed above. The software application may be in the form of a solid modeling application such as the aforementioned CAD application the CAE application or CAM application . Further it is contemplated that the software application is provided by a third party vendor with particular API application programming interface call features for access and utilization. Continuing as the user interacts with the software application certain modification events trigger interaction with a variational modeling toolkit to be discussed in greater detail below. The software application and the variational modeling toolkit together or individually utilize the logic processing module in the method described by instructions provided by the method processing module to call a low level geometric modeling kernel to accomplish the certain modification events of the solid model according to the commands selected by the user and executed by the software application as generally understood in the art of solid modeling but also discussed in more detail below. The low level geometric modeling kernel is commonly a collection of at least a three dimensional 3D geometric modeler like Parasolid licensed by Siemens Product Lifecycle Management Software Inc and a collection of geometric software component libraries like the 3D DCM or DCM product offered by Siemens Product Lifecycle Management Software Inc.

Put another way referring to the variational modeling toolkit operates on variational edit commands communicated from the software application . Additionally the software application communicates non variational modeling calls to the 3D geometric modeler and the 3D geometric modeler utilizes the collection of geometric software component libraries as normally understood in the art of geometric modelers. With regard to the variational modeling toolkit and to be discussed in greater detail below several operations occur related to the variational edit that involve find edit solve and apply. It is commonly understood in the art of solid modeling that the collection of geometric software component libraries above provides modeling functionality such as geometric constraint solving variational design parametric design motion simulation collision detection clearance computations topology location topology move solution and hidden line removal for example. It is also contemplated to be within the scope of this embodiment that the 3D geometric modeler and the component libraries are components of the same application rather than separate components or combinations thereof. Having described the computer program product more detail is now provided with regard to a splitting system.

Turning now to the face splitting system is a box diagram of a general view of a method employed by the embodiment. Referring to the embodiment discloses the logic processing module using the method described by instructions provided by the method processing module where the described method is a method for splitting faces in a solid model that is manipulated in a computer having software instructions for design generally depicted at . The following steps are mentioned to provide an overview of the embodiment described in the system having details that are subsequently discussed. The system selects a selecting point on a modification feature directly on a solid model using a computer peripheral input Step . The system sorts by distance a plurality of adjacent faces that are adjacent to a selection face determined by the selecting point Step . The system determines whether a convex condition exists wherein the plurality of adjacent faces are convex to the selection face Step . The system determines whether a candidate curves exists where the plurality of adjacent faces share a same surface with a previously visited face and the convex condition exists Step . The system imprints the candidate curve on the solid model to prepare the solid model for modification according to a modification intent from a user Step . The system modifies the solid model according to the modification intent that results in a modified solid model and modified visual display information Step . The system displays the modified solid model using the modified visual display information to the user Step .

Turning now to the face splitting system in greater detail the system includes a face splitting method that employs multiple passes through a recursive procedure which has as input a single face and a selection point. A set C is maintained to store parametric data of all new edges added to the model following the selection of the merged rib. The method also maintains a set of faces that are excluded from processing F e where the list is initially empty. The current state of the solid model is saved in S. The method receives the designer s input in the form of a single face and the selection point. The adjacent faces to the single face are obtained and sorted by distance. The sorted and obtained adjacent faces are examined in a recursive manner to determine rib qualification and potential to limit the rib by splitting. For rib qualification the adjacent face must be convex with respect to the inputted single face. For potential limit to the rib two determinations are made. First if the adjacent face shares the same underlying surface as a previously visited face and second if any two of the faces has a peripheral loop that borders on a face previously identified as a rib the method attempts to split the face. Further if an edge is added the recursion is halted and another pass is made using the initial inputs where these faces are excluded from any further processing. This second determination effectively reduces the scope of the faces visited on all subsequent passes for example the same face may be split more than once thus multiple passes are possible. The parameters for all created edges are saved in the set C. On exhausting the set of adjacent faces the faces that satisfy the rib qualification supra are visited recursively until there are no more faces to visit. Now the parametric data of those edges that do not bound the inputted single face are discarded from the set C. The solid model is returned to the saved state S and the edges saved in the set C are imprinted into the solid model.

The embodiment may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations thereof. An apparatus of the embodiment may be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor and method steps of the embodiment may be performed by a programmable processor executing a program of instructions to perform functions of the embodiment by operating on input data and generating output.

The embodiment may advantageously be implemented in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. The application program may be implemented in a high level procedural or object oriented programming language or in assembly or machine language if desired and in any case the language may be a compiled or interpreted language.

Generally a processor will receive instructions and data from a read only memory and or a random access memory. Storage devices suitable for tangibly embodying computer program instructions and data include numerous forms of nonvolatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM disks. Any of the foregoing may be supplemented by or incorporated in specially designed ASICs application2 specific integrated circuits .

A number of embodiments have been described. It will be understood that various modifications may be made without departing from the spirit and scope of the embodiment. It is anticipated that the disclosed active selection system will work as well with conditions such as coplanar coaxial etc. as it does with features. Therefore other implementations are within the scope of the following claims.

