---

title: Method and system for configuration management database software license compliance
abstract: A software license engine allows an enterprise to model software license contracts and evaluate deployment of software for compliance with the software license contracts. Deployment of software products in the enterprise is modeled in a configuration management database. The software license engine maintains a license database for connecting software license contracts with software deployment modeled by the configuration management database. Users of the software license engine may use license types that are predefined in the software license engine or may define custom license types. The software license engine may indicate compliance or non-compliance with the software license contracts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08646093&OS=08646093&RS=08646093
owner: BMC Software, Inc.
number: 08646093
owner_city: Houston
owner_country: US
publication_date: 20091209
---
This application claims priority to U.S. Provisional Application Ser. No. 61 165 505 entitled A Method and System for Configuration Management Database Software License Compliance filed Mar. 31 2009 and which is incorporated by reference in its entirety herein.

This disclosure relates generally to the field of ITIL based Information Technology Infrastructure Library Configuration Management Databases CMDBs . ITIL is a registered trademark of The Lords Commissioners of Her Majesty s Treasury acting through The Office of Government Commerce and Central Computer and Telecommunications Agency United Kingdom. ITIL based CMDBs are emerging as a prominent technology for Enterprise Management Software.

The usefulness of these CMDBs is dependent on the quality reliability and security of the data stored in them. A CMDB often contains data about managed resources known as Configuration Items CIs . ITIL version 3 defines a CI as Any Component that needs to be managed in order to deliver an IT Service. Information about each CI is recorded in a Configuration Record within the Configuration Management System and is maintained throughout its Lifecycle by Configuration Management. CIs are under the control of Change Management. CIs typically include IT Services hardware software buildings people and formal documentation such as Process documentation and Service Level Agreements . The CMDB serves as a point of integration between various IT management processes. Data from multiple sources often needs to be managed directly or by reference in commercial CMDBs.

One kind of CI that may be managed in a CMDB is a software asset. Organizations can acquire software in different manners. Software can be built for a specific purpose within the company. Software can be purchased from a software vendor or outsourcer. Software can be acquired through an acquisition or merger between companies or between departments within a single company. Software asset management is a core component of an overall asset management policy. IT Infrastructure Library ITIL in the Software Asset Management Book defines software asset management as all of the infrastructure and processes necessary for the effective management control and protection of the software assets within an organization throughout all stages of their lifecycle. ITIL indicates that the following processes make up the holistic approach to software asset management 

Overall management processes The management processes surrounding the other software assets management processes. The overall management processes are related to change management.

Core asset management processes Identification of software assets including maintaining this information in the configuration management database CMDB .

Logistic processes Control of the software asset lifecycle. These processes include procurement deployment and end of life.

Verification and compliance processes Verification and compliance of software asset management policies and procedures.

Conventional CMDBs however do not provide adequate capability for that an enterprise is in compliance with the terms of its software license contracts.

In one embodiment a method is disclosed. The method comprises storing a first model of deployment of a software product in a configuration management database CMDB storing a second model of a software license contract for the software product in a license database and evaluating compliance of the software license contract. Evaluating compliance comprises connecting the first model and the second model comparing the first model and the second model and generating an exception indication if the act of comparing the first model and the second model indicates non compliance with the software license contract.

In another embodiment a system is disclosed. The system comprises a server computer which comprises a processor a configuration database coupled to the processor a license database coupled to the processor and a program store coupled to the processor on which is stored instructions for the processor wherein the instructions cause the processor to perform the method disclosed above.

In yet another embodiment a computer readable medium is disclosed. The computer readable medium stores instructions for a programmable control device that cause the programmable control device to perform the method disclosed above.

In yet another embodiment a networked computer system is disclosed. The networked computer system comprises a plurality of computers on which software products are deployed and one or more configuration management database computers communicatively coupled to the plurality of computers programmed to perform the method disclosed above.

Various embodiments disclosed herein provide the ability to use a CMDB to monitor and verify software license compliance in an enterprise. Using a variety of rules related to different license types a license engine may associate license certificates with software contracts and evaluate compliance with some of the terms of those contracts. When a non compliance event is discovered the enterprise may take appropriate action to bring the software assets represented by the CIs in the CMDB into compliance with the license contracts under which the software was acquired.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without these specific details. In other instances structure and devices are shown in block diagram form in order to avoid obscuring the invention. References to numbers without subscripts are understood to reference all instance of subscripts corresponding to the referenced number. Moreover the language used in this disclosure has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter. Reference in the specification to one embodiment or to an embodiment means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment of the invention and multiple references to one embodiment or an embodiment should not be understood as necessarily all referring to the same embodiment.

The CMDB server also comprises a license engine for performing the functionality described in more detail below related to software license compliance. The CMDB server may include other software components for providing CMDB functionality as desired.

Data for the CMDB server is illustrated as stored in a CMDB datastore and a license datastore . The CMDB datastore comprises the storage for the conventional CMDB data including CIs. Although shown as a single unit in the CMDB datastore may be implemented as a plurality of storage units as desired. The techniques for storing the data in the CMDB datastore are outside the scope of the present invention. The license datastore is illustrated as a separate datastore for clarity but may be integrated with the CMDB datastore . The license datastore provides storage for to model software contracts including rules against which the CIs are evaluated for software license compliance and other information necessary for processing those rules. The CMDB datastore and the license datastore may be implemented as a collection of flat files a structured query language database or in any other way desired.

Referring now to an example computer for providing the CMDB server is shown. Example CMDB server computer comprises a system unit which may be optionally connected to an input device or system e.g. keyboard mouse touch screen etc. and display . A program storage device PSD sometimes referred to as a hard disc is included with the system unit . Also included with system unit is a network interface for communication via a network with other computing and corporate infrastructure devices not shown . Network interface may be included within system unit or be external to system unit . In either case system unit will be communicatively coupled to network interface . Program storage device represents any form of non volatile storage including but not limited to all forms of optical and magnetic storage elements including solid state storage including removable media and may be included within system unit or be external to system unit . Program storage device may be used for storage of software to control system unit data for use by the credential store system or both.

System unit may be programmed to perform methods in accordance with this disclosure examples of which are in . System unit comprises a processor unit PU input output I O interface and memory . Processing unit may include any programmable controller device including for example one or more members of the Intel Core Pentium and Celeron processor families from the Intel and the Cortex and ARM processor families from ARM. INTEL CORE PENTIUM and CELERON are registered trademarks of the Intel Corporation. CORTEX is a registered trademark of the ARM Limited Corporation. ARM is a registered trademark of the ARM Limited Company. Memory may include one or more memory modules and comprise random access memory RAM read only memory ROM programmable read only memory PROM programmable read write memory and solid state memory. One of ordinary skill in the art will also recognize that PU may also include some internal memory including for example cache memory.

Similar computer systems may be used as clients for accessing the CMDB server such as the web client and the application client of .

Some of the information listed in Table 1 above may be optional and omitted as desired when entering information about a software contract into the CMDB datastore .

After the information about each software contract deployed is entered into the CMDB datastore in one embodiment in block a new license type may be created if needed. Block is shown in dashed lines indicating that this block may omitted if all necessary license types have already been created or in embodiments which do not provide for creation of custom license types.

License types may be used for software license management. In one embodiment a license type wizard allows administrators with appropriate permissions to create custom license types for license certificates. After the license type wizard has been completed and the license type has been saved the license types are used when a contract manager or software asset manager creates certificates in block as described below.

When the license engine runs company and product information and answers to correlation rules questions supplied when the certificate was created are used to determine which CIs should be connected to the license certificates. Compliance is also calculated based on the answers to questions supplied and the configured compliance actions that act on these values. In one embodiment a default behavior for connection compares the company information and product categorization in license certificates with CIs to determine which CIs to connect to a license certificate. In one embodiment a default behavior for compliance queries license certificates that match a license type and tests the result of the query against compliance criteria.

 1 What questions a contract manager or software asset manager must answer when adding a new software license certificate.

 3 How compliance is computed based on compliance questions and actions specified during license type creation such as relating CIs to a license certificate or creating exceptions.

In one embodiment the CMDB server provides a default set of pre defined license types as illustrated in Table 2 below. These license types are illustrative and by way of example only and other license types may be provided as pre defined license types.

After any new license types are created to handle the terms of the new software contracts terms license certificates may be created in block to link software contracts to CIs. A license certificate indicates the right to deploy software in the environment managed by the CMDB server . In one embodiment a license certificate comprises the information listed in Table 3 below. The information disclosed in Table 3 below is illustrative and by way of example only and other license certificate information may be used.

In some embodiments one contract may have multiple certificates and software compliance may be tracked at the software level.

In one embodiment the license engine may ask for additional information when creating the license certificates. This information may comprise connection details to allow the license engine to connect the license certificate to CIs. The information may also include compliance information. For example the license engine when creating a per copy license certificate may ask how many licenses were purchased. For a site license the license engine may ask the identity of the location for which the license was purchased. For a per copy per device license the license engine may ask how many licenses were purchased and how many copies per device are allowed under each license. Other questions may be asked depending typically on the license type. The additional information supplied in response to those questions may be included in the license certificate as it is stored in the license datastore .

In one embodiment script based rules may be created for additional custom license types to represent complex license entitlements allowing a user of the license engine to add and configure new license types without changes to the code of the license engine . For example a license type may be created with rules for an application that executes in a virtual machine where the rules are based on the number of physical processors on the physical machine. Because of the relationships available from the CMDB datastore the license model for this license type may navigate back to the physical hardware to understand the number of processors when checking compliance.

In one embodiment license certificates may be grouped into certificate groups. Certificate groups consolidate the tracking of license certificates. A master certificate is grouped with individual child license certificates. The CIs may be attached to the master certificates. License allocation numbers are attached to the child license certificates. For example under the same software contract 200 licenses for Microsoft Word are purchased. Later 100 more licenses are purchased. Two CIs are created in the CMDB one for each license purchase. In this example it does not matter which CI is attached to a specific license certificate. For compliance it only matters that the licensee does not exceed 300 Microsoft Word instances for the contract. By grouping license certificates and attaching the CIs to a master certificate for the group the licensee may gain flexibility in how the license certificates are applied. On the master certificate in one embodiment the sequence to which license certificates are allocated to matching CIs may be specified. When the first license in the sequence is fully used the License Engine may apply CIs to the next license certificate. As a result one or more of the last certificates in the sequence may be out of compliance while earlier certificates may be in compliance.

Certificate groups may also help avoid unnecessary warnings in some embodiments. Consider the preceding Microsoft Word license example. In one embodiment the license engine may provide warning indications when a license certificate is nearly completely applied. If the license certificates are not grouped in such an embodiment for example the license engine may generate a warning when 190 CIs are attached to the first license certificate. Although there is another license certificate that is valid for 100 instances the first certificate would be approaching the maximum usage. If however the certificates are grouped for compliance checks that is equivalent to having one certificate for 300 instances and a warning may be generated only when the last certificate in the sequence approaches being completely allocated.

When a certificate expires the license engine may check for compliance in one embodiment. If there are enough licenses remaining in the group in other certificates the license engine may not generate a warning or non compliance indication. If a license certificate is not part of a group when it expires all the related CIs are out of compliance.

Returning to after the license certificates are created then in block the license engine is run. The license engine evaluates the status of the software licenses modeled in the CMDB against the license certificates created in block .

Then in block correlation rules may be evaluated to connect each of the identified CIs to license certificates. In block if any CIs are not connected to license certificates by the correlation rules or if the license engine determines that multiple license certificates would match to a CI then in block any desired exception processing may be performed.

In block compliance rules may be evaluated to determine whether each of the software CIs complies with the terms of the software contract. In block if any CI is not in compliance then any desired exception processing may be performed.

Exception processing as performed in blocks and in one embodiment may be simply producing an error message or report indicating the exception. The exception may indicate a non compliance condition. In one embodiment additional exceptions may be triggered when a software license contract is in compliance but is within a window of near non compliance such as when nearly all of the purchased licenses have been deployed. Such warning indications may allow preventative measures to be taken before a non compliance condition exists.

In other embodiments more sophisticated exception processing may be performed. For example in one embodiment a noncompliance exception indicating that more instances of a particular software are deployed than are licensed may automatically trigger a request to purchase sufficient additional license to bring the enterprise back into compliance. In another embodiment the same situation may trigger an analysis to attempt to determine which if any of the existing instances of the software may exceed the need of the enterprise need for the software and in a further embodiment may trigger the removal of a software package from one or more computer systems .

In one embodiment a compliance exception may be generated at multiple levels. The multiple levels may be defined as desired by the person creating the compliance rules but typically relate to how much the particular CI is out of compliance. For example if a software contract acquires 100 licenses for a particular software package and the license engine discovers that 101 licenses are in use a compliance rule may trigger a Breach Level exception but if the license engine discovered that 110 licenses are in use a Breach Level exception may be signaled. In one embodiment up to three levels of non compliance exceptions may be signaled by the license engine .

In one embodiment compliance results may be rolled up to consolidate compliance reporting at higher levels than a single contract. For example in such an embodiment compliance results may be reported for the entire organization or for a particular software product or vendor.

Example in illustrates a per copy license contract in which two licenses were purchased for company . Only two instances and of the licensed software are installed on two computers and but the instance is associated with two users and . Thus three users of the two installations are found by the license engine and an exception may be indicated that the contract is out of compliance. In this scenario either user or may be removed to achieve compliance.

In example is a graph illustrating a scenario where a site license was purchased in contract but the license engine discovers that one additional instance of the licensed software was installed as package on computer for user by user at site . The package is not therefore at a site defined by the contract . Thus the license engine generates a non compliance exception. To bring the company back into compliance either the package may be removed or a license acquired for the user at site .

As described above various embodiments allow contract or asset management personnel of an enterprise to evaluate software usage of their organization and determine whether the organization complies with software license contracts that are modeled in a CMDB. Where the organization is not in compliance the license engine identifies the non compliance and provides information that may allow the contract or asset manager to address the problems and bring the organization into compliance.

Because the license engine is integrated with the CMDB server and CMDB datastore the various embodiments may allow for immediate and automatic feedback on the effect on software compliance of changes to the infrastructure modeled by the CMDB in addition to on demand runs of the license engine .

It is to be understood that the above description is intended to be illustrative and not restrictive. For example the above described embodiments may be used in combination with each other. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention therefore should be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. 

