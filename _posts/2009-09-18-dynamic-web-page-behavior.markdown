---

title: Dynamic web page behavior
abstract: In some embodiments, code can be encapsulated in an external behavior component for affecting the behavior of an element inserted into an HTML document. A reference can be attached to the element in the document to associate the element with the external behavior component. A renderer can parse the element in the HTML document and access the external component to modify a behavior of a page image. For example, the properties or location of a displayed element associated with the external behavior component may be changed on an event, the external behavior component can control user data input, or the external behavior component can draw on the page image. Multiple documents can reuse external behavior components, and an element can be associated with multiple external behavior components. The associations between elements and external behavior components may be maintained in cascading style sheets, inline with the elements, and in various formats.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225196&OS=08225196&RS=08225196
owner: Microsoft Corporation
number: 08225196
owner_city: Redmond
owner_country: US
publication_date: 20090918
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 09 316 897 issued as U.S. Pat. No. 7 594 166 entitled Dynamic Web Page Behaviors filed on May 20 1999 the disclosure of which is incorporated herein by reference in its entirety.

Browsers display web pages by interpreting Hypertext Markup Language HTML which includes sets of tags nested within other sets of tags around content to render. To assist the authors and designers in creating such web pages a recent development is the use of cascading style sheets via which the author or designer may globally specify styles for selected page elements including appearance information such as color and point sized of text page margins and leading spacing between lines . A style sheet is essentially a template that controls the formatting of HTML tags on a page and can be linked to a page or embedded in a page. Style sheets separate the formatting information from the actual content on HTML pages whereby it has become easier for authors and designers to design and revise pages.

An improvement to how a web page may be made to appear to a viewer is Dynamic HTML DHTML which enhances the appearance of a page s elements by adding effects thereto.

Dynamic HTML DHTML also allows an HTML document to become interactive which is accomplished by allowing HTML elements or tags within the HTML document to be programmable such that script can change the content and attributes of the HTML page. For example a script on the page may allow a list to be expanded or collapsed in response to a mouse click without needing to retrieve a different HTML document from the server. The script resides on the same page as the other elements even when the script is obtained from a separate file since that script is particular to the page and is essentially imported into the page when the HTML document is loaded.

In essence three job disciplines are involved in creating a DHTML page i.e. a content provider designer and engineer. The content provider is the author of the content of the document while the designer decides on the look and feel of the document and typically adds any formatting information. The engineer adds the dynamic functionality using script. In many situations these jobs are not performed by one highly skilled person but by three separate individuals of different skill levels as many authors and designers are uncomfortable with programming. This along with the fact that the script resides on the same page as the other elements makes DHTML expensive and fragile to use in web documents. More particularly as the engineer applies one or more scripts to every page the process becomes expensive and error prone as subsequent content changes by the author or designer may affect the script. At the same time the engineer may affect the layout or content of the document when adding the script to the page. Even for those authors and designers who are comfortable with programming concepts and with using script to add dynamic functionality to a document having the script and content in the same file makes the page creation and maintenance processes relatively slow and difficult to manage.

One or more embodiments can add script like behavior to an element via a component that is external to the page. An external behavior is created for affecting the behavior of elements inserted into an HTML document by encapsulating code in an external behavior component such as a COM component object model object. A designer or the like adds simple tags to the document to associate the external behavior component with selected elements thereby separating script from content. These associations between elements and external behavior components may be maintained in cascading style sheets inline with the elements and in various formats.

In some embodiments when the document is provided to a renderer and the renderer parses the element in the document the renderer can access the associated external component to modify a behavior of the page image. For example the properties or location of a displayed element associated with the external behavior component may be changed on an event such as a mouseover event. An external behavior component can provide mask behavior to control the format and type of user data input. Another external behavior component can draw on the image when accessed by the renderer.

Multiple documents can reuse external behavior components enabling for example an entire web site to share a common behavior. An element can be associated with multiple external behavior components to provide multiple effects such as changing color and expanding a list when clicked by a user.

With reference to an example system for implementing one or more embodiments includes a general purpose computing device in the form of a conventional personal computer or the like including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM .

The personal computer may further include a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the example environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the example operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system for example Windows NT one or more application programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks Intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples only and other means of establishing a communications link between the computers may be used.

DHTML behaviors e.g. can be components that encapsulate specific functionality or behavior on a page but are external to the page. DHTML behavior components can be COM objects although behavior components may be implemented using script and HTML. The interfaces for DHTML behavior components are few simple and robust as described below.

In general an HTML document or page may be considered a document tree in that elements are contained by other elements in a hierarchical manner. As shown in an exemplary HTML document tree shows elements as nodes of the tree and a behavior attached to one of the elements . Indeed a renderer browser logically constructs such a tree when provided with a page e.g. of whereby attributes and the like may be applied appropriately to elements as events are received i.e. the events bubble up through the tree as described below.

When applied to a standard HTML element on a page a behavior component can enhance that element s default behavior. For example a behavior component can be written to toggle the display property of an element s children on a mouse click. When such a behavior component is applied to a standard element on a page the behavior component enhances the unordered list s default behavior to expand and collapse when clicked. Another behavior component e.g. of can incrementally set the position of an element from a start point to an end point on the screen whereby if such a behavior component is applied to an image element the otherwise statically positioned image flies across the screen.

In accordance with one or more embodiments and as represented in behavior components are external components with respect to the pages and thus separate script from content. As a result improved manageability of pages is provided. Moreover because the behavior components are encapsulated components the code of a behavior component may be reused across multiple pages. For example as represented in the page includes elements that reference and when parsed by an HTML renderer use two external behavior components and while the page has elements that also use another instance of the behavior component along with the external behavior component . The renderer outputs and or modifies an outputted image based on the attached behaviors. One example of a renderer which may be utilized according to one or more embodiments is Microsoft Corporation s Internet Explorer 5.0 rendering engine mshtml.dll which in addition to being able to handle behavior components provides data manipulation formatting and content changes without dependency on a Web server. With such an engine enhanced programmatic access and control is provided the location of objects and images can be precisely specified and HTML tags style sheets text tables and ActiveX objects can be handled without requiring interaction with a Web server.

To use a behavior component e.g. of in accordance with one or more embodiments an engineer or the like can first develop the behavior component using script or a language such as C to develop a binary file. More particularly DHTML behavior components can be written in script using script component technology to provide a safe extensibility mechanism for those that are familiar with script and the Dynamic HTML Object Model. A utility or the like converts the script to a COM object. Behavior components created in C use an OBJECT tag syntax described below to instantiate and may be directed to a specific platform for example to access Win32 Application Programming Interfaces APIs and the interfaces for implementing DHTML behavior components. Note that a number of default behaviors may be developed and for example provided with a browser whether the browser is a stand alone application or integrated with an operating system e.g. Internet Explorer.

In accordance with one or more embodiments once developed a page designer or the like may then use the declarative HTML tag syntax that is already familiar to the designer in order to refer to the behavior component. To this end the designer can include a behavior attribute essentially a reference to the behavior component such as in an embedded style in the cascading style sheet block and also attaches a tag to each element that implements that behavior component. In other words using existing cascading style sheet support in the renderer a behavior can be added to an element.

This syntax can be used in any standard style declaration for example in an Inline style declaration on an element as described below. For example to add a fly move across the screen behavior to a DIV element a designer enters 

As also described below a class can also be declared to apply to elements in the document. For example a flyme class may be defined and can be applied to a DIV element 

The renderer handles the association between the tag and the behavior component along with the instantiation of the behavior component and the interfacing thereto whereby script is no longer needed on the page. The result is dynamic HTML via a substantially cleaner script free page.

By way of example as shown in the behavior component is maintained in a file called hilite.htc where HTC stands for HTML Component and is referenced by the behavior tag in the cascading style sheet block of the page as indicated by the tags . This behavior component shown for purposes of clarity in as having human readable script therein affects the way text appears when the mouse is over that text i.e. provides mouseover highlights. In other words this behavior when applied to an LI list item element in the body of the page extends the list item s default behavior to change its color when the user moves the mouse over it and then restore its original color when the mouse is moved off of the item.

As can be readily appreciated the behavior component used in to implement the mouseover highlight effect was implemented as an HTC and involves just a few lines of code. As shown above and in the code mainly comprises script with a number of elements used to define the behavior. Note that the use of the ATTACH element allows an HTC to listen in on events fired on the element on the page and to handle the events appropriately as generally described below. This provides a means to encapsulate event handling code that would otherwise be put on the page.

Although HTC provides a quick and easy way to create DHTML behaviors using scripting languages such as Microsoft Visual Basic Scripting Edition VBScript and Microsoft JScript compatible with ECMA 262 language specification like other components used on the Internet today behaviors can be alternatively implemented using Windows Scripting Components WSC or C . Note that when using the behavior attribute the type of behavior i.e. a behavior implemented as a binary component using C or any compiled code a default behavior built into the renderer or as a component written in script either as an HTML Component or as a scriptlet determines the syntax used to apply the behavior to an element using cascading style sheets. In the case of a Component Script and HTML implementation the STYLE can specify a URL for the script that implements the component. In the case of a binary implementation of the component the url in the style can refer to the ID of an OBJECT tag that declares a binary component to supply a factory for the component.

When different instances of a behavior component are attached a style subject of the element can be used as set forth in the following example 

Another way in which cascading style sheets may be used to implement a behavior on an element is by defining an embedded style using a class name as a selector. Note that the selector begins with a period . which is the syntax for class names as selectors. This can cause each element assigned the class name of HILITE to behave as defined in hilite.htc. An example using a class name is shown below 

As shown in because the behavior is an instance of a separate file the behavior component may be reused across multiple pages to achieve a similar effect throughout an entire web site. Moreover note that instead of referencing the behavior in cascading style sheet block as in the preceding example like other cascading style sheet attributes the behavior may be applied as an inline style to the LI element as shown in the following example 

In general the designer typically specifies the behavior attribute based on how many elements are to have the behavior applied. For example defining the behavior inline or through script is appropriate for applying the behavior to a select number of elements while defining an embedded style is appropriate for applying the behavior to a set of elements globally.

Another way in which a behavior may be applied to an element is via scripting using the addBehavior method. The addBehavior method is a dynamic way of applying a behavior to an element. When the method is called the behavior can be appended to a list of behaviors being applied to the element as opposed to overwriting the behavior that might have already been attached to that element at the time the method was called . Once attached the behavior can be detached anytime using the removeBehavior method. The following example demonstrates how a behavior that implements a mouseover highlighting effect could be dynamically attached to each of the LI elements on a page using addBehavior. Subsequently the behavior may be detached using removeBehavior in a similar manner.

Note that a behavior attached to an element through cascading style sheets using a style rule defined in the document can be automatically detached from the element as soon as the element is removed from the document tree. Once the element is removed all associations of that element to any element in the document tree such as style sheet rules that specify behaviors can be stripped from the element as well. Conversely a behavior attached to an element through an inline style or through the addBehavior method is not automatically detached from the element when the element is removed from the document hierarchy. These two methods of applying behaviors have no dependencies on the containing document and therefore the behavior remains applied to the element even as it is removed from the document tree. The removeBehavior method can be invoked to explicitly detach this type of behavior from the element.

Multiple behaviors can be applied to an element for example by specifying a space delimited list of URLs for the behavior attribute as shown in the following code. This particular sample demonstrates how two behaviors can be applied to an element to achieve a combination of effects 

When applying multiple behaviors to an element conflicts may occur. For example multiple behaviors can operate to change an element s color. Conflicts are resolved based on the order in which the behavior was applied to the element. Using the above example the collapsing.htc behavior is applied first followed by the hilite.htc behavior with each subsequent behavior taking precedence over the previous behavior. In the above example if there are no conflicting style assignments between the two behaviors any style changes made by both behaviors are applied unaltered to the element. If however both behaviors set the element s color for example the second hilite.htc behavior s color prevails because it was applied to the element later than the first behavior collapse.htc . The same rule can apply when resolving name conflicts such as with property method or event names exposed by multiple behaviors.

The behavior property of an element can be overridden when multiple styles are applied to an element similar for example to the overriding of the color property . When resolving style conflicts in an HTML document the cascading style sheet rules of cascading and inheritance prevail wherein the order of specificity from greatest to least is 1 inline styles 2 ID 3 CLASS and 4 HTML element. In the following example both the Collapsing class and the inline style for the LI element define the behavior attribute 

Applying the precedence rules to the example the inline style that applies the highlighting behavior to the element prevails over the Collapsing class so that only the highlighting effect gets applied to the LI and the expanding collapsing effect does not get applied. In this situation the inline style takes precedence over the rule with CLASS as the selector.

As a component a DHTML behavior may expose properties methods and events that define its object model. When a behavior is applied to an element the element s properties methods and events are extended to include those exposed by the behavior.

In accordance with one or more embodiments and from the perspective of the renderer the renderer can operate in response to an event to interpret the appropriate page elements. In some embodiments when an element in the HTML document having a behavior component attached is parsed by the renderer instead of having to run a script the renderer can instantiate or uses if already instantiated the behavior component to perform some action. In some embodiments instantiation of a behavior component may require downloading and if a download is required the component may be downloaded and instantiated on a separate thread whereby the parsing of the main document is not halted.

As generally described below when an event is received e.g. from some event detector the renderer knows to which element the event applies and takes appropriate action based on that event. Events fired by behaviors can be handled the same way as standard DHTML events and are thus only generally described herein for purposes of simplicity. First the user action or condition associated with the event occurs. An event object is updated to reflect the conditions of the event and the event fires i.e. a notification is provided in response to the event.

If no event handler is attached the event bubbles up through the hierarchy of elements until the top of the hierarchy has been reached i.e. until the event bubbles up to the window object as represented by steps . If an event handler is attached to the current element such as to handle mouseover events at step the event handler is called to carry out its actions and return. For example as represented via steps the event handler may determine if a behavior component needs to be instantiated step and if so instantiates the behavior step . Then the event handler or renderer calls a method of that behavior step on an interface passing it any needed information e.g. the rendered element s coordinates to carry out its actions to affect the element s appearance or behavior e.g. to change the rendered element s color . Note that some or all of the event handler functions described herein may be performed by the renderer e.g. instantiating the behavior as needed and calling a method thereof while other event handler operations may be written into the behavior component. A dashed box is used to represent the event handler in because its functionality can be thus performed by other components.

An event handler can cancel the bubbling of an event as represented by step wherein the event is considered fully handled. Otherwise the event handling process branches to step where the event bubbles up through the hierarchical tree of elements via steps and . A final default action optional at step shown as a dashed box may be taken if the event not canceled by a handler at step .

Basic interfaces for calling an instantiated behavior component are set forth below along with accompanying information 

The IElementBehavior interface is an example of an event sink that receives notifications from Mshtml.dll concerning the activities of Dynamic HTML DHTML behaviors. This interface can be obtained from the IElementBehaviorFactory FindBehavior method described below.

IElementBehavior is an example of the basic interface to be implemented by a DHTML Behavior component. Init is called on the Behavior when it is instantiated and is used to pass the IElementBehaviorSite to the Behavior component. The behavior component may cache this pointer for later use and the pointer is passed to the behavior component without the interface addressed. Notify is a generic mechanism to send down arbitrary notifications to the component. Notifications that are currently sent include BEHAVIOREVENT CONTENTREADY fired once when the content of the element has been initially parsed not every time the content changes . The other notification is the BEHAVIOREVENT DOCUMENTREADY notification which is sent when the contents of the document have been parsed. According to some embodiments this can be equivalent to the onload event or readystate which is fired when the entire document including images OBJECTS SCRIPTS and so forth have also downloaded. The DOCUMENTREADY notification can be sent after the document has finished parsing.

The IElementBehaviorCategory interface can provide DHTML behaviors a means of identifying their category. Using identification by category related behaviors may be easily located.

The IElementBehaviorRender Interface can enable a behavior component to participate in the rendering of text and objects. In some embodiments if the behavior component does not need to participate in such rendering this interface need not be implemented.

The IElementBehaviorSiteCategory interface can provide DHTML behaviors a means of identifying other related behaviors by category. Using identification by category related behaviors may be easily located.

The IElementBehaviorSite interface is an example means of communication that a component has with MSHTML.dll. This interface can be first received by the IElementBehavior Init notification. The IElementBehaviorSiteOM IBindHost and IServiceProvider interfaces can be accessed through the IElementBehaviorSite interface by using QueryInterface. IElementBehaviorSite Methods 

The IElementBehaviorSiteOM interface can be responsible for providing event services to behavior components. In accordance with one or more embodiments to access this interface use QueryInterface on the IElementBehaviorSite interface returned by the IElementBehavior Init notification method.

In accordance with one or more embodiments behaviors can extend an existing HTML element by adding functionality via an Object Model. An example is the mask edit behavior wherein behavior is applied to input elements that allow data entry. The mask behavior can provide a combination of restricted input and formatted output. For example a mask behavior component can be applied through one of several preset formats to many common types of forms fields such as date time and phone number fields whereby the user may only enter appropriate data e.g. numbers in appropriate fields. To this end when information is entered the behavior may provide visual cues about the type of acceptable information e.g. a slash between numeric mm dd yy date entries and or feedback about incorrect entries. A sample htc HTML Component file that provides entry fields for date money and time entries via mask behavior is set forth below 

In some embodiments new tags may be used for applying behaviors to elements instead of existing tags. For example a CIRCLE or SQUARE tag may be used for vector graphics. New tags are parsed and the document tree built as though it were a standard container tag with clearly defined parsing rules for a containing tag.

To this end behavior components can define functionality for new tags that follow an XML namespace syntax and thus new tags can be declared using a declaration on the HTML tag for example 

According to some embodiments this can declare the XML namespace of VG for use within the document. The style sheet to declare behaviors and styles for the custom tags can use a linked style sheet but the form is as follows 

According to some embodiments the new tags that follow XML syntax can have virtually any HTML within them. If any ill formed overlapping or implied HTML tags are present the renderer can build the document tree to the best of its ability and render the page image accordingly. Note that use of media all to contain the custom tag declarations is optional which allows a downlevel browser to ignore the content as some browsers dislike the use of the backslash within cascading style sheets although permitted .

According to some embodiments behaviors may be used to render complex drawings. As described above an extensible tag can use the renderer to handle rendering of its data simply by placing the relevant content in the document tree whereby the renderer s rendering abilities do the rest.

To allow an extensible tag component to extend the browser s abilities a new drawing interface can be established which the behavior component implements and the renderer calls at appropriate times during its rendering. When called the drawing behavior component can be passed a drawing surface that is windowless such that any drawing can fit into a specified z index and be subject to any filter and transition effects.

The renderer can draw in four passes namely 1 Background the background of the document 2 Negative Z any Z index layers below the current element of interest 3 Content the content of the current element and 4 Positive Z any Z Index layers that are above the element.

The extensible tag behavior component may prevent the renderer from drawing any of the above four rendering layers and also may provide drawing at any five additional layers that interleave renderer s layers. As represented in these five layers are 1 Before Background before the renderer even draws the background of the document 2 After Background between the renderer s Background and Negative Z layers 3 Before Content between the renderer s Negative Z and Content layers 4 After Content between the renderers Content and Positive Z layers and 5 After Foreground after the renderer s Positive Z layer. The interface is set forth below 

This interface can be implemented by any component which wants to participate in the rendering of text and objects.

As can be seen from the foregoing detailed description and in accordance with one or more embodiments there is provided a method and system wherein dynamic functionality is encapsulated in a tag or class and the behavior component is external to the page providing clean robust powerful and extensible dynamic functionality to web page elements that may be reused across multiple pages. A simple declarative syntax greatly simplifies applying a behavior to an element.

Although the subject matter has been described in language specific to structural features and or methodological steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or steps described. Rather the specific features and steps are disclosed as example forms of implementing the claimed subject matter.

