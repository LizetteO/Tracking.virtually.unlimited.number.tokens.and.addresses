---

title: Method for the calculation of the bounding box of vectorial graphic shapes
abstract: Method for determining the bounding box of a computerized graphic shape comprising one or more primitives described in vectorial mode, wherein the bounding box is calculated by applying analytical mathematical formulas to the vectorial description of the primitives constituting the shape without preliminarily performing a phase of drawing and displaying of the shape through resolution of the vectorial primitives that compose it.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09013487&OS=09013487&RS=09013487
owner: Telecom Italia S.p.A.
number: 09013487
owner_city: Milan
owner_country: IT
publication_date: 20091230
---
This is a U.S. National Phase Application under 35 U.S.C. 371 of International Application No. PCT IT2009 000595 filed Dec. 30 2009 which was published Under PCT Article 21 2 the entire contents of which are incorporated herein by reference.

The present invention relates in general to computer graphics and to vectorial image processing. The present invention more specifically concerns a method for the calculation of the bounding box of vectorial graphic shapes in the context of vectorial image processing by the term bounding box there is intended the smallest rectangle that circumscribes a digital graphic shape when the latter is positioned on a page for instance a Web page or however displayed on a screen for instance the screen of a Personal Computer or printed on a support of paper or other material.

The trend in modern developments in the field of Web and graphic interfaces is toward solutions of the declaratory type. The application software is written using more and more complex semantics and at a high level so as to facilitate and to accelerate the project and implementation tasks. This is made possible thanks to the availability of engines for the interpretation of high level and more and more sophisticated and complex languages. Many of these engines have been developed in the field of the Web because the HTML HyperText Markup Language paradigm is the most common for the development of complex software applications. There are several examples of this type of engines. The Web browsers themselves normally exploited by the users for the navigation in the World Wide Web are interpreters of the HTML syntax or of evolutions thereof which is a specialization of the XML eXtensible Markup Language syntax. The Flash technology is another example not limited to the graphic aspects but also with functionality of application intelligence. XAML eXtensible Application Markup Language and XUL XML User interface Language by Microsoft and Mozilla respectively are other examples of engines that associate application logics to the creation of Graphical User Interfaces GUI through scripting languages capable of extending the functionalities for instance allowing queries on remote databases access to Web services or use of the network interfaces.

At the base of all these solutions there is a bidimensional 2D vectorial graphic interpretation engine capable of interpreting a syntax of the XML type transforming it into graphic primitives compliant with the used rendering libraries in the field of computer graphics the term rendering identifies the process of render i.e. of generation of an image starting from a description thereof for instance a mathematical description provided in a determined language and interpreted by the graphic engine .

As known in the field the vectorial modality provides for a generic digital graphic shape to be represented through one or more primitive graphic shapes primitive curves like for instance segments circles etc. Every primitive curve is described through a respective mathematical equation on the base of parameters so called control points apt to univocally identify it.

The vectorial representation modality of graphic shapes is advantageous since it operates with continuous functions and allows a total control of the primitives and therefore of the graphic shapes to be represented. Particularly by modifying the number and the position of the control points of the primitives it is possible to trace almost any graphic shape. Additionally the vectorial representation modality occupies less memory resources compared to other representation modalities like for instance the raster modality and also the amount of data to be transferred for instance through a network connection is limited.

The graphic interpretation engines particularly those of vectorial type have the purpose of providing to the programmer high level semantic constructions for the development of sophisticated graphic interfaces. The offered functionalities can be summarized in the following macrofamilies 

The dominant feature is the vectoriality all the graphic primitives and the contour constructions animations interaction scripting are always described and used in vectorial mode.

There are many examples of standardized or proprietary engines that offer semantic functionalities referable to those described above one of these is the Scalable Vector Graphics SVG engine of the W3C World Wide Web Consortium .

In general a vectorial graphic engine receives a description of a vectorial graphic scene to be drawn. The graphic scene is normally described in XML and it is composed by a hierarchy of nodes father and children represented by a tree of inheritance. The nodes can be container type nodes that is they are not susceptible of a graphic representation but act as containers of other nodes or the nodes can be shapes or graphic primitives that is they do have a graphic representation.

A problem of significant complexity is the calculation of the bounding box of a graphic primitive. This functionality is essential for the following reasons 

The bounding box also known in literature as Minimum Bounding Rectangle MBR has the followings features 

The bounding box information is not strictly linked to the current drawing of the scene. Particularly the necessity of providing the bounding box information also to the script code that is executed inside the scene foresees that the calculation of the bounding box might be requested also in respect of primitives that are not subsequently visible which are not in the drawing branch of the tree that describes the scene or that have a series of inherited parameters that do not follow the inheritance rules of the tree. For instance it may be necessary to have the bounding box of a group of primitives taking into account the transformation inherited from their fathers. This means having available the encumbrance of the complex primitive before every transformation that projects it into the general scene. Another example that shows how it may be possible to require the calculation of the bounding box for composed primitives that are not visible is the case of the creation of a description branch of the scene through a program through a script code in this case the code can create a branch of description of the scene and it may require the bounding box thereof before this is inserted in the main tree.

From a functional point of view the task of calculating the bounding box of a complex primitive is to be associated with the part of the graphic engine that manages the drawing that is that phase that transforms the information present in the tree description of the scene into bidimensional drawing graphic primitives.

In modern rendering techniques due to the increasing complexity of the scenes to be drawn the hardware acceleration made possible by the graphic processors for instance Graphic Processing Unit GPU is exploited. Machines devoted to the management of the graphics are fed with series of primitives in a complex processing chain a pipeline . Many types of processing pipelines exist the most common being those used in three dimensional videogames through APIs known as Direct3D Microsoft and OpenGL Linux etc. . In general the rendering process is under the control of a processing unit different from the main CPU or however under the control of a processing task different from that managing the remaining of the application.

In general as for instance described in S. Conversy J. D. Fekete The svgl toolkit enabling fast rendering of rich 2D graphics Technical Report 02 1 INFO Ecole des Mines de Nantes 2002 in order to be able to require to the renderer the hardware processing unit or the firmware or software task that performs the operations necessary for the rendering to calculate the bounding box it is necessary to send thereto the list of the primitives and the related properties and then wait for the renderer task to take over the information and feed the draw processing pipeline the processing pipeline shall thereafter execute all the operations waiting in the queue and eventually it provides the result. Particularly for calculating the bounding box the renderer simulates the process of rendering of the branch of tree inside which there is the primitive as if the renderer should display the graphic shape described by the primitive even if the display on the screen of the primitive is not necessary.

Since normally the processing pipelines are exclusively able to draw pixels and not primitives expressed in vectorial way it is necessary through software or using hardware functionalities provided for in the pipeline to decompose the vectorial primitive in simple linear primitives for example lines or triangles compatible with the way of operation of the pipeline this operation is known as tessellation. After the tessellation the calculation of the bounding box is relatively simple since it is a by product of the tessellation operation results consisting in the identification of the minimum and of the maximum in the selected system of coordinates among all the generated vertexes .

U.S. Pat. No. 6 512 847 shows a technique for the calculation of a frame around a Bezier curve. The frame corresponds to a Bezier curve that approximates the trend of the original Bezier curve spaced apart of an arbitrary distance. In this case an approximation is employed that eventually imposes the definition of a mid point inside the curve through known algorithms and the related calculation of the new control points decomposing the curve in sub curves of lesser length.

WO 2004 100071 proposes a method for the analytical deformation of Bezier curves the deformation is set through an interaction with the user keeping fixed the initial and final controls points and sectioning or joining different curves for best approximating the desired deformation. The requisite of providing curves parallel to the original one is not considered.

The Applicant has observed that the traditional techniques of calculation of the bounding box by a renderer such as a devoted graphic CPU for instance a GPU involve long processing time because of the long series of operations of data transfer primitives change of context the program in execution on the CPU with limited privileges so called user space mode has to be able to access the resources of the graphic card and therefore it has to be able to execute code with high privileges typically inside the driver in kernel mode and wait for the execution by the renderer. These operations often involve long times even equal to the time of displaying of some frames on the screen.

An aspect that further weights the calculation of the bounding box is the tessellation phase implemented by the draw pipeline. The operation is very onerous in terms of time and useless under some respects because all the operations performed during the tessellation are only aimed at calculating the minimum and maximum values of the calculated coordinates.

In view of the state of the art outlined the Applicant has faced the problem of making the process of calculation of the bounding box less heavy from the computational point of view and therefore also faster.

Essentially according to the present invention the bounding box is not calculated downstream of the phase of drawing or displaying the graphic shape but it is directly calculated starting from the information present in the tree description of the scene using an analytical algorithm. Thanks to this 

All this translates into a notable saving of burden and computational time. Particularly by relieving the computational burden it is possible to implement the process also on devices which are not particularly powerful not equipped with a graphic accelerator like for instance smart phones that nowadays are more and more frequently used for the Web surfing.

According to an aspect of the present invention a method is provided for determining the bounding box of a computerized graphic shape comprising one or more primitives described in vectorial mode in which the bounding box is calculated by applying analytical mathematical formulas to the vectorial description of the primitives constituting the shape without preliminarily performing a phase of draw and display of the shape through resolution of the vectorial primitives that compose it.

The calculation of the bounding box of the elementary vectorial primitive describing a segment includes for instance the determination in a reference system of coordinates of the minimum and maximum coordinates of the vertexes of the segment possibly having thickness.

The calculation of the bounding box of the elementary vectorial primitive describing a cubic Bezier curve can for instance include 

In case an affine transformation is applied to the cubic Bezier curve with thickness the calculation of the bounding box can include 

Preferably for the calculation of the bounding box the mode of junction between elementary primitives and or the mode of termination of an elementary primitive are considered.

In case the graphic shape includes more than one primitive described in vectorial mode the bounding box is preferably performed for every primitive and subsequently the bounding boxes of the individual primitives are combined by union.

Another aspect of the invention concerns a program for computer comprising portions of code executable by a computer adapted to allow the computer to perform the method according to the previous aspect of the invention when the program is executed by said computer.

In there is schematically shown in terms of the main functional blocks a data processing device on which a method according to an embodiment of the present invention can be implemented.

The data processing device for instance a Personal Computer possibly a notebook a laptop a netbook a palmtop or a smart phone includes a plurality of units connected in parallel to a system bus .

One or possibly more processing units p connected to the system bus controls the operation of the data processing device. An internal memory directly accessible by the data processing unit is used as a working memory particularly the internal memory can include one or more possibly all of the following units a set of memory registers and a cache memory for instance a multilevel hierarchical cache memory directly located in the data processing unit and a main memory for instance comprising a set of random access memory banks RAM interfaced to the data processing unit through the system bus . The system bus is also connected to a read only memory ROM adapted to store the basic code for the start up of the data processing device.

Peripheral units are connected through respective interfaces to a local bus . Particularly an external memory not directly accessible by the data processing unit is used as mass storage memory the external memory can include one or more possibly all of the following units one or more hard disks CD ROM DVD ROM drivers semiconductor memory devices removable or not like of USB flash memory readers and magnetic tape units .

The data processing device further comprises data input devices for instance a keyboard and a mouse and output devices for instance a display monitor and a printer.

A network interface card is used for connecting the data processing device to a data network for instance an Ethernet. Alternatively or additionally a modem can be foreseen for instance of the ADSL type.

A bridge unit interfaces the system bus to the local bus an arbiter unit managing the access to the system bus in case there is more than one data processing unit .

It will be clear to those skilled in the art that depending on the specific data processing device and on its respective functionalities the represented structure can be scaled down or up. For instance in addition to the data processing unit a graphic accelerator can be foreseen equipped of a GPU.

In the detailed description that follows reference will be made purely by way of example to a vectorial graphic engine according to the SVG standard of W3C nevertheless the solution according to the present invention is not to be intended as limited to the use with such engine.

As known and mentioned in the foregoing a vectorial graphic engine receives and operates on a description in terms of the XML language of a scene to be drawn and for instance to be displayed on a screen or to be printed onto a support of paper or other material the description of the scene is composed by a hierarchy of nodes father nodes and children nodes represented through an inheritance tree. In there is shown an example of description of a graphic scene to be displayed in the form of an inheritance tree . The tree includes a root node . Below the root node there are two children nodes and the node is a node to which there corresponds a graphic representation of an element of the scene to be displayed i.e. a node to which one or more vectorial graphic primitives correspond while the node is a container node i.e. a node to which no graphic representation corresponds being on the contrary only the container of other nodes in the example other two nodes and . The node is a node having a graphic representation while the node is in turn a container node containing in the example the two nodes and both having graphic representation.

According to the present invention for the calculation of the bounding box of a given graphic element of the scene corresponding to a determined node basic node of the tree structure that represents the same scene for example the node of the tree structure in a recursive procedure is performed on the children nodes of the given basic node in the example herein consider the children nodes and for each child node and of the base node the respective bounding box is calculated and accumulated. In other words the tree that represents the graphic scene is run through starting from the selected base node and scanning the list of the children nodes of the considered node and for each node at a lower hierarchical level with respect to the base node the respective bounding box is calculated and accumulated. In the considered example starting from the base node the tree is run through and the child node is encountered which is a node having a graphic representation the bounding box of the shape described by the graphic primitive s contained in the node is calculated and the thus calculated bounding box is accumulated it is for instance stored in the working memory of the computer . The procedure then returns to the base node and descends to the child node since this is a container node the exploration of the tree continues reaching the child node which corresponds to a displayable graphic shape the respective bounding box is calculated and accumulated to the bounding box already stored in the memory the accumulation corresponding to an operation of union of the bounding box just calculated with that calculated previously and stored in the memory . Then the procedure returns again to the node and descends along the tree to encounter the child node also corresponding to a displayable graphic shape the bounding box is calculated and accumulated. Having thus completed the exploration of the portion of tree below the base node the accumulated bounding box stored in the memory corresponds to the bounding box of the graphic shape described by the base node and by the nodes below it.

The recursive procedure just described can be for instance expressed in pseudocode in the following way 

The function CalculateBBox described in pseudocode manages therefore the calculation of the bounding box on the individual node of the tree calling itself to perform the calculation of the bounding box on the children nodes of such node. When the function CalculateBBox is invoked the identifier Node of the base node of the tree on which to operate is passed to the function i.e. the identifier of the node for which it is desired to calculate the bounding box in the example the starting node is the node and at every recursive call of the function CalculateBBox the identifier of a node at a hierarchically lower level is passed to the function the function CalculateBBox provides in output as a result the bounding box calculated by accumulation AccumulatedBBox.

During the recursive procedure for each node that is not a container node i.e. for each node which corresponds to a drawable graphic primitive like for instance the nodes and in if such drawable primitive is a composed or complex primitive it is decomposed into an ordered list of base primitives or elementary primitives the order by which the list of the base primitives is sorted corresponds to the order by which the base primitives are drawn for composing the overall primitive. For example a rectangle with rounded edges is decomposed into 8 base primitives 4 lines corresponding to the sides of the rectangle and 4 arcs of circle of of round angle corresponding to the roundings at the vertexes of the rectangle with the property of being a closed list.

The bounding box resulting from the accumulation by union of two bounding boxes the function union in the above pseudocode is represented by the smallest rectangle that contains them both the resultant bounding box is obtainable by selecting from the two rectangles corresponding to the two bounding boxes to be united the minimum and maximum coordinates along the two axes of the system of coordinates taken as a reference.

The base primitives considered for simplicity in the following are segments and cubic Bezier curves by means of these base primitives it is in fact possible to express or approximate with suitable precision any complex primitive also concave. Particularly by means of base primitives describing segments it is possible to express sections of straight line polygons broken lines and using the properties defining the thickness of the segments rectangles and squares using the cubic Bezier curves it is in particular possible to approximate circles and ellipsis. On the list of the base primitives that compose the complex primitive the bounding box is calculated by iterating on the individual base primitives and accumulating by union the different bounding boxes calculated for the different base primitives.

The calculation of the bounding box for the base primitives depends on the type of considered base primitive.

If the base primitive is a segment possibly also having thickness so as to define a rectangle as shown in for the calculation of the bounding box the coordinates x y x y x y x y of the points P P Pand P in a determined reference system of coordinates are used. The bounding box is therefore the rectangle having a first side given by a vertical segment parallel to the axis y of the system of coordinates of a straight line x min x x x x a second side given by a vertical segment of a straight line x max x x x x a third side given by a horizontal segment parallel to the axis x of the system of coordinates of a straight line y min y y y y and a fourth side given by a horizontal segment of a straight line y max y y y y .

If the base primitive is the cubic Bezier curve it is analytically expressed by the following equation 1 3 1 3 1 0 1 where t is a parameter that defines a curvilinear coordinate.

The calculation of the bounding box for this curve is possible by determining the points of horizontal and vertical tangency thereto. Starting from the above equation it is possible to calculate the points of horizontal tangency T x y T x y and vertical tangency T x y T x y in the following way 

The points of tangency may or not belong to the curve itself. The cubic Bezier curve is in fact defined only for the following values of the parameter t 0

The points of horizontal and vertical tangency will affect the calculation of the bounding box in the case in which the values of the parameter t such that the tangents to the curve are horizontal and vertical lie on the curve if this is not the case in the determination of the bounding box only the extremes of the curve will be used. Thus for the calculation of the bounding box the following points are used 

The bounding box will be defined by the minimum and maximum coordinates among the coordinates of the points described above.

Let a Bezier curve being considered for which a thickness has not been defined and on which no transformation has been applied. This curve is defined as a curve of ideal thickness that is a curve that is drawn with a unitary thickness. When to the curve of ideal thickness the properties of thickness termination and junction are applied the curve is defined as decorated .

Let the case of a curve with thickness be considered. In a cubic Bezier curve A of ideal thickness is represented together with its external edge constituted by a cubic Bezier curve B at a distance d from the curve A.

Given a cubic Bezier curve like the curve A of the calculation of the equation that is the determination of the control points of the cubic Bezier curve B distant a distance d from the curve A is a problem that cannot be solved analytically.

Since nevertheless the objective is that of calculating the bounding box of the shape defined by the two curves A and B the problem can be simplified by determining the points of horizontal and vertical tangency on the curve B. Since the curve B is defined as the curve distant d from the curve A for every value of the parameter t the point for instance of horizontal tangency Pon the curve B can be determined as the point distant d from the point of horizontal tangency Pon the curve A. The calculation of the bounding box can thus proceed using the points of horizontal and vertical tangency of the curve A or the extreme points of the curve A if the values of the parameter t for which there is vertical or horizontal tangency do not lie on the curve A and by calculating the points of horizontal and vertical tangency on the curve B P moving the distance d along the perpendicular to the curve A in such points of tangency or extreme in the following way.

With reference to let P P Pand Pbe the control points of a cubic Bezier curve C the points Pand Pdistant d from the point Pand lying on the perpendicular to the tangent to the curve in the point Pare determined in the following way. Given 

The distance between two generic points P x y and P x y along a straight line is given by Distance square root over 1 so for obtaining the coordinates of the point Pshown in it is necessary to solve the following equations 

The solutions of the equations correspond to two points the two points Pand Pof . In order to determine which of the two points that satisfy the equation is located on the left and on the right with respect to the sense in which the curve is run along values of t increasing it is 

If the thick edge of the cubic Bezier curve is subject to affine transformation the position of the points of horizontal and vertical tangency varies depending on the parameters of the transformation.

In there are shown three cases of affine transformation of a curve with thickness composed by 4 arcs of Bezier curves approximating an ellipse identity that is the curve before the application of the transformation rotation and skew the curve of ideal thickness before and after the transformation is denoted with and the shaded area around the curve and represents the thickness of the curve. In these cases the operations to be performed for determining the points of horizontal and vertical tangency are the following.

1. The point of tangency for instance the point of horizontal tangency P is identified on the curve of ideal thickness or obtained after the transformation of the curve of ideal thickness .

2. The value tof the parameter t is determined for which there is tangency for instance horizontal tangency .

3. The coordinates of the point on the curve corresponding to the value t tbefore the transformation P are calculated.

4. The point P is calculated which is located at a distance d from the point P on the curve in orthogonal direction to the tangent horizontal tangent in this case .

For the correct calculation of the bounding box of the curve described by the individual base primitive also the specific mode of junction and or the mode of termination of the curve should be kept into account.

The junction modes are typically three miter junction bevel junction and round junction as shown in . In turn the modes of termination are typically the butt termination the square termination and the round termination as shown in .

In order to consider in the calculation of the bounding box the junction mode of the base primitives that compose a complex primitive at each iteration on a base primitive the parameters are used that describe the terminal part of the preceding base primitive in the order in which the complex primitive is drawn and the parameters are used that describe the initial part of the next base primitive. For the calculation of the junction at the initial point of the base primitive it is in fact necessary to know the tangent and the incoming direction of the preceding base primitive. For the calculation of the junction at the final point of the base primitive it is necessary to calculate the tangent and the exiting direction of the next base primitive. Account is further taken of the fact that the complex primitive may or may not be a closed curve in the case it is not closed some of the junctions become terminations of the complex primitive. It is underlined that the information of junction and termination is significant only if the bounding box is to be calculated in respect of a decorated curve.

In there are shown from the geometric viewpoint the various cases of junction between two cubic Bezier curves not shown with non ideal thickness in the figure the points Pand P are respectively the terminal point and the second control point of the incoming cubic Bezier curve the points Pand Pare respectively the initial point and the first control point of the outgoing cubic Bezier curve. The segments and represent the tangents to the respective arcs of curve in the terminal points thereof the tangent P P to the incoming curve in the terminal point P and the tangent P Pto the outgoing curve. The curve that passes for the point Pcorresponds to the miter junction case the curve that passes for the point Pcorresponds to the case of round junction the curve that passes for the point Pcorresponds to the case of bevel junction. In the case of junction between two curves the final point of the incoming curve and the initial point of the outgoing curve coincide. The two tangents are represented with their thickness P P P P W 2 where W is the thickness of the contour of the primitive.

In order to consider the junctions between the base primitives that compose a complex primitive in the calculation of the bounding box also the curves corresponding to the used junction are inserted according to the type of junction 

1. In the case of the miter junction type the two segments P Pand P P. An exception is represented by the case in which the length of the miter junction is greater than the limit MiterLimit imposed by the author of the scene. sin 2 2 half the length of the miter junction

If the length of the miter junction is greater than MiterLimit the miter junction collapses to a bevel junction.

In the case in which the list of base primitives that compose the complex primitive is not closed two junctions are transformed into terminations. In this case in the calculation of the bounding box also the curve corresponding to the established termination is inserted. With reference to in the case of a butt termination the curve corresponding to the termination is the segment P P in the case of a square termination it is the rectangle having as vertexes the points P P Pand P in the case of a round termination it is the arc of circle that connects the points Pand P.

The general procedure of calculation of the bounding box of a complex primitive can be described by the following pseudocode 

Although in the preceding description only two base primitives i.e. the primitive segment and the primitive cubic Bezier curve have been considered for the sake of simplicity the technique of analytical calculation of the bounding box is not limited to such shapes and it can be for instance applied also to the calculation of the bounding box of base primitives representing the circle and the ellipse possibly decorated . Also in such case the bounding box will be calculated by determining the points of horizontal and vertical tangency to the curves. In the case of circles or ellipsis with non unitary thickness the calculation of the bounding box will still be based on the points of horizontal and vertical tangency to the curve that defines the external edge of the shape and the determination of such points of tangency results simplified in comparison to the case of the decorated cubic Bezier curve since for the circle and the ellipse the equations that analytically express the external edge are known circle and respectively ellipse distant d from the ideal curve . In the case of affine transformation the same technique can be applied described in connection to the .

The present invention has been here described making reference to some possible embodiments thereof. Those skilled in the art can clearly bring numerous variations to the described embodiments as well as devise alternative embodiments without however departing from the protection scope defined in the appended claims.

