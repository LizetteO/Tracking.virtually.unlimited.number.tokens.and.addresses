---

title: Automatically restarting a first child process based on presence of SQL code in a list
abstract: Systems and methods for auto-restarting abnormally terminated processes are disclosed. An auto-restart system can include a parent task control block, a child process, and a shared resource. The parent task control block can spawn the child process. The child process can operate on the shared resource. When the child process finds the shared resource locked, the child process can terminate abnormally. The parent task control block can recognize the abnormal termination of the child process, and can automatically rollback and restart the child process. Accordingly, the child process can be restarted to operate on the shared resource without human intervention.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021485&OS=09021485&RS=09021485
owner: Wal-Mart Stores, Inc.
number: 09021485
owner_city: Bentonville
owner_country: US
publication_date: 20090820
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application Ser. No. 61 090 534 filed 20 Aug. 2008 the entire contents and substance of which is hereby incorporated by reference.

Various embodiments of the present invention relate generally to computer process management and more particularly to systems and methods for auto restarting processes in a database environment or other environment having shared resources.

In a database system multiple jobs or processes typically run simultaneously. A database likely contains many records and processes operating on the database may require access to the records. There may also be instances in which multiple processes require access to a single record. Some forms of access to records such as basic read operations do not require an acting process to lock the record on which it is operating. Other forms of access however such as typical write operations may require a process to exclude other processes from performing operations on the accessed record. The database system may implement a locking mechanism to enable processes to lock a shared resource while certain operations are performed on the locked resource.

While locking can be beneficial in computing environments where multiple processes run simultaneously on a set of resources locking may sometimes lead to inefficiencies. For example a first process may be required to wait for a second process to complete a task on a locked shared resource. While waiting the first process may repeatedly check the availability of the shared resource until the shared resource becomes available again. As a result processor power is used inefficiently to ensure that the second process can proceed as soon as possible.

A database system may be constructed such that if a process waits too long for a particular resource that process is automatically terminated. This termination can conserve computing power by reducing the repetitive checking that occurs while the process waits for the shared resource. As an unfortunate result when the desired resource is available the ceased process is no longer running although it could conceivably access the resource. In conventional database systems a database administrator may be required to manually restart the terminated process so that the process can continue its tasks.

Manually restarting processes however can lead to some undesirable results. For example manual restart allows for human error in restarting a process. Additionally manual restart will likely not occur immediately after the desired resource becomes available and as a result the system is not as efficient as desired.

Accordingly there is a need for systems and methods for sensing when a process has ended and for automatically restarting such process. It is such systems and methods to which various embodiments of the present invention are directed.

Briefly described various embodiments of the present invention generally comprise auto restart systems methods and utilities for detecting abnormal termination of processes and restarting terminated processes. Embodiments of the present invention can be implemented in database systems or many computing environments where multiple processes run concurrently while operating on one or more shared resources.

According to an exemplary embodiment of the present invention an auto restart system can comprise one or more shared resources a plurality of task control blocks and a plurality of child processes.

The shared resources can be database records or other forms of data in a computing system. The shared resources are shared among the child processes in that multiple child processes can concurrently attempt to access the shared resources.

Each task control block or parent process can perform a process call to start a child process. After calling the child process the task control block can remain in a hung state until the child process terminates. When the child process terminates the task control block can receive an exit code output by the child process when the child terminated. As a result the task control block can detect when its child process terminates and with what exit code the child process terminates. The task control block can determine whether when and under what conditions to restart the child process. Without human intervention the task control block can restart a terminated child processes automatically.

The child processes can be spawned by the task control blocks and can be configured to operate on the shared resources. In some instances a first child process will lock a shared resource while performing an operation on the resource. In that case if a second child process attempts to access the same shared resource in a manner that is prevented by the lock the second child process can be unsuccessful in accessing the shared resource. The second child process may be terminated after a predetermined period of time or after some other condition is met while the second process unsuccessfully attempts to access the shared resource.

The task control block that spawned the second child process can sense termination of the second child process and if appropriate can restart the second child process.

These and other objects features and advantages of the auto restart systems and methods will become more apparent upon reading the following specification in conjunction with the accompanying drawing figures.

Various embodiments of the invention are auto restart systems and methods. To facilitate an understanding of the principles and features of the auto restart systems and methods various illustrative embodiments are explained below. In particular the invention is described in the context of being an auto restart utility for restarting database processes that terminate abnormally. Embodiments of the invention however are not limited to database contexts but can be used in many systems providing shared resources or a plurality of processes.

The components described hereinafter as making up various elements of the auto restart systems and methods are intended to be illustrative and not restrictive. Many suitable components that would perform the same or similar functions as the components described herein are intended to be embraced within the scope of the invention. Such other components not described herein can include but are not limited to for example components developed after development of the invention.

Referring now to the figures wherein like reference numerals represent like parts throughout the views embodiments of the auto restart systems and methods will be described in detail.

The below discussion while provided in various sections should be read as a whole and as applying to this entire disclosure and the various embodiments of the auto restart system . Thus discussion of one or more features and embodiments in a particular section can also be pertinent to other features and embodiments discussed in one or more other sections.

Various aspects of the auto restart system can be elements of or can interact with a database management system . illustrates a conventional database management system which can provide a basis for the auto restart system . As shown in the database management system can comprise at least one database server a database see a database administrator and at least one application server . The database management system can be accessible by remote computing devices via a network .

The database server can maintain the database on one or more storage devices. The storage devices can be of various types including without limitation magnetic optical and magneto optical storage devices or flash memory. The database can include a plurality of database records which can act as the shared resources in the auto restart system .

The database administrator can be responsible for operation and maintenance of the database server the database and the application server .

In a typical scenario a database client such as the remote computing device can allow a user to enter data through a user interface such as a web browser. This data can be sent to the application server across the network . Base on the data received from the database client the application server can form a database query such as a SQL query. The application server can then forward the query to the database server directly or across the network . In some database management systems the application server can be integrated into the database server . After receiving the query the database server can validate the query and if valid perform the operations required by the query.

The database server can normally but need not be programmed to accommodate multiple database clients which can concurrently connect to the database server with different requests. These requests can include for example routine online transaction processing OLTP requests in which relatively few database records need to be processed with sub second response times. In some instances the database clients can also issue processor intensive decision support system DSS requests which may require hours to complete.

To support queries the database server can implement a set of database server processes. These can include without limitation various transaction management scheduling and data management functions query optimization scan processing join processing aggregation processing sort processing convergence processing final result set processing logging recovery index management concurrency control buffer pool management and parallel query processing. To efficiently perform these or other processes of the database management system the database server can often run multiple processes simultaneously. Some or all of the running processes can be required to operate on the database records concurrently. Because database records are shared between the processes there can be instances in which multiple processes seek simultaneous access to a single database record .

Database systems conventionally implement one or more methods for avoiding data corruption that can occur as a result of maintaining shared resources such as database records. A conventional database can implement locking in which a process can lock a shared resource when performing certain types of data accesses such as write operations. When a first process locks a shared resource such as a database record a second process can be unable to access the shared resource for the purpose of certain operations such as additional write operations. As a result the database management system can avoid corruption that can occur when multiple processes attempt to write to the same shared resource .

A database process encounters a database contention error when that process cannot proceed because a shared resource that it must access is locked. A negative result of locking is that when a database contention error occurs a process may be required to wait for its turn to access the shared resource . While waiting the process can repeatedly check whether the shared resource is available. This repeated checking can inefficiently utilize other system resources such a processor power.

Some conventional database systems seek to conserve processor power by terminating database processes that cannot proceed because of a database contention error. Once terminated a waiting process can no longer waste process power but the process is also unable to complete its assigned tasks. In a conventional database management system a database administrator must manually select which processes to restart and if applicable must rollback each of such processes to a checkpoint from which they should proceed. This manual intervention can lead to undesirable manual errors. Additionally because a process remains terminated until a human intervenes a process that might otherwise be able to proceed cannot do so until manually restarted. As a result such a process is delayed until human intervention occurs.

Various embodiments of the present invention can reduce wasteful processor usage while enabling processes to proceed in their tasks without human intervention. Referring back to as mentioned above an exemplary embodiment of the auto restart system can comprise a processor one or more shared resources a plurality of task control blocks and a plurality of child processes .

Operations of the auto restart system and its components can be performed by or in a computer system. Accordingly such operations can be stored on a computer readable medium of expression and performed by a computer processor such as the processor depicted in . Further various modules and components associated with the auto restart system can be implemented as hardware software or a combination thereof.

The one or more shared resources can be records in the database or other forms of data in a computing system. The shared resources can be shared among the child processes such that multiple child processes can simultaneously attempt to access the shared resources .

The processor can initialize the plurality of task control blocks and can execute one or more processes for operation of the task control blocks .

Each task control block or parent process can perform a process call to initialize a child process for running a program of the database management system . After initiating a child process the task control block can remain in a hung state until its child process terminates. Alternatively in a multi threaded implementation of the auto restart system the task control block can spawn multiple child processes and can monitor each of its child processes to detect termination. Regardless of whether a multi threaded implementation is used when the child process terminates the task control block can receive an exit code output by the child process upon termination. Accordingly the task control block can detect this termination.

The child processes can represent various programs operating within the database management system . Each of the plurality of child processes can be spawned by a task control block . When a task control block calls a program the called program can become a child process of the auto restart system . The child process can be configured to execute a sequence of tasks of the called program and some of these tasks may require access to the shared resources . While each child process executes its assigned tasks a checkpoint utility can create one or more checkpoints of the child process . The checkpoints can be snapshots of the current state of the child process and can include SQL codes and current values of variables. The checkpoints can be used to the return the child process to a point before abnormal termination of the child process .

In some instances a first child process can lock a shared resource before performing an operation on the resource . In that case if a second child process attempts to access the same shared resource in a manner that is prevented by the lock the second child process can encounter a database contention error. If the database contention error remains unresolved after a predetermined number or timeframe of unsuccessful attempts to access the shared resource the second child process can be terminated. In that case the child process can terminate itself or alternatively the task control block running the child process can terminate the child process .

When a child process terminates the child process can output an exit code. The corresponding task control block can receive the exit code output by the child process upon termination. As a result a task control block can detect when a child process terminates and with what exit code the child process terminates. The task control block can also detect the SQL codes that were being run by the child process before the child process terminated. Based at least partially on the exit code and the last SQL code of the terminated child process the task control block can determine whether when and how to restart the child process . For example if a child process exits with a GOBACK code the task control block can rollback the child process before restarting the child process . Additionally the last SQL code of a child process can be further utilized by the task control block to determine how long to wait before restarting the child process .

In some exemplary embodiments the auto restart system can maintain a participation list or an exclusion list which can be based on the last SQL code of the child processes. The task control block can compare a child process s last SQL code with the participation or exclusion list. If a participation list is used the auto restart system can restart the child process if the last SQL code is on the participation list and can select not to restart the child process if the last SQL code is absent from the participation list. Alternatively if an exclusion list is used the task control block can restart the child process unless the last SQL code of the child process appears on the exclusion list

An exemplary embodiment of the auto restart system can utilize DB2 an IBM registered database management system which can run on the z OS platform. The auto restart system however is not limited to the DB2 database management system and other database management systems can be used with appropriate implementation modifications. DSNALI and DSNHLI2 are two modules supplied by IBM as part of a call attach facility CAF see . DSNALI can be the main application program interface API used to connect to the DB2 database management system . DSNHLI2 can be the API used to make SQL calls to the DB2 database management system .

In a non call attach facility environment using a DSN connection the programs executed by child processes can be compiled to make direct calls to DSNHLI to issue the DB2 database requests. The auto restart system can eliminate a need for job control language JCL and child process changes. Thus the child processes are compiled to make calls to the DSNHLI API. The DSNHLI can be a standard protocol to issue requests in the database management system via the DSN system provided by IBM.

Referring back to in an exemplary embodiment of the auto restart system DSNHLI can be the main entry point for the DB2 database management system requests from the child processes including compiled child processes and system utilities. The DSNHLI module need not be loaded into memory. Instead DSNHLI can be masked by a sub routine WMDB2AR9 as part of the auto restart system . During initialization of the auto restart system the load module WMDB2AR9 can be loaded into memory and can be renamed to DSNHLI. The rename of WMDB2AR9 to DSNHLI need be only in memory in the current task control block environment. As part of initialization WMDB2AR9 can receive the address of DSNHLI2 . As renamed to DSNHLI WMDB2AR9 can become a pass through mechanism called for DSNHLI requests. WMDB2AR9 can pass control to DSNHLI2 to support the standard call attach facility protocol.

WMDB2AR9 can receive a request from a child process via a DSNHLI call and can pass the request forward to DSNHLI2 IBM s call attach facility to perform the DB2 database management system operation. Upon return from DSNHLI2 WMDB2AR9 can save a SQLCA IBM s SQL Communication Area not shown in the figures control block in the auto restart system memory and can then return control back to the child process . The SQLCA can contain the SQL code as returned from the DB2 database management system . By saving the SQLCA in the auto restart system memory the SQLCA can be used to evaluate the last SQL code from the DB2 database management system when a child process terminates with a non zero value exit code.

WMDB2AR1 can open a connection to DB2 load the DSNHLI2 load module load the WMDB2AR9 load module rename WMDB2AR9 to DSNHLI and call the requested child process program. In other words WMDB2AR1 can set up the DB2 database management system environment for the child process to communicate with the DB2 database management system .

In some exemplary embodiments the auto restart system can automatically terminate a child process when the auto restart system detects a SQL code returned from DSNHLI2 that appears in the participation list. This feature varies from previously described operation of WMDB2AR9 which can generally return control back to the child process for evaluation of the SQL code.

Also shown in the Auto Trap option as can provide a means to allow the auto restart system to detect the SQL codes check the SQL code participation list and then terminate the child process if the SQL code appears in the participation list. When the Auto Trap feature is active and an SQL code in the participation list is detected the auto restart system specifically WMDB2AR9 can terminate the child process with a user abend of U0102. In that case control need not be returned to the child process . The user abend can terminate the child process and thus the task control block can detect the termination and issue a restart on the child process .

Embodiments of the auto restart system can be implemented in various manners. For example and not limitation aspects of the auto restart system can be implemented through one or more COBOL programs. In that case primary functionality of the auto restart system can be controlled via global and local parameter files which are also known as parm files. Additionally COBOL programs or other types of program for operations of the database management system can be child processes initiated by the task control block .

The auto restart system can display error information when child processes terminate and can issue rollbacks through an exit sub routine based on checkpoints. The checkpoints can but need not be created by a standard checkpoint utility. The auto restart system can also display the SQL statements that were being executed by the terminated child processes as well as any variables in use by the SQL statements. Upon request or by default the auto restart facility can additionally display actual SQL counts used by terminated processes .

The task control block of the auto restart system can detect standard exit codes of child processes . For example in an exemplary embodiment the task control block can detect the four main exit points for a COBOL program GOBACK STOP RUN USER ABEND and SYSTEM ABEND. The task control block can evaluate the exit type and last SQL error code and based on this information can determine whether and how to rollback and restart the child process . Because the auto restart system can recognize standard exit codes no modifications to individual programs need be necessary to run such programs through the auto restart system .

An exemplary embodiment of the auto restart system can but need not utilize one or more copybooks for implementing automatic restarts. For example and not limitation a copybook can be used to retrieve execution parameters.

For illustrative purposes only exemplary copybook fields are provided below. In the provided exemplary copybook fields the abbreviation ARF stands for auto restart facility and refers to a field related to the auto restart system . An exemplary embodiment of the auto restart system can include the following copybook fields 

In an exemplary embodiment of the auto restart system at least a portion of the functionality of the auto restart system can be determined by the parm files. Separate parm files can be provided for global values and local values of variables. The global values can be designed to apply to the most common usages of the auto restart system . When these variables are defined in the global parm file they can represent default values for the auto restart system . In contrast when these variables are defined in the local parm file they can override the values in the global parm file and can apply only to programs running locally.

In an exemplary embodiment some or all of the keywords that accept a yes or no value can also accept y true t on or 1 for yes values and n false f off or 0 for no values.

The above implementation is provided for illustrative purposes only and does not limit the scope of embodiments of the auto restart systems . Various other implementations could be used to employ an exemplary embodiment of the system .

Accordingly as described above exemplary embodiments of the auto restart system and method can be used to monitor database processes and to restart such processes after they terminate abnormally.

While embodiments of the auto restart systems and methods have been disclosed in some exemplary forms it will be apparent to those skilled in the art that many modifications additions and deletions can be made without departing from the spirit and scope of the auto restart systems methods and their equivalents as set forth in the following claims.

