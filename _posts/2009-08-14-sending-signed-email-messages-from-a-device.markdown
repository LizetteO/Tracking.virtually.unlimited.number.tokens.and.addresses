---

title: Sending signed e-mail messages from a device
abstract: Sending signed e-mail messages. An output data stream is created for streaming a signed e-mail message, and streamed attachment data is read. In response to receiving a portion of the read streamed attachment data, the received portion of the attachment data is digested to generate a digest value, and the received portion of the attachment data is sent to a mail server via the output data stream. The received portion of the attachment data is smaller than the size of the attachment data. The digest value is updated as additional portions of the streamed attachment data are received and digested. In response to sending all attachment data to the mail server, a signer generates the signature data by signing the digest value using a signer's private key, and the generated signature data is sent to the mail server via the output stream.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08281120&OS=08281120&RS=08281120
owner: Canon Kabushiki Kaisha
number: 08281120
owner_city: Tokyo
owner_country: JP
publication_date: 20090814
---
The present disclosure relates to sending signed e mail messages from a device and more particularly relates to sending streamed data from a device using a secure e mail exchange format.

In the field of e mail messaging formats for secure e mail exchange have been proposed that permit signing of e mail messages and their attachments. One such secure e mail exchange format is defined by the secure MIME S MIME standard for public key signing and encrypting of e mail messages encapsulated in MIME Multipurpose Internet Mail Extensions using a PKI Public Key Infrastructure . The PKI provides an S MIME system with public key certificates that bind together an identity with a public key used to sign and or encrypt an e mail message including any attachments.

To sign a message a message sender uses the sender s private key which is stored in a secure location to encrypt a hash of the message and then send the message along with the sender s certificate or a list of certificates for validating the validity of the certificate which contains the sender s public key information. The recipient uses the received public key in the certificate to verify the message s digital signature.

To encrypt a message a message sender obtains the recipient s public key and uses the recipient s public key to encrypt the message and send the message along with the recipient s certificate to a receiver. The recipient will use the recipient s private key which is stored securely somewhere that the recipient can access to decrypt the message.

Some secure e mail exchange formats allow for creation and formatting of a signed only message and an enveloped encrypted only message. In addition these formats specify that signing and encrypting operations can be applied in any order. For example signing can be performed before encrypting to create a signed first then encrypted signed and encrypted message. Also encrypting can be performed before signing to create an encrypted and signed message.

As one example of a secure e mail exchange format and as specified by the S MIME standard a signed only S MIME message clear signed contains a MIME body part that contains a MIME entity i.e. the message content and attachment data and a separate MIME body part that contains a signature PKCS7 signature data . The MIME entity included in the message is signed by virtue of the separate signature that is included in the message. Before adding the signature to the signature MIME body part Base64 transfer encoding is applied to the signature. The signature MIME body part has an application pkcs7 signature content type and a Base64 content transfer encoding.

The S MIME standard is defined at RFC 3851 S MIME Version 3.1 Message Specification dated July 2004 which obsoletes RFC 2633 RFC 3850 S MIME Version 3.1 Certificate Handling dated July 2004 which obsoletes RFC 2632 and RFC 3852 Cryptographic Message Syntax CMS dated July 2004 which obsoletes RFC 3369 and is updated by RFC 4853 the contents of which are incorporated by reference herein

These secure e mail exchange formats often specify that the signature PKCS7 signature data in the case of the S MIME format is created by using a digest algorithm to calculate a message digest for the entity that is to be signed and then encrypting i.e. signing the message digest value using the signer s private key. The message digest value is the signature again PKCS7 signature data in the case of the S MIME format .

Because the clear signed message includes a signature that is separate from the signed entity i.e. the message content and attachment data and because the signature is created using a message digest of the signed entity a typical transmission of secure e mail is often compelled to access attachment data twice. For example the S MIME system accesses the attachment data a first time to generate the attachment data to be sent and the S MIME system accesses the attachment data a second time to generate the message digest that is used to generate the signature.

When sending an attachment file with e mail messages secure e mail systems typically read the entire attachment file into a memory buffer before generating and sending the e mail message to facilitate access to the attachment data. Examples of S MIME systems that exhibit such behavior are believed to include Oyster S MIME Open Source lib.

One problem with known e mail systems that read the entire attachment file or files into a memory buffer is that the size of attachment files may be limited by the size of the memory buffer. Therefore a large memory buffer may be needed to send e mail messages having large attachment files. Moreover typical e mail systems use the Java Virtual Machine JVM which limits the memory buffer size to around 30 MB.

To avoid limits on in memory size when generating e mail messages containing attachments e mail systems that use the Bouncy Castle S MIME library create an attachment file and read the attachment file twice. The attachment file is read a first time to generate an attachment body part of the e mail message using attachment data contained in the attachment file. The attachment file is read a second time to generate a digital signature body part of the e mail message. In particular during the second read a hash value is calculated that hash value is signed and the signed hash value is used as the digital signature which is added to the digital signature body part of the e mail message.

One problem with secure e mail systems that read each attachment file twice is that it may be difficult to sign a partially sent e mail message. In particular if only part of an attachment file is read during the first read operation the same portion of the attachment file read during the first read operation should also be read during the second read operation so that the appropriate hash value for the digital signature is generated. However it may be difficult to determine when to stop reading the attachment file during the second read operation.

Furthermore it may be difficult to send real time data i.e. data that is generated and not saved using a secure e mail system that reads each attachment file twice because the real time data may only be available during the first read operation.

The foregoing situation is addressed by reading streamed attachment data from a streaming data source one time and by digesting the streaming attachment data at the time when the attachment data is being sent to a recipient.

Thus in an example embodiment described herein a signed e mail message is sent to a mail server from a device that communicates with the mail server over a network. The signed e mail message has attachment data and signature data. Signer information recipient information and attachment information are received. The signer information recipient information and attachment information are packaged into an e mail message having a clear signed secure e mail exchange format that includes an attachment body part and a signature body part. The attachment body part contains the location of at least one attachment file included in the attachment information. The signature body part contains the signer information for generating the digital signature. An output data stream is created for streaming the e mail message from the device to a mail server specified by the recipient information. The attachment body part is processed to acquire at least one input data stream for the at least one attachment file location contained in the attachment body part. Attachment data is read from the at least one input data stream and in response to receiving a portion of the read streamed attachment data from the at least one input data stream the received portion of the attachment data is digested to generate a digest value and the received portion of the attachment data is sent to the mail server via the output data stream. The received portion of the attachment data is smaller than the size of the attachment data and the digest value is updated as additional portions of the streamed attachment data are received and digested. In response to sending all attachment data specified by the attachment information to the mail server the signature body part is processed to acquire a signer specified by the signer information contained in the signature body part the signer generates the signature data by signing the digest value using a signer private key and the generated signature data is sent to the mail server via the output data stream.

The foregoing arrangement is particularly advantageous in situations where it may not be possible to read and digest an entire attachment file all at once due to the size of the attachment file. Because attachment data is streamed a large attachment file can be sent in a signed e mail message even if the entire attachment file cannot be read and digested all at once.

Because attachment data is digested on the fly as it is being streamed from the file locations the attachment data can be read once. Because the attachment data can be read once and a digest value is updated as additional portions of the streamed attachment data are received and digested it is possible to sign a partially sent e mail message. Moreover because attachment data is read once performance can be improved as compared to an e mail system in which attachment data is read more than once. Furthermore because attachment data is read once it is possible to send real time data that might not be available after the first read operation is performed.

In example embodiments the e mail message has an S MIME format and the signature has a PKCS7 content type. The signer can include at least one of a secure e mail library module an application module and a smart card. The received portion of the attachment data can be encrypted before being sent to the mail server via the output data stream.

The device can include a multi function printer MFP wherein the streamed attachment data is generated by at least one of a scan operation and a copy operation of the MFP. The attachment body part can contain signer s digest algorithm information specified by the signer information. The received portion of the attachment data can be digested using a digest algorithm wherein the digest algorithm includes at least one of an MD5 Message Digest algorithm 5 digest algorithm a Secure Hash Algorithm SHA 1 digest algorithm and an SHA 2 digest algorithm wherein the SHA 2 digest algorithm includes at least one of an SHA 224 digest algorithm an SHA 256 digest algorithm an SHA 384 digest algorithm and an SHA 512 digest algorithm.

Responsive to a cancel instruction issued by a user of the device in the midst of the scan operation the signer can generate the signature data and the generated signature data can be sent to the mail server via the output data stream. As such a partially sent e mail message is signed in correspondence to the information scanned so far in the interrupted scan operation. Information can be added to the message content of the partially sent e mail message to indicate that the message is a partially sent e mail message. Information can be added to the attachment data of the partially sent e mail message to indicate that the message is a partially sent e mail message wherein if the message includes a plurality of attachment files the information is added to the attachment file that is partially sent. Additional information indicating that the message is a partially sent e mail message can be added to the partially sent e mail message as a new attachment.

The received portion of the read attachment data can be buffered in a memory buffer wherein a capacity of the memory buffer is smaller than a size of the attachment data specified by the attachment information and wherein after the buffered portion of the attachment data is digested and sent to the mail server additional portions of the streamed attachment data are buffered in the memory buffer.

This brief summary has been provided so that the nature of this disclosure may be understood quickly. A more complete understanding can be obtained by reference to the following detailed description and to the attached drawings.

Mail server is a computer that executes an e mail server application such as for example Microsoft Exchange Server Sendmail e mail server or any other suitable type of e mail server application.

Data server is a computer that executes a data server application such as for example a file server application a web server application a database server application a media server application or any other suitable type of data server application.

Network is an intranet but in other embodiments network can be the Internet or any other suitable type of network for sending e mail messages.

Certificate Authority CA and Online Certificate Status Protocol OCSP server is a computer that executes a Certificate Authority server application and an OCSP server application.

Sending device is a device that executes an e mail client application that generates and sends signed e mail messages having a clear signed secure e mail exchange format to recipient devices and via mail server . In the example embodiment the secure e mail exchange format is an S MIME format however in other embodiments the secure e mail exchange format can be any other suitable type of secure e mail exchange format. In other embodiments the sending device is also a recipient device that executes an e mail client application that receives S MIME e mail messages from mail server . In the example embodiment sending device is a multi function printer MFP but in other embodiments sending device can be any other type of device that sends e mail messages such as for example a computer a scanner a copy machine a facsimile machine a printer a personal digital assistant PDA a mobile telephone a handheld device or the like.

Recipient devices and are devices that each executes an e mail client application that receives S MIME e mail messages from mail server . In other embodiments the recipient devices are also sending devices that execute an e mail client application that generates and sends signed S MIME e mail messages to recipient devices via mail server .

In the example embodiment shown in sending device recipient devices and data server Certificate Authority CA and Online Certificate Status Protocol OCSP server and mail server are shown to be separate devices. However in other embodiments any combination of the functions of sending device recipient devices and data server Certificate Authority CA and Online Certificate Status Protocol OCSP server and mail server may be performed by one or more devices. For example in other embodiments an e mail server application and a data server application may be executed by the same computer.

In the example embodiment shown in sending device recipient devices and data server Certificate Authority CA and Online Certificate Status Protocol OCSP server and mail server are shown to be connected through one network. However sending device recipient devices and data server Certificate Authority CA and Online Certificate Status Protocol OCSP server and mail server may be connected through more than one network.

RAM interfaces with computer bus so as to provide information stored in RAM to CPU during execution of the machine executable instructions in software programs such as an operating system application programs and device drivers. More specifically CPU first loads computer executable process steps encoded in machine executable instructions from fixed disk or another storage device into a region of RAM . CPU can then execute the stored process steps from RAM in order to execute the loaded computer executable process steps. Data such as color images or other information can be stored in RAM so that the data can be accessed by CPU during the execution of computer executable software programs encoded in machine executable instructions to the extent that such software programs have a need to access and or modify the data.

As also shown in hard disk contains operating system and application programs encoded in machine executable instructions such as e mail server applications file server applications web server applications database server applications media server application Certificate Authority server applications OCSP server applications and e mail client applications. Hard disk also contains device drivers for software interface to devices such as input device drivers output device drivers and other device drivers .

RAM interfaces with computer bus so as to provide information stored in RAM to CPU during execution of the machine executable instructions in software programs such as an operating system application programs and device drivers. More specifically CPU first loads computer executable process steps encoded in machine executable instructions from fixed disk or another storage device into a region of RAM . CPU can then execute the stored process steps from RAM in order to execute the loaded computer executable process steps. Data such as color images or other information can be stored in RAM so that the data can be accessed by CPU during the execution of computer executable software programs encoded in machine executable instructions to the extent that such software programs have a need to access and or modify the data.

As also shown in hard disk contains operating system application programs encoded in machine executable instructions . Hard disk also contains device drivers for software interface to devices such as input device drivers output device drivers and other device drivers . Hard disk also contains S MIME application module S MIME library module mail module digest module and encryption module .

S MIME application module comprises computer executable process steps encoded in machine executable instructions for an e mail client application that generates and sends signed S MIME e mail messages by calling S MIME library module .

S MIME library module comprises computer executable process steps encoded in machine executable instructions executed by CPU for sending a signed e mail message from sending device to recipient devices e.g. and via network the signed e mail message having attachment data and PKCS7 signature data wherein the e mail message has an S MIME format.

S MIME library module generally comprises computer executable process steps encoded in machine executable instructions that receive signer information recipient information and attachment information from S MIME application module . S MIME library module creates an e mail message using the received signer information recipient information and attachment information and calls mail module to create an output data stream for streaming the e mail message from sending device to a mail server specified by the recipient information e.g. mail server and connected to sending device via network . In response to receiving the output data stream from mail module S MIME library module reads streamed attachment data specified by the attachment information e.g. attachment data attachment data stored in data server or real time attachment data received from for example a scanner via scanner interface . In response to receiving a portion of the read streamed attachment data S MIME library module digests the received portion of the attachment data to generate a digest value using digest module and sends the received portion of the attachment data to the mail server via the output data stream wherein the received portion of the attachment data is smaller than the size of the attachment data and wherein the digest value is updated as additional portions of the streamed attachment data are received and digested.

In response to sending all attachment data specified by the attachment information to the mail server a signer specified by the signer information generates the PKCS7 signature data by signing the digest value using a signer s private key. In the example embodiment the signer is digest module however in other embodiments the signer can be for example S MIME application module a smart card or any other suitable type of signer that generates the PKCS7 signature data by signing the digest value using a signer s private key. S MIME library module sends the generated PKCS7 signature data to the mail server via the output data stream.

In the example embodiment digest module comprises computer executable process steps encoded in machine executable instructions for an MD5 Message Digest algorithm 5 digest algorithm however in other embodiments digest module can comprise computer executable process steps encoded in machine executable instructions for a Secure Hash Algorithm SHA 1 digest algorithm and instructions for an SHA 2 family algorithm e.g. an SHA 224 digest algorithm an SHA 256 digest algorithm an SHA 384 digest algorithm and an SHA 512 digest algorithm .

Mail module comprises computer executable process steps encoded in machine executable instructions executed by CPU for supporting e mail client functionality.

Encryption module comprises computer executable process steps encoded in machine executable instructions for encrypting data using a public key.

S MIME application module is an e mail client application that generates and sends signed S MIME e mail messages by calling S MIME library module to create and send an S MIME message using mail module .

In the example embodiment mail module is a platform and protocol independent mail module. In particular mail module is a Java based mail module that includes JavaMail API module and JavaBeans Activation Framework JAF module .

JavaMail API module provides a set of abstract Java classes and interfaces for supporting e mail client functionality. The JavaMail API is described in JavaMail API Design Specification Version 1.4 Sun Microsystems Inc. December 2005 and JavaMail Guide for Service Providers Revision 01 Sun Microsystems Inc. August 1998 and JavaMail API documentation JavaMail 1.3.3 Jun. 27 2003 available at Sun Microsystems Inc. the entire contents of which are incorporated by reference as if set forth in full herein.

JavaMail API module defines for example the Java classes MimeMessage MimeMultipart MimeBodyPart and Transport. The MimeMessage and MimeBodyPart classes implement widely used Internet mail protocols and conform to specifications RFC 822 Standard for ARPA Internet Text Messages dated August 1982 which obsoletes RFC 733 and RFC 2045 Multipurpose Internet Mail Extensions MIME Part One Format of Internet Message Bodies dated November 1996 which obsoletes RFC 1521 1522 and 1590 the entire contents of which are incorporated by reference as if set forth in full herein.

The MimeMessage class defines a set of attributes and a content for a mail message. Attributes of the MimeMessage class specify addressing information and define the structure of the content including the content type. The content of a MimeMessage object for a typical multipart mime message is represented as a MimeMultipart object that includes one or more MimeBodyPart objects. The content of each MimeBodyPart is represented as a DataHandler object that wraps around the actual data.

The MimeMessage class adds From To Subject Reply To and other attributes necessary for message routing via a message transport system. The content of a message is a collection of bytes or a reference to a collection of bytes encapsulated within a MimeMessage object.

The MimeMultipart class is an implementation of the abstract Multipart class that uses MIME conventions for the multipart data. MimiMultipart objects contain one or more MimeBodypart objects.

JavaMail API module has no knowledge of the data type or format of the message content. A MimeMessage object interacts with its content through an intermediate layer JavaBeans Activation Framework JAF module . This separation allows a MimeMessage object to handle any arbitrary content and to transmit it using any appropriate transmission protocol by using calls to the same API methods.

The JavaBeans Activation Framework is described in Calder et. al JavaBeans Activation Framework Specification Version 1.0a Sun Microsystems Inc. May 27 1999 and JavaBeans Activation Framework 1.0.2 API documentation 2002 available at Sun Microsystems Inc. the entire contents of which are incorporated by reference as if set forth in full herein.

JavaMail provides convenient methods to interact with JAF. JavaMail also provides convenient methods to interact with customized Java libraries. For example MimeMessage s setDataHandler method specifies a customized DataHandler class to be used for accessing content of a MimeMessage.

Support for secure messaging e.g. support for S MIME is not ordinarily provided by JavaMail. Accordingly in the example embodiment S MIME library module is provided which is a Java library that builds security on top of MIME to provide secure electronic messaging of Internet mail in the form of message authentication and data security.

S MIME library module includes S MIME JavaMail JAF callback handler module S MIME utility module and S MIME message module . S MIME utility module includes streaming module and signing module .

S MIME JavaMail JAF callback handler module includes an SMIMEDataContentHandler abstract base class and a MultipartSigned class. The MultipartSigned class receives a JavaMail JAF callback from mail module and processes a MIMEMultipart object which includes a MimeBodyPart object for attachment data and a MimeBodyPart object for PKCS7 signature data.

Streaming module includes an SMIMESignedAttachment class and signing module includes a SignerPKCS7SignatureHandler class. The SMIMESignedAttachment class receives a callback from S MIME JavaMail JAF callback handler module for streaming and digesting attachment data. The SignerPKCS7SignatureHandler class receives a callback from S MIME JavaMail JAF callback handler module for generating the PKCS7 signature data.

Methods in S MIME library module are called by S MIME application module and interact with mail module and S MIME library module calls methods in mail module . S MIME library module validates a certificate s validity with CA OCSP server and streams attachment data from a data source e.g. local storage locations on hard disk addresses of real time data input devices such as for example a scanner connected to scanner interface or remote locations such as for example locations on data server . S MIME application module can control the streaming of attachment data from the data source to S MIME library module . S MIME library module streams attachment data and a digital signature to mail server .

At step S S MIME application module uses the SMIMEMail object to set signer information. In particular S MIME application module calls a method in S MIME message module to create an S MIME signer object to be used to generate the PKCS7 signature data. After creating the S MIME signer object S MIME application module calls a setSigner method of the SMIMEMail object to set the signer information of the SMIMEMail object to specify the created S MIME signer object.

In the example embodiment application module can create an S MIME signer object by specifying a certificate store that contains the signer s private key used to generate the PKCS7 signature data by specifying a signer s private key and a signer certificate list by specifying a reference to an interface for a smart card or an application module that generates the PKCS7 signature data using the signer s private key or by specifying a reference to an interface for a smart card or an application module that generates the PKCS7 signature data using the signer s private key along with a signer certificate list. Table 3 defines the setSigner method of the SMIMEMail object that is used to set the signer information of the SMIMEMail object.

At step S S MIME application module calls a setRecipients method of the SMIMEMail object to set the recipient information of the SMIMEMail object to specify a list of all recipients.

At step S S MIME application module calls a setAttachment method of the SMIMEMail object to set the attachment information of the SMIMEMail object to specify one or more locations of attachment data.

At step S S MIME application module updates and verifies the signer information recipient information and or attachment information if any of the signer information recipient information and or attachment information is invalid.

S MIME application module can perform the updating and verification described with respect to step S after any of steps S S and S. S MIME application module can perform steps S S and S in any order.

At step S S MIME application module calls a sign method of the SMIMEMail object to have S MIME message module pack the signer information recipient information and attachment information specified by the SMIMEMail object into a MimeMessage object.

In particular S MIME message module validates the signer certificate specified by the signer information of the SMIMEMail object by validating a certificate list i.e. certificate chain for the signer certificate. If the signer information does not specify a signer certificate list for the signer certificate S MIME message module validates the signer certificate by building a certificate chain for the signer certificate and validating the certificate chain.

If a configuration setting specifies that Certificate Revocation List CRL chain validation is to be performed S MIME message module builds a CRL chain for the signer certificate and validates the CRL chain. If a configuration setting specifies that Online Certificate Status Protocol OCSP validation is to be performed S MIME message module validates the signer certificate using OCSP. If a configuration setting specifies that both CRL chain validation and OCSP validation are to be performed S MIME message module first performs OCSP validation and then performs CRL chain validation if OCSP validation cannot be performed or if problems are encountered.

In another embodiment a CRL chain is sent to recipients which perform CRL validation of the signer certificate.

If the signer certificate is valid S MIME message module creates a MimeBodyPart object for attachment data and a MimeBodyPart object for PKCS7 signature data and sets the appropriate message header attributes. The attachment MimeBodyPart content is wrapped in a SMIMESignedAttachment object class and contains the location of attachment files included in the attachment information and digest algorithm information specified by the signer information. These file locations can include local storage locations on hard disk addresses of real time data input devices such as for example a scanner connected to scanner interface or remote locations such as for example locations on data server . The attachment files can have any type of format such as for example .pdf .tiff .img .doc .zip format or any other type of data format. The PKCS7 signature MimeBodyPart content is wrapped in a SignerPKCSSignatureHandler object class and contains the signer information. S MIME message module adds the attachment MimeBodyPart and the PKCS7 signature MimeBodyPart to a MimeMultipart object and includes the MimeMultipart object in the content of the MimeMes sage object.

S MIME message module calls a static JAF method to register S MIME JavaMail JAF callback handler module as the callback class for the MimeMessage object.

At step S S MIME message module returns the packaged MimeMessage object to S MIME application module . At step S after receiving the packaged MimeMessage S MIME application module updates message headers of the MimeMessage object if it is determined that the message headers of the MimeMessage object are to be updated.

At step S S MIME application module calls a sendMessage method of the SMIMEMail object to send the e mail message represented by the MimeMesasge object received at step S.

Before the sendMessage method is called the attachment MimeBodyPart of the MimeMessage object does not contain the actual attachment data but rather contains the location of attachment files. As will be described below with respect to as the e mail message is being sent attachment data is streamed from the file locations. Because S MIME message module performs certificate validation before the attachment data is streamed from the file locations certificate validation errors can be detected and handled before the attachment data streaming operation is performed without interrupting the streaming operation.

In other embodiments certificate validation is not performed before attachment data is streamed. In further embodiments certificate validation is not performed.

Similarly before the sendMessage method is called the PKCS7 signature MimeBodyPart of the MimeMessage object does not contain the actual PKCS7 signature data but rather contains the signer information which specifies the signer used to generate the PKCS7 signature data.

As will be described below with respect to attachment data is digested as it is being streamed from the file locations and sent to mail server . In particular the SMIMESignedAttachment object class receives a callback from S MIME JavaMail JAF callback handler module and reads the attachment data and digests the streamed attachment data on the fly as it is being sent to mail server . After all of the attachment data is sent to mail server the SMIMESignedAttachment object class passes the generated message digest value to S MIME JavaMail JAF callback handler module . S MIME JavaMail JAF callback handler module passes the received message digest value to the SignerPKCSSignatureHandler object class. After receiving the digest value the SignerPKCSSignatureHandler object class generates the PKCS7 signature data using the signer specified by the signer information. The PKCS7 signature data is sent to mail server .

By virtue of the fact that the SMIMESignedAttachment object class digests the attachment data on the fly as it is being streamed from the file locations and the generated message digest value is passed to the SignerPKCSSignatureHandler object class the SignerPKCSSignatureHandler object class does not have to read the attachment data from the file locations. Thus S MIME library module reads the attachment data from the file locations once as the attachment data is being sent to the mail server and S MIME library module does not have to read the attachment data a second time to generate the digest value used to create the PKCS7 signature data.

The S MIME standard defines two types of signing methods. One method is a method for generating a clear signed message and the other is an method for generating an opaque signed message. In the example embodiment the sign method of the SMIMEMail object is a signing method for a clear signed message. A clear signed message can be read by a message recipient even if the digital signature is invalid. In contrast an opaque signed message cannot be read by a recipient if the message s digital signature is invalid.

At step S S MIME application module calls the sign method of the SMIMEMail object to create the MimeMessage object as described above with respect to . The dotted line connecting S MIME message module to data server indicates that before the MimeMessage object is sent the attachment MimeBodyPart of the MimeMessage object does not contain the actual attachment data but rather contains the location of attachment files. The dotted line connecting S MIME message module to CA OCSP server indicates that before the MimeMessage object is sent the PKCS7 signature MimeBodyPart of the MimeMessage object does not contain the actual PKCS7 signature data but rather contains the signer information which specifies the signer used to generate the PKCS7 signature data.

At step S after receiving the MimeMessage object S MIME application module calls the sendMessage method of the SMIMEMail object to send the e mail message represented by the MimeMesasge object as described above with respect to . In response to S MIME application module calling the sendMessage method of the SMIMEMail object S MIME message module calls a transport.sendMessage method of JavaMail API module which is included in mail module .

In response to receiving the call to the transport.sendMessage method JavaMail API module creates an output data stream for streaming the e mail message represented by the MimeMessage object from sending device to a mail server specified by the recipient information e.g. mail server and connected to sending device via network . After creating the output data stream JavaMail API module calls S MIME JavaMail callback handler module which is registered as the callback class for the MimeMessage object as described above for step S of and passes a pointer to the output data stream to S MIME JavaMail JAF callback handler module .

In response to receiving the callback from JavaMail API module S MIME JavaMail JAF callback handler module sends the header attributes of the MimeMesage object to the mail server via the output data stream and then sends the header attributes of the attachment MimeBodyPart object to the mail server via the output data stream. After sending the attachment MimeBodyPart object header attributes at step S S MIME JavaMail JAF callback handler module sends the attachment MimeBodyPart object content by calling streaming module which includes the SMIMESignedAttachment object class .

At step S after receiving the call from S MIME JavaMail JAF callback handler module streaming module gets a pointer to an input data stream for the attachment file locations contained in the attachment MimeBodyPart object of the MimeMessage object. Streaming module sends the input data stream pointer to S MIME JavaMail JAF callback handler module .

At step S after receiving the input data stream pointer S MIME JavaMail JAF callback handler module calls a streaming method of JavaMail API module to read the attachment data via the input data stream and pass the streamed attachment data to streaming module via S MIME JavaMail JAF callback handler module . In particular JavaMail API module calls a MultipartSigned class in S MIME JavaMail JAF callback handler module and then the MultipartSigned class calls the SMIMESignedAttachment object class in streaming module via an interface mechanism.

In response to receiving the call from S MIME JavaMail JAF callback handler module JavaMail API module reads the attachment data from the input data stream and calls streaming module step S . In response streaming module receives data from the specified data source location to stream the attachment data to the mail server via the output data stream created in step S. While streaming the data streaming module also calculates the message digest value.

At step S streaming module receives streamed attachment data from the specified data source location and buffers the received attachment data in a buffer memory e.g. RAM . Because the attachment data is streamed and portions of attachment data are buffered and processed as they are received the attachment data does not have to be read into memory all at once. Rather only a portion of the attachment data is buffered at any given time. Since only a portion of the attachment data is buffered at any given time the capacity of the memory buffer can be smaller than a size of the attachment data specified by the attachment information. In this manner large attachment files can be sent without the need for a large buffer memory.

After a predetermined number of bytes of attachment data is buffered in the buffer memory the buffered portion of the attachment data is digested using the digest algorithm information specified by the signer information to generate a message digest value at the same time that the buffered portion of the attachment data is sent to the mail server via the output data stream. The digest value is updated as additional portions of the streamed attachment data are received and digested.

By performing digesting after a predetermined number of bytes of attachment data has been buffered the number of digest operations that are performed may be less as compared to performing a digest operation each time new bytes are received.

In other example embodiments streaming module does not buffer streamed attachment data received from the specified data source location s but rather performs a digest operation each time new bytes are received.

After streaming module sends all attachment data specified by the attachment information to the mail server streaming module passes the generated digest value to S MIME JavaMail JAF callback handler module step S . In the case that the reading of the attachment data from the input data stream is stopped abruptly the digest value can still be used to generate a valid PKCS7 signature data for the attachment data that has already been read.

At step S S MIME JavaMail JAF callback handler module calls signing module to generate the digest value using the signer specified by the signer information thereby creating the PKCS7 signature data. After generating the PKCS7 signature data signing module calls S MIME JavaMail JAF callback handler module which calls an encoding method of mail module to apply Base64 transfer encoding to the PKCS7 signature data. Mail module creates a Base64 output data stream e.g. a Base64EncoderStream that wraps an SMTPOutputStream via SMIMEStreamPKCSHandler class for streaming the clear text PKCS7 signature data of the e mail message represented by the MimeMessage object. At step S after creating the Base64 output data stream mail module calls S MIME JavaMail JAF callback handler module which is registered as the callback class for the MimeMessage object as described above for step S of and passes a pointer to the Base64 output data stream to S MIME JavaMail JAF callback handler module .

S MIME JavaMail JAF callback handler module passes the pointer to the Base64 output data stream to signing module and at step S signing module buffers the Base 64 transfer encoded PKCS7 signature data in the buffer memory and writes the buffered PKCS7 signature data to the mail server via the Base64 output data stream.

If the signer information does not specify a signer certificate list for the signer certificate S MIME message module validates the signer certificate by building a certificate chain for the signer certificate and validates the certificate chain.

If a configuration setting specifies that Certificate Revocation List CRL chain validation is to be performed S MIME message module builds a CRL chain for the signer certificate and validates the CRL chain. If a configuration setting specifies that Online Certificate Status Protocol OCSP validation is to be performed S MIME message module validates the signer certificate using OCSP. If a configuration setting specifies that both CRL chain validation and OCSP validation are to be performed S MIME message module first performs OCSP validation and then performs CRL chain validation if OCSP validation cannot be performed or if problems are encountered.

In another embodiment a CRL chain is sent to recipients which perform CRL validation of the signer certificate.

If the signer certificate is valid step S S MIME message module packs the signer information recipient information and attachment information into a MimeMessage object and returns the packaged MimeMessage object to S MIME application module in a manner similar to that described above with respect to step S of .

At step S after receiving the packaged MimeMessage S MIME application module adds additional message headers to the MimeMessage object if it is determined that additional message headers are to be added to the MimeMessage object.

At step S S MIME application module calls a sendMessage method of the SMIMEMail object to send the e mail message represented by the MimeMesasge object received at step S.

At step S in response to the SMIMEMail object receiving the call to the sendMessage method S MIME message module calls a transport.sendMessage method of JavaMail API module which is included in mail module .

At step S in response to receiving the call to the transport.sendMessage method JavaMail API module creates an output data stream for streaming the e mail message represented by the MimeMessage object from sending device to a mail server specified by the recipient information e.g. mail server and connected to sending device via network . After creating the output data stream JavaMail API module calls S MIME JavaMail JAF callback handler module which is registered as the callback class for the MimeMessage object as described above for step S of and passes a pointer to the output data stream to S MIME handler module .

At step S in response to receiving the callback from JavaMail API module S MIME JavaMail JAF callback handler module sends the header attributes of the MimeMesage object to the mail server via the output data stream and then sends the header attributes of the attachment MimeBodyPart object to the mail server via the output data stream. After sending the attachment MimeBodyPart object header attributes S MIME JavaMail JAF callback handler module sends the attachment MimeBodyPart object content by calling streaming module which includes the SMIMESignedAttachment object class .

After receiving the call from S MIME JavaMail JAF callback handler module streaming module gets a pointer to an input data stream for the attachment file locations contained in the attachment MimeBodyPart object of the MimeMessage object. Streaming module sends the input data stream pointer to S MIME JavaMail JAF callback handler module .

After receiving the pointer to the requested input data stream attachment S MIME JavaMail JAF callback handler module calls a streaming method of JavaMail API module to read the attachment data via the input data stream and pass the streamed attachment data to streaming module via S MIME JavaMail JAF callback handler module . In particular JavaMail API module calls a MultipartSigned class in S MIME JavaMail JAF callback handler module and then the MultipartSigned class calls the SMIMESignedAttachment object class in streaming module via an interface mechanism.

In response to receiving the call from S MIME JavaMail JAF callback handler module JavaMail API module reads the attachment data from the input data stream and calls streaming module . In response streaming module receives data from the specified data source location to stream the attachment data to the mail server via the output data stream. While streaming the data streaming module also calculates the message digest value.

Streaming module receives streamed attachment data from the specified data source location and buffers the received attachment data in a buffer memory e.g. RAM . After a predetermined number of bytes of attachment data is buffered in the buffer memory the buffered portion of the attachment data is digested using the digest algorithm information specified by the signer information to generate a message digest value at the same time that the buffered portion of the attachment data is sent to the mail server via the output data stream. The digest value is updated as additional portions of the streamed attachment data are received and digested.

After streaming module sends all attachment data specified by the attachment information to the mail server streaming module passes the generated digest value to S MIME JavaMail JAF callback handler module .

After receiving the generated divest value S MIME JavaMail JAF callback handler module calls signing module to generate the digest value using the signer specified by the signer information thereby creating the PKCS7 signature data.

After generating the PKCS7 signature data signing module calls S MIME JavaMail JAF callback handler module which calls an encoding method of mail module to apply Base64 transfer encoding to the PKCS7 signature data step S . Mail module creates a Base64 output data stream e.g. a Base64EncoderStream that wraps an SMTPOutputStream via SMIMEStreamPKCSHandler class for streaming the clear text PKCS7 signature data of the e mail message represented by the MimeMes sage object. After creating the Base64 output data stream mail module calls S MIME JavaMail JAF callback handler module which is registered as the callback class for the MimeMessage object as described above for step S of and passes a pointer to the Base64 output data stream to S MIME JavaMail JAF callback handler module step S .

At step S S MIME JavaMail JAF callback handler module passes the pointer to the Base64 output data stream to signing module which buffers the Base64 transfer encoded PKCS7 signature data in the buffer memory and writes the buffered PKCS7 signature data to the mail server via the Base64 output data stream.

S MIME application module is similar to S MIME application module of S MIME message module is similar to S MIME message module of mail module is similar to mail module of S MIME JavaMail JAF callback handler module is similar to S MIME JavaMail JAF callback handler module of S MIME utility module is similar to S MIME utility module of . Streaming module is similar to streaming module of and signing module is similar to signing module of . Data server is similar to data server of mail server is similar to mail server of and CA OCSP server is similar to CA OCSP server of .

In step S S MIME application module sets attachment information which includes a pointer to I O thread in S MIME application module and which includes locations of attachment data. S MIME application module passes the attachment information to S MIME message module .

At step S streaming module calls I O thread using the pointer to I O thread contained in the attachment information to get a pointer to an input data stream for the attachment file locations contained in the attachment MimeBodyPart object of the MimeMes sage object. At step S after receiving the input data stream pointer streaming module reads the attachment data from the input data stream via I O thread . Because streaming module reads the attachment data from the input data stream via I O thread S MIME application module can control the read operation and can stop the read operation at any position thereby providing a cancel operation.

If I O thread stops the read operation before all the attachment data is read thereby cancelling the message only part of the attachment data is sent to the mail server. Because the digest value used to create the digital signature is generated by digesting the attachment data as it is read and sent to the mail server and the digest value is updated as additional portions of the streamed attachment data are received and digested the digest value represents the attachment data that has been sent to the mail server. Therefore since the digest value used to create the digital signature represents the attachment data that has been sent to the mail server the recipient of the partially sent e mail message can verify the signer s digital signature for the partially sent e mail message.

In an example embodiment if I O thread stops the read operation before all the attachment data is read and the message is partially sent streaming module adds information to the message content of the partially sent e mail message to indicate that the message is a partially sent e mail message. The additional information can have a text format a .pdf Postcript Data File format a .tiff format an .img format a .doc format a .zip format or any other suitable type of data format.

In an example embodiment if I O thread stops the read operation before all the attachment data is read and the message is partially sent S MIME application module adds additional information to the attachment data for a partially sent attachment of the partially sent e mail message via I O thread to indicate that the message is a partially sent e mail message. If the message includes more than one attachment file the additional information is added to the attachment file that is partially sent. For example if five attachment files are to be sent and a cancel operation is performed after the third attachment file is partially sent then the additional information is added to the third attachment file. The additional information has the same data format as the attachment file that is partially sent.

In an example embodiment if I O thread stops the read operation before all the attachment data is read and the message is partially sent S MIME application module adds additional information to the partially sent e mail message as a new attachment via I O thread to indicate that the message is a partially sent e mail message. The additional information can have a text format a .pdf Postcript Data File format a .tiff format an .img format a .doc format a .zip format or any other suitable type of data format.

Network is an intranet but in other embodiments network can be the Internet or any other suitable type of network for sending e mail messages. Network is an intranet but in other embodiments network can be the Internet or any other suitable type of network for sending e mail messages.

Sending device includes hard disk . Hard disk contains an operating system and application programs encoded in machine executable instructions . Hard disk also contains device drivers for software interface to devices such as input device drivers output device drivers and other device drivers. Hard disk also contains mail box module encoded in machine executable instructions and file system module encoded in machine executable instructions . Hard disk further contains an S MIME application module similar to S MIME application module of that includes I O thread and hard disk includes S MIME library module and mail module .

S MIME library module is similar to S MIME library module mail module is similar to mail module and I O thread is similar to I O thread . I O thread includes input pipe and output pipe .

Input pipe is an input data stream for the attachment file locations contained in attachment information received from a user and output pipe is an output data stream for outputting the data read from input pipe .

S MIME library module receives signer information recipient information and attachment information from a user of sending device and S MIME library module packs the received signer information recipient information and attachment information into a MimeMessage object and returns the packaged MimeMessage object to the S MIME application module as described above with respect to step S of .

At step S the user of sending device presses a start send button on a keyboard of sending device and in response the S MIME application calls a transport.sendMessage method of mail module which includes a JavaMail API module similar to JavaMail API module of . In response to receiving the call to the transport.sendMessage method mail module creates an output data stream for streaming the e mail message represented by the MimeMessage object from sending device to a mail server specified by the recipient information e.g. mail server and connected to sending device via network . After creating the output data stream mail module calls input pipe to read attachment data from a data source e.g. data in mailbox module or file system module located on hard disk or remote locations such as for example locations on data servers and .

In the case that the attachment data is stored in device local storage step S for real time scan and copy data stored in mailbox module or file system module i.e. real time data obtained as a document is scanned or copied by sending device when a document security level is enforced by S MIME system sending device obtains a security tag such as a barcode or any other suitable type of security tag from an image of a scanned or copied document to determine the document security requirements. Based on the obtained security tag the S MIME application determines if the message should be sent or not.

In the case that the attachment data is in a remote location step S such as for example locations on data servers and file attachments are retrieved from the location specified and if a document security requirement is enforced by S MIME system the attachment file contains a flag to indicate the document security requirements.

At step S attachment data is read from input pipe and written to output pipe . At step S mail module receives attachment data from output pipe and passes the attachment data to S MIME library module .

At step S S MIME library module receives streamed attachment data from mail module and buffers the received attachment data in a buffer memory e.g. a RAM . After a predetermined number of bytes of attachment data is buffered in the buffer memory at step S the buffered portion of the attachment data is digested using a digest algorithm to generate a message digest value at the same time that the buffered portion of the attachment data is sent to the mail server via the output data stream created by mail module at step S. The digest value is updated as additional portions of the streamed attachment data are received and digested.

After S MIME library module sends all attachment data specified by the attachment information to the mail server S MIME library module generates the PKCS7 signature data using the signer specified by the signer information. S MIME library module calls an encoding method of mail module to apply Base64 transfer encoding to the PKCS7 signature data. Mail module creates a Base64 output data stream e.g. a Base64EncoderStream that wraps an SMTPOutputStream via SMIMEStreamPKCSHandler class for streaming the clear text PKCS7 signature data of the e mail message represented by the MimeMessage object. After creating the Base64 output data stream mail module calls S MIME library module and passes a pointer to the Base64 output data stream to S MIME library module . S MIME library module buffers the Base64 transfer encoded PKCS7 signature data in the buffer memory and writes the buffered PKCS7 signature data to the mail server via the Base64 output data stream.

At step S S MIME library module builds certificate chains and Certificate Revocation List CRL chains for the certificates for recipients included in the recipient information and validates the certificate chains and the CRL chains. In other example embodiments OCSP can be used instead of or in addition to CRL to validate the recipient certificates. S MIME library module removes invalid recipients from the list of recipients included in the recipient information. If there are no recipients that are valid then a message will not be sent.

At step S if it is determined that the signer certificate and the recipient certificates are acceptable according to configuration settings set by S MIME application module the S MIME library module will utilize functions e.g. JavaMail API functions in mail module which is similar to mail module of to pack the received signer information recipient information and attachment information into a MimeMessage object and return the packaged MimeMessage object to S MIME application module in a manner similar to that as described above with respect to step S of . After receiving the packaged MimeMessage S MIME application module adds additional message headers to the MimeMessage object if it is determined that additional message headers are to be added to the MimeMessage object.

At step S S MIME application module calls a sendMessage method in S MIME library module to send the e mail message represented by the MimeMesasge object received at step S. At step S in response to receiving the call to the sendMessage method S MIME library module calls a transport.sendMessage method of a JavaMail API module which is included in mail module .

At step S in response to receiving the call to the transport.sendMessage method mail module creates an output data stream e.g. an AsciiOutputStream object for streaming an encrypted e mail message represented by the MimeMessage object from a sending device similar to of to a mail server similar to mail server of specified by the recipient information and connected to the sending device via a network similar to network of . After creating the output data stream mail module calls S MIME library module which is registered as the callback class for the MimeMessage object in a manner similar to that described above for step S of and passes a pointer to the output data stream to S MIME library module . S MIME library module rejects the output data stream.

In response to S MIME library module rejecting the output data stream at step S mail module creates a Base64 output data stream e.g. a Base64EncoderStream that wraps an SMTPOutputStream via PKCS7Mime class for streaming the clear text header attributes and PKCS7 encrypted information of the e mail message represented by the MimeMessage object. After creating the Base64 output data stream mail module calls S MIME library module which is registered as the callback class for the MimeMessage object in a manner similar to that described above for step S of and passes a pointer to the Base64 output data stream to S MIME library module .

At step S in response to receiving the callback from mail module S MIME library module sends the header attributes of the MimeMesage object to the mail server via the Base64 output data stream sends PKCS7 encrypted information which includes recipients certificates and then sends the header attributes of the attachment MimeBodyPart object to the mail server via the Base64 output data stream.

As step S S MIME library module starts processing PKCS7 signature data and calls a method in mail module to create an Encryption output data stream e.g. a CMSEncryptionStream object embedded inside a Base64EncoderStream via PKCS7Siganture class for streaming the encrypted attachment data of the encrypted e mail message represented by the MimeMessage object from the sending device to the mail server. After creating the Encrypted output data stream at step S mail module calls S MIME library module and passes a pointer to the Encryption output data stream to S MIME library module .

At step S S MIME library module gets a pointer to an input data stream for the attachment file locations contained in the attachment MimeBodyPart object of the MimeMes sage object and calls a streaming method of mail module to read the attachment data via the input data stream. In response to receiving the call from S MIME library module at step S mail module reads the attachment data from the input data stream and calls S MIME library module to write the streamed attachment data to the mail server via the Encryption output data stream.

At step S S MIME library module receives streamed attachment data from mail module and buffers the received attachment data in a buffer memory e.g. a RAM . After a predetermined number of bytes of attachment data is buffered in the buffer memory at step S S MIME library module digests the buffered portion of the attachment data using digest algorithm information specified by the signer information to generate a message digest value at the same time that the buffered portion of the attachment data is sent to the mail server via the Encryption output data stream wherein the attachment data is encrypted as it is output via the Encryption output data stream. The digest value is updated as additional portions of the streamed attachment data are received and digested.

At step S after S MIME library module sends all attachment data specified by the attachment information to the mail server S MIME library module generates the PKCS7 signature data using the signer that is specified by the signer information. After generating the PKCS7 signature data S MIME library module calls an encoding method of mail module to apply Base64 transfer encoding to the PKCS7 signature data. Mail module creates a Base64 output data stream e.g. a Base64EncoderStream that wraps an SMTPOutputStream via SMIMEStreamPKCSHandler class for streaming the clear text PKCS7 signature data of the e mail message represented by the MimeMessage object.

At step S after creating the Base64 output data stream mail module calls S MIME library module which is registered as the callback class for the MimeMessage object in a manner similar to that described above for step S of and passes a pointer to the Base64 output data stream to S MIME library module .

At step S S MIME library module buffers the Base64 transter encoded PKCS7 signature data in the buffer memory and then writes the buffered PKCS7 signature data to the mail server via the Base64 output data stream.

In the example embodiment there are callbacks at steps S and S to notify S MIME application module of the status of the send and then encrypt operation.

This disclosure has provided a detailed description with respect to particular representative embodiments. It is understood that the scope of the appended claims is not limited to the above described embodiments and that various changes and modifications may be made without departing from the scope of the claims.

