---

title: Batching heterogeneous database commands
abstract: Systems, methods and articles of manufacture are disclosed for batching heterogeneous database commands. The heterogeneous database commands may include at least two database command types. Further, at least two of the heterogeneous database commands may include host variables. A request to execute the heterogeneous database commands may be received. The heterogeneous database commands may be sent to a database system for execution, responsive to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171036&OS=09171036&RS=09171036
owner: International Business Machines Corporation
number: 09171036
owner_city: Armonk
owner_country: US
publication_date: 20090515
---
Embodiments of the invention relate to databases. More specifically embodiments of the invention relate to batching heterogeneous database commands.

Databases are computerized information storage and retrieval systems. A relational database management system RDBMS is a database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture in a DBMS a requesting entity e.g. an application or the operating system demands access to a specified database by issuing a database access request also called a database command . Such requests may include for instance simple catalog lookup requests or transactions and combinations of transactions that operate to read change and add specified records in the database. These requests are made using high level query languages such as the Structured Query Language SQL . Illustratively SQL is used to make interactive queries for getting information from and updating a database such as International Business Machines IBM DB2 . The term query generally refers to a set of commands for retrieving data from a stored database. Queries take the form of a command language that lets programmers and programs select insert update data and so forth. In a distributed system data and or database commands may be sent and received across a network between a database and an application for example.

One embodiment of the invention includes a method for batching a plurality of heterogeneous database commands. The method may generally include configuring one or more computer processors to perform an operation. The operation itself may generally include receiving from the requestor a plurality of heterogeneous database commands. The received commands may include at least a first database command of a first command type and a second database command of a second command type . The operation may also include receiving from the requestor a request to execute the plurality of heterogeneous database commands and sending by operation of the one or more computer processors the plurality of heterogeneous database commands to a database system for execution. The operation may further include receiving from the database system results from executing each of the plurality of heterogeneous database commands and also include sending the results to the requestor.

Another embodiment of the invention includes a computer program product the computer program product comprising a computer usable medium having computer usable program code for batching a plurality of heterogeneous database commands. The code being configured for receiving a plurality of heterogeneous database commands from the requestor. The received commands may include at least a first database command of a first command type and a second database command of a second command type . The code may be further configured for receiving from the requestor a request to execute the plurality of heterogeneous database commands and sending by operation of the one or more computer processors the plurality of heterogeneous database commands to a database system for execution. The code may be further configured receiving from the database system results from executing each of the plurality of heterogeneous database commands and also include sending the results to the requestor.

Still another embodiment of the invention includes a system having a processor and a memory containing an application program configured for batching a plurality of heterogeneous database commands which when executed on the processor is configured to perform an operation. The operation may generally include receiving from the requester the plurality of heterogeneous database commands. The received commands may include at least a first database command of a first command type and a second database command of a second command type . The operation may further include receiving from the requestor a request to execute the plurality of heterogeneous database commands and sending by operation of the one or more computer processors the plurality of heterogeneous database commands to a database system for execution. The operation may also include receiving from the database system results from executing each of the plurality of heterogeneous database commands and also include sending the results to the requester.

Embodiments of the present invention generally batch heterogeneous database commands. One embodiment of the invention provides a command batcher. The command batcher may generally provide a software application generally configured to reduce the number of network trips between an application and a database system. The command batcher may receive an indication of the start of heterogeneous database commands to be batched. In response the command batcher may activate a batch execution mode. The command batcher may receive the heterogeneous database commands. The heterogeneous database commands may include at least two different database command types. Examples of database command types include insert statements select statements update statements delete statements and stored procedure calls. The command batcher may receive a request to execute the heterogeneous database commands. The command batcher may send the heterogeneous database commands to a database system for execution responsive to the request.

Further two distinct heterogeneous database commands may include one or more rows of host variables corresponding to database records. A host variable refers to a variable in memory that passes data between an application and a database system via database commands during execution time of the application. Specifically a host variable is an application variable that may be referenced in an inline database command such as a SQL statement in source code of the application. A host variable may i pass a value to a database command and ii store a value obtained from executing a database command. Each host variable may be included directly e.g. in a static SQL statement or via a parameter marker e.g. in a dynamic SQL statement . SQL statements embedded in an application may be static or dynamic. A static SQL statement refers to a SQL statement that is compiled prior to execution time of the application. Thus a static SQL statement has a fully specified structure during pre compile time of the application. For example names for columns and tables referenced in a static SQL statement must be specified during pre compile time. Further data types and sizes of each host variable must also be specified during pre compile time. Table I shows an example static SQL statement.

In contrast to the static SQL statement a dynamic SQL statement refers to a SQL statement that is compiled during execution time of the application. Thus a dynamic SQL statement may have a structure that is not fully specified until execution time of the application. A dynamic SQL statement cannot directly include host variables because host variable information e.g. data type size etc. is only available during pre compilation of an application. That is the host variable information is no longer available during execution time of the application. However parameter markers may be used in dynamic SQL to indicate where a host variable is to be substituted in a dynamic SQL statement. For example a parameter marker may be represented as a question mark character in a dynamic SQL statement. Table II shows an example dynamic SQL statement 

Sending and receiving data and or database commands across a network may be time consuming in a distributed system. In a typical configuration for a distributed system data of an RDBMS may be stored across several data servers. Further one or more client computers may execute applications that send database commands to the several data servers using a query language such as SQL. However the applications may not be allowed to batch for execution heterogeneous database commands having varying host variables or parameter markers . For example the JDBC API supports i batching heterogeneous database commands that do not include any host variables or parameter markers and ii batching database commands having parameter markers but that are not heterogeneous e.g. a SELECT statement and an INSERT statement may not be batched only multiple SELECT statements or multiple INSERT statements . The JDBC API does not support batching heterogeneous database commands having varying host variables or parameter markers . In fact the JDBC API may only batch a single type of data manipulation language DML statement. A DML statement refers to a database command to retrieve insert delete or update data in a database. Under the JDBC API a batch of database commands may include multiple rows of parameter markers. For example such a batch of database commands may modify multiple rows having different primary keys of a single database table.

In one embodiment the command batcher collects and sends database commands as a batch to a database for execution. The database commands may be heterogeneous. Further the database commands may include varying host variables or parameter markers. As such the command batcher minimizes the number of network trips to the database thereby improving performance of the distributed system. Further still the system may replace literal values in the database commands with host variables while batching database commands. Using the command batcher an application may batch database commands together to be sent to a database for execution thereby improving performance of the application. In one embodiment the application may also specify whether a batch of database commands is to be executed atomically i.e. either all of the database commands are executed or none of the database commands are executed .

For example if a single database command requires one hundred milliseconds to send the database command and receive a reply over a network an application executing one hundred database commands over the network may incur a ten second delay. Using the command batcher the application may batch the one hundred database commands to be sent together over the network incurring a total delay of only one hundred milliseconds as opposed to ten seconds .

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

One embodiment of the invention is implemented as a program product for use with a computer system. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive on which information is permanently stored ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Other media include communications media through which information is conveyed to a computer such as through a computer or telephone network including wireless communications networks. The latter embodiment specifically includes transmitting information to from the Internet and other networks. Such communications media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The computer generally includes a processor connected via a bus to a memory a network interface device a storage an input device and an output device . The computer is generally under the control of an operating system not shown . Examples of operating systems include UNIX versions of the Microsoft Windows operating system and distributions of the Linux operating system. Note Linux is at trademark of Linus Torvalds in the United States and other countries. More generally any operating system supporting the functions disclosed herein may be used. The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly the memory may be a random access memory. While the memory is shown as a single entity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the computer to communicate with other computers via the network .

The input device may be any device for providing input to the computer . For example a keyboard keypad light pen touch screen track ball or speech recognition unit audio video player and the like may be used. The output device may be any device for providing output to a user of the computer . For example the output device may be any conventional display screen or set of speakers along with their respective interface cards i.e. video cards and sound cards not shown . Although shown separately from the input device the output device and input device may be combined. For example a display screen with an integrated touch screen a display with an integrated keyboard or a speech recognition unit combined with a text speech converter may be used.

The storage may be a hard disk drive storage device. Although the storage is shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards or optical storage. The memory and the storage may be part of one virtual address space spanning multiple primary and secondary storage devices.

As shown the memory of the computer includes an application heterogeneous database commands and results . Further the storage of the computer includes database drivers a command batcher and an application framework . and associated descriptions detail the structure and operation of the command batcher running on the computer .

Further the command batcher may include an extension to the application framework . That is the application framework may be extended or modified to use the driver extensions . An example of an application framework is IBM pureQuery. Further application frameworks may include an object relational persistence architecture also known as object relational architecture ORA or object relational mapping ORM framework. An ORA framework maps data from a relational database to an object oriented domain. Examples of ORA frameworks include JPA Apache OpenJPA IBM Websphere JPA WsJPA JBoss Hibernate and Apache iBATIS. In one embodiment an ORA framework may be modified to use the driver extensions . Once the ORA framework is so modified the ORA framework may also be further optimized. For example the ORA framework may be modified to convert literals into parameter markers. Further the ORA framework may be modified to reduce a count of update statements via don t care parameters. The command batcher in the application framework may work in conjunction with the command batcher in the driver extension to batch commands according to one embodiment.

In one embodiment the command batcher receives a request e.g. from an application to begin batching of heterogeneous database commands . The command batcher then collects heterogeneous database commands and any host variables or parameter markers thereof from the application . That is the heterogeneous database commands may be static or dynamic. However the command batcher refrains from sending any of the collected heterogeneous database commands to the database server until the application sends a request to the command batcher to end batching. Once the command batcher receives the request to end batching the command batcher may send the collected heterogeneous database commands along with any pertinent data bundled in a single message across the network to the database server . The command batcher may use any protocol such as Distributed Relational Database Architecture DRDA to communicate with the database server .

In one embodiment the command batcher may receive results of executing the batch of heterogeneous database commands from the database server . The results may include an update count i.e. number of records updated by an update statement a result set e.g. of a select statement exceptions if any etc. The command batcher may then bundle and return the received results to the application . For example update counts may be returned as a two dimensional array of integers. Other ways of bundling results are broadly contemplated and may be supported by embodiments of the invention. For example the command batcher may generate a result object for representing the results . The result object may include update counts result sets and exceptions. The command batcher may then return the result object to the application .

In one embodiment the command batcher may also receive a batch of database commands as a single database command. The user may also specify atomicity of such a collection of batched database commands. That is the command batcher may support multi level batches of heterogeneous database commands and further groups of batched commands may be identified as requiring atomic execution i.e. all batched commands execute successfully .

The command batcher may operate in multiple modes e.g. a serial mode and a batch mode. In the serial mode database commands may be sent individually to the database server for independent execution potentially incurring substantial network overhead or response latency. However in one embodiment the command batcher may also operate in a batch mode. In the batch mode database commands may be grouped into one or more batches. Each batch of database commands may be sent to the database server in a single network trip. At step the command batcher activates the batch execution mode. In one embodiment the command batcher only activates the batch execution mode upon determining that a number of checks are passed. For example the command batcher may confirm that batching has not already begun for a different batch of database commands. Further the command batcher may confirm that the database the database drivers the driver extension and or the application framework support batching of database commands. In one embodiment the command batcher may return an error upon determining that not all checks are passed. However upon determining that all checks are passed the command batcher may activate the batch execution mode and allocate control fields e.g. for atomicity . In one embodiment the requester need not explicitly indicate the start of the batch that is the start of the batch may be inferred by the command batcher based on other information such as a preceding call to end a batch .

At step the command batcher begins receiving a collection of heterogeneous database commands from the requester. As noted the heterogeneous database commands may include at least two database command types. Examples of database command types include select statements update statements delete statements merge statements and stored procedure calls etc. Further the heterogeneous database commands may include varying host variables. Specifically the heterogeneous database commands may include i a first database command having a host variable and ii a second database command having a different host variable.

After the batch execution mode is activated a requester such as an application may continue to issue database commands. Upon receipt of each issued database command the command batcher may check whether the batch execution mode is activated and whether the issued database command matches one of the specified database command types to be batched if so indicated e.g. as part of step . If both conditions hold true the command batcher may record the issued database command and any host variables and or parameter markers thereof . The command batcher may also return a dummy result to the requester. The dummy result may indicate that the database command is successful. That is the dummy result is returned to prevent an application from stalling i.e. waiting for a result of executing a database command . The application may be configured e.g. by an application developer to disregard any dummy results returned from the command batcher .

For each database command received if at least one of the conditions does not hold true the command batcher may return an error to the requestor according to one embodiment. Alternatively the command batcher may send the respective i.e. last received database command to the database server for execution. The command batcher may also return any result from executing the database command to the requestor. That is the command batcher may execute database commands serially upon determining that batching is not supported by the database . In doing so the command batcher provides an upgrade path for developers of applications using the command batcher to access the database .

At step the command batcher receives from the requestor a request to execute the heterogeneous database commands . The request may include an express indication that the final heterogeneous database command to be batched has been sent. Alternatively the request may be implied e.g. a message to end batching mode may be used to imply that any currently batched commands should be executed. Similarly the batching of commands may end when a user executes a command that can not be batched e.g. such as a commit or rollback . Thus some database commands may themselves provide an indicator that the batch should be ended and executed. Further the request may specify whether the heterogeneous database commands should be executed as an atomic unit i.e. all batched commands should execute successfully or none should execute at all .

At step the command batcher sends the heterogeneous database commands to the database server for execution in response to the request. For example the command batcher may via a JDBC driver call send the heterogeneous database commands to the database server for execution. The database server then executes all of the database commands .

Further the command batcher may receive from the database server results from executing each of the heterogeneous database commands. In one embodiment the database server returns results from executing each of the database commands to the command batcher or to the database drivers as one data packet. The command batcher may process and or combine the returned results to generate results . The command batcher may then return the results to the requester in response to the request. After step the method terminates.

While embodiments herein are described with reference to optimizing an ORA framework that uses batching other embodiments are broadly contemplated and may be supported by embodiments of the invention. For example other application frameworks that use batching i.e. that works in conjunction with a command batcher may be similarly optimized in accordance with the techniques disclosed herein.

At step the command batcher generates one database command for updating the at least two persistent fields. For example the command batcher may generate one database command that includes all fields of the object. The command batcher may then flag using a don t care flag each field of the generated database command not updated by the requestor. After step the method terminates.

The mode manager may be used to activate different available modes for the command batcher . For example the mode manager may be used to set a mode of command execution to serial or batch execution modes. For example the mode manager may activate the batch execution mode upon receiving indication from an application of the beginning of a batch.

In one embodiment the command manager receives heterogeneous database commands from a requestor i.e. from an application or an application framework . Further the heterogeneous database commands may include varying host variables or parameter markers . The command manager groups the received heterogeneous database commands into one or more batches to be sent to the database server for execution.

In one embodiment the results manager receives results from the database server from executing each of the received heterogeneous database commands . Further the output manager may generate results based on the received results from executing each of the heterogeneous database commands . The output manager may also send the results to an application or to an application framework responsive to the request.

In one embodiment the command batcher in an ORA framework may also batch database commands that operate on different database tables. Further the command batcher in an ORA framework may work in conjunction with the command batcher in the driver extension according to one embodiment. To illustrate how the command batcher minimizes the number of network trips to the database server in such a scenario suppose an application creates two new Customer objects each Customer object having 2 new orders. The following database commands may result 

In one embodiment the command batcher may also batch different update commands. For example suppose that updates to two Order objects and two Customer objects result in the following database commands 

In one embodiment the command batcher may reduce the number of update commands generated for an application . Applications using static SQL may benefit from such a reduction in the number of update commands generated. The command batcher may be configured to generate certain database commands without e.g. prior to receiving a request. Such database commands may be customized based on later received requests and or database commands. Further the generated database commands may be bound to a database. For example the command batcher generates SQL commands that may include insert update delete and select statements for all ORA objects referenced by the application according to one embodiment. However various update commands may be generated for updates to an object instance depending on which and how many fields of the object are updated by the application in what order the fields of the object are updated by the application etc. In one embodiment the command batcher generates a single update command that includes all updatable fields of the object. During runtime the command batcher may flag using a don t care flag any fields that are not modified by the application e.g. in a PreparedStatement . Table VI shows an example update command generated by the command batcher 

In one embodiment the command batcher in an ORA framework may batch insert commands having database generated identifier values. For example suppose that the Order table includes a primary key column having database generated values. Suppose an application causes the following database commands to be generated by the ORA framework 

Of course the embodiments described herein are intended to be illustrative and not limiting of the invention and other embodiments are broadly contemplated. Those skilled in the art will recognize for example that embodiments of the invention may be adapted to support other database commands database command types host variables and parameter markers. Advantageously embodiments of the invention batch heterogeneous database commands having varying host variables. In one embodiment a command batcher may receive an indication of the start of heterogeneous database commands to be batched. The command batcher may activate a batch execution mode. Further the command batcher may receive the heterogeneous database commands. The heterogeneous database commands may include at least two different database command types. Further at least two of the heterogeneous database commands may include different host variables. The command batcher may receive a request to execute the heterogeneous database commands. The command batcher may send the heterogeneous database commands to a database system for execution responsive to the request.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

