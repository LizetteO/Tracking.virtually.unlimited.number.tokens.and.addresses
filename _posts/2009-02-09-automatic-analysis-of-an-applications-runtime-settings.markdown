---

title: Automatic analysis of an application's run-time settings
abstract: A method and system for automatic analysis of an application's runtime configuration settings is provided. The configuration processing system includes a monitoring component and an analysis component. The monitoring component observes requests for configuration information stored in configuration data stores of a monitored device. For example, the monitoring component may observe requests directed to the configuration data stores when an application starts, during runtime, and when the application exits. The monitoring component may record the observed requests in a file or data structure that may be accessed by or sent to the analysis component. Based on the observed requests of an application, the analysis component automatically identifies a reduced set of configuration settings which likely correspond to user-specific configuration settings used by the application. The configuration processing system may include a post-analysis component that displays the reduced set of configuration settings to a user for review, manual analysis, and/or verification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321843&OS=08321843&RS=08321843
owner: Tranxition Corporation
number: 08321843
owner_city: Portland
owner_country: US
publication_date: 20090209
---
Computer users configure their computers in order to most efficiently and comfortably perform typical tasks. For example a user may configure a word processing application to include a footer containing the user s initials in every document created by the user. As another example a user may configure an email application to automatically correct spelling errors. When a user needs to use a computer other than his own he loses the ease of use represented by those system settings. This makes it difficult to do meaningful computer work. This problem is typically addressed by the user manually configuring the computer in the way that he is accustomed. This solution has problems of its own including the user s familiarity and ability to remember how each application is configured where the settings are located and so on. Depending upon the computer s configuration operating environment and applications this solution tends to be time consuming tedious and error prone even for experienced users. Given these problems it is desirable to have a mechanism by which user specified configuration settings of a computer can be identified. This would enable the user to operate any computer in a way familiar and comfortable for him.

A method and system for automatic analysis of an application s runtime configuration settings is provided. In some embodiments the configuration processing system receives a selection of an application for which a subset of configuration settings is to be identified. For example the configuration processing system may include a user interface for a user to select one or more applications such as a word processing application an email application and so on. The configuration processing system identifies a subset of configuration settings used by a selected application by observing requests directed to one or more configuration data stores e.g. a registry and by analyzing the observed requests. In some embodiments some or all of the identified configuration settings are identified as being user specific configuration settings. User specific configuration settings include application configuration settings that a user has created deleted or modified. For example the configuration processing system may identify the font type of a word processing application as a configuration setting used by the word processing application and if the font type is or has been modified by a user from the default font type then the configuration processing system may identify the font type as a user specific configuration setting used by the word processing application. The configuration processing system may also extract and store the identified subset of configuration settings so that the configuration settings may be used on another device.

In some embodiments the configuration processing system includes a monitoring component and an analysis component. The monitoring component observes requests for configuration information stored in configuration data stores of a computing device referred to herein as the monitored device . For example the monitoring component may observe requests directed to the configuration data stores during initial start up of an application while a user interacts with the application and during final shut down of the application. Such requests typically include reading modifying creating and or deleting system or environment variables files registry settings etc. collectively referred to herein as configuration settings . For example the monitoring component may observe requests directed to a configuration data store by instrumenting an application programming interface API that is used by applications to access configuration settings maintained by the configuration data store. When an application calls an instrumented function of the API the function transfers control to the monitoring component. The monitoring component then records the observed request in a file or data structure that may be accessed by or passed directly to the analysis component. For example the monitoring component may record information about the calling application the access type e.g. read create etc. the setting path the setting name the setting value and so on. One skilled in the art will appreciate that many different techniques may be used to observe requests for configuration settings. For example some APIs provide a hooking mechanism through which hooks may be registered to transfer control to the monitoring component before and or after an API function is performed.

Based on the observed requests of an application that are directed to one or more data stores the analysis component automatically identifies a reduced set of configuration settings used by the application referred to herein as candidate settings . Some or all of the candidate settings may be user specific configuration settings. It is noted that the number of applications observed by the monitoring component may be greater than one and that the analysis component may identify a set of candidate settings for each observed application. However to facilitate description it is assumed that a user of the configuration processing system has selected a single application for which a set of user specific configuration settings is to be generated.

In some embodiments the analysis component includes a number of subcomponents. To identify a set of candidate settings the analysis component may invoke one or more of its subcomponents. For example the analysis component may invoke a filter subcomponent to remove particular types of observed requests a correlation subcomponent to determine whether a relationships exists between observed requests directed to different configuration data stores a fall back subcomponent to analyze failed requests a progression subcomponent to determine whether certain observed requests can be combined into a fewer number of requests an access subcomponent to analyze requests to read modify create and or delete configuration settings and or a frequency subcomponent to determine the frequency at which an application accesses particular configuration settings. It will be appreciated that the analysis component may include other subcomponents not mentioned.

In some embodiments a user can review and or edit configuration requests that were observed by the monitoring component before the analysis component processes the observed requests while in other embodiments the analysis component automatically analyzes some or all of observed requests without user intervention or review. It is noted that by automatically analyzing the observed requests user specific configuration settings can be identified substantially faster then if user input were required. In addition by not requiring user input the configuration processing system can be used by novice users.

In some embodiments the configuration processing system includes a post analysis component that may be invoked to display the set of candidate settings to a user for further review manual analysis and or verification. For example a user may review a set of candidate settings to verify that such settings correspond to user specific configuration settings used by an application. As another example a user may review the observed requests that served as the foundation for the automated analysis and if the user desires the user may perform additional manual analysis to revise the set of candidate settings.

In some embodiments the configuration processing system persistently stores the set of candidate settings such that the user specific configuration settings used by an application can be virtualized across a wide variety of computing devices such as a personal computer personal digital assistant cell phone digital camera or other electronic device. It is noted that the set of candidate settings need not be verified by a user prior to being stored or virtualized. The configuration processing system may use various techniques to extract the identified configuration settings from the monitored device such as for example those described in commonly owned U.S. Pat. No. 6 728 877 of K. Mackin et al. filed on Dec. 13 2002 and entitled METHOD AND SYSTEM FOR AUTOMATICALLY TRANSITIONING OF CONFIGURATION SETTINGS AMONG COMPUTER SYSTEMS which is hereby incorporated by reference. In some embodiments the extracted configuration settings are persistently stored on another computing device while in other embodiments the extracted configuration settings may be used by another computing device without persistently loading or storing the settings on the computing device for example using techniques such as those described in commonly owned U.S. Pat. No. 7 293 170 of R. Bowler et al. filed on Oct. 13 2005 and entitled CHANGING THE PERSONALITY OF A DEVICE BY INTERCEPTING REQUESTS FOR PERSONALITY INFORMATION which is hereby incorporated by reference.

In some embodiments the system stores the extracted user specific configuration settings on a storage medium in a canonical or application independent form. The canonical form may be neutral in the sense that it is independent of any application program and independent of the operating system under which an application program executes. For example the user specific configuration settings of a word processing program e.g. Microsoft Word such as default font type may be stored in a format that is independent of the word processing program through which the user specific configuration settings were specified and or used on the monitored device. When the extracted configuration settings are used by a recipient device that uses a different word processing application e.g. StarOffice the user specific configuration settings may be converted from the canonical form to a recipient specific form that can be used by the applications of the recipient device. In some embodiments the canonical form is a neutral form while in other embodiments the canonical form defaults to a form specific to an application or an operating system.

The configuration processing system may be implemented as an application layer that observes an application s requests for configuration settings and based on the observed requests automatically identifies a reduced set of configuration settings which likely correspond to user specific configuration settings used by the application. The configuration processing system may be implemented by the monitored device. However it is noted that the configuration processing system does not have to be implemented by the monitored device. For example in some embodiments the configuration processing system is implemented by a separate computing system to which configuration requests are provided as input.

Before considering the technology introduced herein in greater detail it is useful to consider an environment in which a configuration processing system can be implemented. is a block diagram that illustrates some of the components incorporated in a monitored device on which a configuration processing system executes in one embodiment. It is noted that the monitored device may be a physical computing system or a virtual computing system. In the illustrated embodiment the monitored device includes one or more processors e.g. processors may be physical or virtualized . The processors are the central processing units CPUs of the monitored device and thus control its overall operation. In some embodiments the processors accomplish this by executing software stored in memory and or other computer readable storage media of the monitored device . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

In the illustrated embodiment storage media includes computer readable media for reading and or persistently storing applications and data and memory for storing applications and data while they are being used. For example storage media may include a removable computer readable storage medium such as a Universal Serial Bus USB device and or a fixed computer readable storage medium such as a hard drive. As used herein computer readable storage media includes volatile nonvolatile removable and non removable media or any combination of such media devices that are capable of storing information such as computer readable instructions data structures program modules or other data. It is noted that storage media may include physical or virtualized storage devices. It will be appreciated that the monitored device may include other components not illustrated such as input devices e.g. keyboard and pointing devices output devices display devices network connections and so on.

In the illustrated embodiment the monitored device includes one or more configuration data stores that maintain configuration settings of the monitored device. A user typically configures an application in a way that allows the user to most efficiently and comfortably use the application. Some configuration settings are considered global settings in the sense that all applications executing on the monitored device share the configuration settings while other configuration settings are specific to an application or a group of application. For example a configuration setting that indicates the base color for a window may be global whereas a configuration setting that indicates spelling errors are to be automatically corrected may be specific to an application such as for example a word processing application or an email application . Typically both global and application specific configuration settings are configurable by a user. As a result such settings may be automatically identified by the configuration processing system as user specific configuration settings.

In the illustrated embodiment the monitored device includes a monitoring component and an analysis component . However in other embodiments one or both of these components are implemented by a computing system other than the monitored device . The monitoring component observes requests for configuration settings maintained by configuration data stores of the monitored device .

In some embodiments the monitoring component provides an extensible framework that may be used to define a number of monitors such as monitors . . . . In some embodiments the monitoring component includes a monitor for each configuration data store that is to be monitored and each monitor observes requests directed to the monitor s corresponding configuration data store. For example monitor may observe requests directed to a registry of the monitored device when an application starts during runtime and when the application exits. By providing an extensible framework the monitoring component can be extended to adapt to computing environments having different or new types of configuration data stores.

The monitoring component may record the observed configuration requests in a file or data structure not shown that may be accessed by or sent to the analysis component . In some embodiments each monitor . . . records observed requests in a shared file or data structure while in other embodiments each monitor records observed requests in a private file or data structure associated with the particular configuration data store that it monitors. Based on the observed configuration requests the analysis component identifies a reduced set of configuration settings for each application which correspond to user specific configuration settings used by each application referred to herein as candidate settings . For example in the illustrated embodiment the sets of candidate settings . . . correspond to applications . . . respectively. It will be appreciated that a set of candidate settings may be empty or may include one or more configuration settings.

In some embodiments the monitoring component and the analysis component are implemented as computer executable instructions such as software modules or applications. It is noted however that these components need not be stored on the same computer readable medium or in storage media of the monitored device . It is further noted that the computer readable storage medium s on which these components are stored need not be the same computer readable storage medium s on which the configuration data stores or applications are stored. However to facilitate description it is assumed that the monitoring component and the analysis component are stored in storage media of the monitored device . While computing devices configured as described above are typically used to support the operation of the configuration processing system those skilled in the art will appreciate that the system may be implemented using devices of various types and configurations and having various components.

In the illustrated embodiment applications . . . read modify create and or delete configuration settings maintained by configuration data stores . . . through each store s corresponding API . It is noted that one or more APIs may be provided for each configuration data store . . . . However to facilitate description each it is assumed that a single API is provided for each configuration data store. For example in the illustrated embodiment APIs . . . correspond to configuration data stores . . . respectively.

In the illustrated embodiment each monitor . . . installs a number of interceptors . . . to intercept requests for configuration settings. For example a monitor may install interceptor . . . for each function of API . In some embodiments an interceptor is implemented as a jump instruction that is inserted within each function of an API to transfer control to the corresponding monitor . For example when an application invokes a function of the API the jump instruction will cause control to be transferred to the monitor which records the observed configuration request in a record file or data structure and then returns. In the illustrated embodiment each monitor . . . records observed requests in a record . . . corresponding to configuration data stores . . . respectively. However it is noted that in other embodiments each monitor . . . records observed requests in a single shared record not shown . For example a registry monitor may record information about the calling application the access type e.g. read create etc. the registry key path the registry key name the registry value name the actual value the type of the value DWORD string binary etc. and so on. In some embodiments the file or data structure includes a time stamp of each observed request such that requests observed by one monitor e.g. a registry monitor can be correlated with requests observed by another monitor e.g. a file system monitor . Based on the observed requests the analysis component identifies a reduced set of configuration settings for each application which likely correspond to user specific configuration settings used by the application.

The filter subcomponent identifies and removes certain types of observed requests such that configuration settings associated with such requests are not be identified as candidate settings. For example the filter subcomponent may remove the following types of requests 

It will be appreciated that the filter subcomponent may remove other types of requests not mentioned.

The correlation subcomponent determines whether relationships exists between observed requests directed to different configuration data stores by the same application. The correlation subcomponent may determine that a relationship exists between an observed registry request and an observed file system request when the registry request modified a value in the registry to define a valid path e.g. fully qualified relative or by using environment variable expansion for an item referenced in some way by the observed file system request. For example if a user creates a custom dictionary in a word processing application a new registry value is created for the custom dictionary under the custom dictionary registry key having the following path HKEY CURRENT USER Software Microsoft Shared Tools Proofing Tool 1.0 Custom Dictionaries. When the custom dictionary is accessed such as during a spell check operation the correlation subcomponent may determine that a relationship exists between the observed registry request that created the new registry value and the observed file system request to access the custom dictionary. When the correlation subcomponent determines that a relationship exists between observed requests directed to different configuration data stores by the same application the correlation subcomponent may identify the configuration settings as candidate settings. In the example above the correlation subcomponent may identify the registry value and or custom dictionary as candidate settings which likely correspond to or include user specific configuration settings used by the word processing application.

The fall back subcomponent analyzes failed requests e.g. attempts by an application to open registry keys values and or file system items that resulted in failure . Typically if an application requests a configuration setting that does not exist a feature or function of the application is disabled. The fall back subcomponent determines whether an observed request succeeded immediately after the failed request. If the fall back subcomponent determines that the application attempted one operation that failed and subsequently performed a different fall back operation as an alternative the fall back subcomponent may identify configuration settings associated with the observed fall back request as candidate settings which likely correspond to user specific configuration settings used by the application .

The progression subcomponent determines whether certain observed requests for configuration settings can be combined into a fewer number of requests. For example the progression subcomponent may analyze the following sequence of observed requests to determine whether any of the requests can be combined into a fewer number of requests 

In this example the progression subcomponent may combine the following observed requests into a single request indicating that the value HKEY CURRENT USER Software Tranxition LiveManage Foo was read by the application .

The access subcomponent analyzes observed requests to retrieve modify create and or delete configuration settings while an application is running. For example if an application creates a configuration setting and does not delete that setting within the same session the access subcomponent identifies the created configuration setting as a candidate setting which likely corresponds to a user specific configuration setting used by the application. As another example the access subcomponent may identify configuration settings that are modified by the application as candidate settings. In some embodiments the access subcomponent is invoked by the analysis component after the filtering and progressing subcomponents are invoked.

The frequency subcomponent determines the frequency at which an application accesses configuration settings. Configuration settings which are accessed more frequently by the application are then identified by the frequency subcomponent as candidate settings which may correspond to user specific configuration settings used by the application.

The analysis component invokes one or more of the illustrated subcomponents to identify a reduced set of configuration settings for each application which likely correspond to user specific configuration settings used by the applications. It will be appreciated that the analysis component may include other subcomponents not illustrated. For example in some embodiments the analysis component provides an extensible framework for defining other pluggable analysis subcomponents.

In block the configuration processing system invokes a process to observe requests for configuration settings that are directed to one or more monitored configuration data stores. For example the configuration processing system may invoke monitoring component to observe requests for configuration settings when the selected application starts during runtime and when the selected application exits.

In block the configuration processing system invokes a process to analyze the observed requests. In some embodiments the process is performed by an analysis component of the configuration processing system. By analyzing the observed requests the configuration processing system identifies a reduced set of configuration settings for the selected application which likely correspond to user specific configuration settings used by the selected application referred to herein as candidate settings .

In block the configuration processing system generates a settings file or data structure that includes the identified set of candidate settings. Then the process completes. In some embodiments the generated settings file is presented to a user for review manual analysis and or verification.

Those skilled in the art will appreciate that the blocks shown in and in each of the following flow diagrams may be altered in a variety of ways. For example the order of certain blocks may be rearranged certain sub blocks may be performed in parallel certain shown blocks may be omitted or additional blocks may be included etc.

In block the configuration processing system records information about configuration settings before the application starts. Then the configuration processing system proceeds to block . In block the configuration processing system invokes the selected application and then proceeds to block . At decision block the configuration processing system determines whether the selected application has requested to exit. If the selected application has not requested to exit the configuration processing system continues processing at decision block . Otherwise if at decision block the configuration processing system determines that the application has requested to exit the configuration processing system proceeds to block . It is noted that while the selected application is running the installed interceptors are used to transfer control to the configuration processing system when the selected application reads modifies creates and or deletes configuration settings maintained by monitored configuration data stores. In block the configuration processing system records information about configuration settings before the application exits. Then the configuration processing system proceeds to block . In block the configuration processing system uninstalls interceptors. Then the process completes.

In block the configuration processing system filters the observed requests and then the configuration processing system proceeds to block . In some embodiments the configuration processing system filters the observed requests by invoking a filtering process .

In block the configuration processing system determines whether any relationship exists between observed requests that were directed to different configuration data stores by a single application. For example the correlation subcomponent may determine that a relationship exists between an observed registry request and an observed file system request when the registry request modified a value in the registry to define a valid path e.g. fully qualified relative or by using environment variable expansion for an item referenced in some way by the observed file system request. Then the configuration processing system proceeds to block .

In block the configuration processing system analyzes failed requests and then the configuration processing system proceeds to block .

In block the configuration processing system analyzes the progression of the observed requests to determine whether any of the observed requests can be combined into a fewer number of requests. Then the configuration processing system proceeds to block .

In block the configuration processing system analyzes observed requests to retrieve modify create and or delete configuration settings while an application was running. In some embodiments the configuration processing system analyzes such requests by invoking analyze access process . Then the configuration processing system proceeds to block .

In block the configuration processing system determines the frequency at which an application accesses configuration settings. Then the process completes. In some embodiments the process is performed by the configuration processing system to identify a reduced set of configuration settings that likely correspond to user specific configuration settings of a selected application such as an application selected in block of .

In block the configuration processing system removes observed requests relating to configuration settings stored in locations designated as holding temporary settings or items. Then the configuration processing system proceeds to block .

In block the configuration processing system removes observed requests relating to configuration settings that were created and delete while the application was running. Then the configuration processing system proceeds to block .

In block the configuration processing system removes observed requests relating to configuration settings designated as non user specific configuration settings. The configuration processing system may also remove observed requests relating to configuration settings stored in areas of a configuration data store designated as containing non user specific configuration settings. Then the process completes. It is noted that the configuration processing system may remove other types of requests even though it is not illustrated as such in . As such references to particular types of requests such as temporary non persistent or non user specific should not be taken as restrictive.

Thus a method and system automatic analysis of an application s runtime configuration settings has been described. Note that references throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore it is emphasized and should be appreciated that two or more references to an embodiment or one embodiment or an alternative embodiment in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics being referred to may be combined as suitable in one or more embodiments of the invention as will be recognized by those of ordinary skill in the art.

Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. For example in some embodiments one or more configuration data stores may be part of a server that is connected to a user s computer via a network such as the Internet. A monitoring component of the configuration processing system executing on the server can then observe requests made by applications executing on the user s computer for configuration settings stored in the one or more configuration data stores. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

