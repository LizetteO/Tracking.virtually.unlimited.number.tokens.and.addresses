---

title: Implementing a middleware component using factory patterns
abstract: In one aspect, a method to use a middleware component includes receiving a request from an application to interact with a platform using a service and using an abstract factory pattern corresponding to the service. The abstract factory pattern is associated with a first factory pattern stored in the middleware component. The method also includes determining if the first factory pattern is associated with the platform and invoking the service with the platform using the first factory pattern if the first factory pattern is associated with the platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08752066&OS=08752066&RS=08752066
owner: Raytheon Company
number: 08752066
owner_city: Waltham
owner_country: US
publication_date: 20091123
---
A middleware component is typically disposed between an operating system and applications. The middleware component allows one application to interoperate with another application. The middleware component can also allow software components or applications running on different operating systems to communicate with one another.

In one aspect a method to use a middleware component includes receiving a request from an application to interact with a platform using a service and using an abstract factory pattern corresponding to the service. The abstract factory pattern is associated with a first factory pattern stored in the middleware component. The method also includes determining if the first factory pattern is associated with the platform and invoking the service with the platform using the first factory pattern if the first factory pattern is associated with the platform.

In another aspect an article includes a machine readable medium that stores executable instructions to invoke a service on a platform. The instructions cause a machine to receive a request from an application to interact with the platform using the service and use an abstract factory pattern corresponding to the service. The abstract factory pattern is associated with a first factory pattern stored in a middleware component. The instruction also cause the machine to determine if the first factory pattern is associated with the platform and invoke the service with the platform using the first factory pattern if the first factory pattern is associated with the platform.

In a further aspect an apparatus to invoke a service on a platform includes circuitry to receive a request from an application to interact with the platform using the service and to use an abstract factory pattern corresponding to the service. The abstract factory pattern is associated with a first factory pattern stored in a middleware component. The apparatus also includes circuitry to determine if the first factory pattern is associated with the platform and to invoke the service with the platform using the first factory pattern if the first factory pattern is associated with the platform.

A middleware component is used to isolate services e.g. invocation messaging data persistence logging and so forth from platforms having different operating systems e.g. a JAVA 2 Enterprise Edition J2EE platform a MICROSOFT WINDOWS platform a Common Object Request Broker Architecture CORBA platform and so forth . However there is a need for the middleware component to have easy flexibility and easy retargetability to allow applications to run on an arbitrary platform without any effects on the applications. Middleware tools currently exist but these middleware tools are not pattern based and do not have any flexibility. Also existing middleware components are reimplemented to support additional platforms.

A middleware architecture described herein is a pattern based middleware component that allows for easy retargetability to various platforms all while maintaining the isolation required by the services and applications. In particular the middleware architecture described herein may be used in messaging services data persistence services service invocation services logging services and so forth.

As will be shown herein in an attempt to allow the middleware component to operate with an arbitrary platform factory patterns were implemented. The factory patterns were not just implemented for a single platform but for multiple platforms. Moreover the factory patterns were implemented for each service for each platform thereby allowing the services to be isolated from one another. Thus the middleware component easily maps to any platform. The middleware component with factory patterns allows for the ease of extension to newly developed or emerging platforms without a loss of access to existing platforms. As a result any service implemented through the middleware component will work on the emerging platforms as well as the existing platforms without modifying the services and or applications.

Referring to in one example a middleware architecture environment includes applications e.g. an application and an application sometimes referred to as business components a middleware component platforms e.g. a J2EE platform and WINDOWS platform and persistent data stores e.g. persistent data store and persistent data store fabricated by different vendors. In one example the J2EE platform includes a service locator component e.g. a JAVA Naming and Directory Interface a messaging services component e.g. a J2EE JAVA Messaging Service and a logger component e.g. a JAVA Logger Application Programming Interface .

In prior art approaches each of the applications would have to been rewritten for each new platform e.g. to accommodate the different operating systems . As will be shown below in the middleware architecture the applications themselves do not have to be rewritten for each platform but rather additional instructions are added to the middleware component in the form of factory patterns for each platform.

A factory pattern is a design pattern used in software development to encapsulate the processes used in the formation of objects that interface to the platforms. Thus a factory pattern is associated with a particular platform. An abstract factory pattern provides a way to encapsulate a group of and invoke individual factory patterns. As will be shown herein each abstract factory pattern is associated with one of the services.

The middleware component includes components used to facilitate services. For example an invocation service component is used to facilitate invocation services a messaging service component is used to facilitate messaging services a logging service component is used to facilitate logging services and a data persistence service component is used to facilitate data persistence services.

The invocation service component includes an application delegate an abstract factory pattern factory patterns intercepting filters and a fa ade . The application delegate sometimes referred to as a business delegate is an agreed upon or industry interface between the applications and the invocation services component for data received from the applications. The application delegate receives a request for a platform for invocation services and invokes the abstract factory pattern

The abstract factory pattern is used for invocation services and is associated with the factory patterns each tied to a specific platform used in invocation services. For example for invocation services the factory pattern establishes the interface to the J2EE platform and the factory pattern establishes the interface to the WINDOWS platform . The abstract factory pattern determines the appropriate factory pattern corresponding to the requested platform.

The factory patterns establish an interface with a corresponding component in the platforms . For example the factory pattern establishes an interface with the service locator component .

The intercepting filters provide compression and or encryption to data sent to a respective platform . For example the intercepting filter compresses and or encrypts data sent to the J2EE platform and the intercepting filter compresses and or encrypts data sent to the WINDOWS platform . The fa ade is an interface to the applications for data received from the platforms and is linked e.g. directly to the factory patterns e.g. factory pattern and factory pattern .

The messaging service component includes a messaging delegate an abstract factory pattern and factory patterns . The messaging delegate is an interface between the messaging service component and the applications . The messaging delegate receives a request for a platform for messaging services and invokes the abstract factory pattern

The abstract factory pattern is used for messaging services and is associated with the factory patterns each tied to a specific platform used in messaging services. For example for messaging services the factory pattern establishes the interface to the J2EE platform and the factory pattern establishes the interface to the WINDOWS platform . The abstract factory pattern determines the appropriate factory pattern corresponding to the requested platform.

The factory patterns establish an interface with a corresponding component in the platforms . For example the factory pattern establishes an interface with the messaging services component .

The logging service component includes a logging delegate an abstract factory pattern and factory patterns . The logging delegate is an interface between the logging services component and the applications . The logging delegate receives a request for a platform for logging services and invokes the abstract factory pattern

The abstract factory pattern is used for logging services and is associated with the factory patterns each tied to a specific platform used in logging services. For example for logging services the factory pattern establishes the interface to the J2EE platform and the factory pattern establishes the interface to the WINDOWS platform . The abstract factory pattern determines the appropriate factory pattern corresponding to the requested platform.

The factory patterns establishes an interface with a corresponding component in the platforms . For example the factory pattern establishes an interface with the logger component .

The data persistence service component includes a data access object DAO an abstract factory pattern and factory patterns . The DAO is an interface between the data persistence component and the applications . The DAO receives a request for a platform for invocation of data persistence services and invokes the abstract factory pattern

The abstract factory pattern is used for data persistence services and is associated with the factory patterns each tied to a specific persistent data store used in data persistence services. For example for data persistence services the factory pattern establishes the interface to the persistent data store and the factory pattern establishes the interface to the persistent data store . The abstract factory pattern determines the appropriate factory pattern corresponding to the requested persistent data store 

The abstract factory patterns at runtime load into memory the interfaces to the required platforms from the appropriate factory patterns . By using the abstract factory patterns in the middleware component a defined platform at runtime is incorporated. Thus if a system has three platforms to choose from only the required middleware components e.g. factory patterns are loaded into memory at runtime. To add additional platforms one would only need to generate additional factory pattern code.

Referring to one example of a process to invoke a service on a platform using the middleware component is a process . The middleware component receives a request from an application application or application to interact with a platform e.g. one of platform or platform .

The middleware component accesses an abstract factory pattern from the pool of abstract factory patterns corresponding to the service . For example if the application requested to perform a messaging service using J2EE then the abstract factory pattern determines which factory pattern from the messaging service component to use. In another example if the application requested to perform a logging service using J2EE then the abstract factory pattern from the logging service component is used.

The middleware component determines if a factory pattern is associated with a platform . For example a request to use the J2EE using a messaging service is received and the abstract factory pattern determines that the factory pattern is used in the case where the factory pattern is associated with the J2EE platform. In another example a request to use the J2EE using a logging service is received and the abstract factory pattern determines that the factory pattern is used in the case where the factory pattern is associated with the J2EE platform.

The middleware component invokes the service with the platform based on the factory pattern associated with the platform . For example if the factory pattern is used then the interfaces provided by the factory pattern are used to access the messaging services component . In another example if the factory pattern is used then the interfaces provided by the factory pattern are used to access the logging services component .

Referring to an example of a computer to provide a middleware component is computer . The computer includes a processor a volatile memory a non volatile memory e.g. a hard disk and a user interface UI e.g. a mouse a touch screen a keyboard a display for example . The non volatile memory stores computer instructions an operating system and data . The non volatile memory also includes an abstract factory pattern a factory pattern associated with a first platform a factory pattern associated with a second platform and an intercepting filter e.g. the intercepting filters . In one example the computer instructions are executed by the processor out of volatile memory to perform all or part of the processes described herein e.g. the process .

The processes described herein e.g. the process are not limited to use with the hardware and software configuration shown in they may find applicability in any computing or processing environment and with any type of machine or set of machines that are capable of running a computer program. The processes described herein may be implemented in hardware software or a combination of the two. The processes described herein may be implemented as a set or subset of services in computer programs executed on programmable computers machines that each includes a processor a storage medium or other article of manufacture that is readable by the processor including volatile and non volatile memory and or storage elements at least one input device one or more output devices and a network connection. Program code may be applied to data entered using an input device to perform the processes described herein and to generate output information.

The system may be implemented at least in part via a computer program product e.g. in a machine readable storage device for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers . Each such program may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the programs may be implemented in assembly or machine language. The language may be a compiled or an interpreted language and it may be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network. A computer program may be stored on a storage medium or device e.g. CD ROM hard disk or magnetic diskette that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform the processes described herein e.g. the process . The processes described herein may also be implemented as a machine readable storage medium configured with a computer program where upon execution instructions in the computer program cause the computer to operate in accordance with the processes.

The processes described herein are not limited to the specific embodiments described. For example the process is not limited to the specific processing order of . Rather any of the processing blocks of may be re ordered combined or removed performed in parallel or in serial as necessary to achieve the results set forth above.

The processing blocks in associated with implementing the system may be performed by one or more programmable processors executing one or more computer programs to perform the functions of the system. All or part of the system may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array and or an ASIC application specific integrated circuit .

Elements of different embodiments described herein may be combined to form other embodiments not specifically set forth above. Other embodiments not specifically described herein are also within the scope of the following claims.

