---

title: Systems and methods for decision pattern identification and application
abstract: A system for decision pattern identification and application in a software engineering project includes a decision pattern miner configured to locate a plurality of decisions in a search space; a decision pattern generator configured to generate a decision pattern from the located decisions; a decision pattern repository configured to store the decision pattern; a decision pattern proposal maker configured to search the decision pattern repository for a decision pattern relevant to a decision space; and a decision pattern propagator configured to propagate the decision pattern relevant to the decision space in the decision space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332335&OS=08332335&RS=08332335
owner: International Business Machines Corporation
number: 08332335
owner_city: Armonk
owner_country: US
publication_date: 20091002
---
A software engineering project requires many decisions to be made regarding the architecture of the software being constructed. Reuse of decisions that have been successfully implemented in another project or in a different part of the same project may reduce the amount of work necessary to complete a current project. Existing features for reuse such as copy paste and export import support manual application of prior decisions to the current project by a project architect. However manual application of prior decisions may be time consuming and error prone and does not provide context information and fine grained control over the selection process.

An exemplary embodiment of a system for decision pattern identification and application in a software engineering project includes a decision pattern miner configured to locate decisions in a search space a decision pattern generator configured to generate a decision pattern from the located decisions a decision pattern repository configured to store the decision pattern a decision pattern proposal maker configured to locate a decision pattern relevant to a decision space in the decision pattern repository and a decision pattern propagator configured to propagate the decision pattern relevant to the decision space in the decision space.

An exemplary embodiment of a method for decision pattern identification and application locating decisions in a search space by a decision pattern miner generating a decision pattern from the located decisions by a decision pattern generator storing the decision pattern in a decision pattern repository locating a decision pattern relevant to a decision space in the decision pattern repository by a decision pattern proposal maker and propagating the decision pattern relevant to the decision space in the decision space by a decision pattern propagator.

An exemplary embodiment of a computer program product includes a computer readable storage medium containing computer code that when executed by a computer implements a method for decision pattern identification and application that includes locating decisions in a search space generating a decision pattern from the located decisions storing the decision pattern in a decision pattern repository locating a decision pattern relevant to a decision space in the decision pattern repository and propagating the decision pattern relevant to the decision space in the decision space.

Additional features are realized through the techniques of the present exemplary embodiment. Other embodiments are described in detail herein and are considered a part of what is claimed. For a better understanding of the features of the exemplary embodiment refer to the description and to the drawings.

Embodiments of systems and methods for decision pattern identification and application are provided with exemplary embodiments being discussed below in detail.

Every decision in a software engineering project has a set of available outcomes or design alternatives and a chosen outcome that is selected from the available outcomes. Some example decisions and their available may include the type of message exchange pattern which may be chosen from request reply or one way message exchange format and transport protocol e.g. SOAP HTTP SOAP JMS or XML over RESTful HTTP transactionality of BPEL invoke activity join existing or create new one choice of SOAP communication style e.g. document literal or rpc encoded illustrating decision dependency assumes that SOAP was chosen as the message exchange format and choice of SOAP engine e.g. Axis2 Axis 1.x Xfire or proprietary engine in application servers also illustrating decision dependency . A set of decisions and chosen outcomes that are known to work together may be referred to as a decision pattern. Decision patterns may be propagated to other parts of the same project or to other projects. Decision patterns or combinations of decision patterns that are successfully applied in one or more prior projects or in a different part of the same project may be harvested and reused in a current project also referred to as a decision space. Decision patterns may be identified in a search space which may comprise a different project or a different part of the same project as the current project and stored for application to any area of the current project decision space . This encourages homogeneous decision making across software projects which may increase synergy effects while minimizing learning efforts and maintenance requirements. Stored decision patterns may include information regarding the outcome chosen to resolve a project issue the project phase in which the decision was made timestamp information the role by which the decision was made and justification for the chosen outcome along with any assumptions and consequences of the outcome. Decision patterns regarding architecture elements are influenced by project specific requirements differing elements or projects may have differing requirements necessitating involvement by a project architect or decision maker in the identification and application process so that fit gap analysis and context mapping may be performed.

Various types of decision patterns may be defined and identified including but not limited to the following eight types. A type 1 decision pattern includes a decision having multiple possible alternative outcomes for which the same outcome is repeatedly chosen within the search space. To detect type 1 decision patterns in search space decision pattern miner may check all decided or confirmed decision outcomes that are chosen multiple times in search space . The project architect may constrain search space by providing a desired decision outcome to decision pattern miner . The decision chosen outcome combination along with any justification assumptions and consequences may be identified.

A type 2 decision pattern pertains to a single design model element DME such as a service function or process in a service oriented architecture. This is expressed by scope information. All DMEs having a certain scope may be checked for decided or confirmed decision outcomes. A set of decided or confirmed decision outcomes in a single DME may be identified as a decision pattern for the DME. A project architect may constrain search space by specifying a DME such as a particular service and decision pattern miner may identify only the outcomes found in the specified DME. In some embodiments outcomes for type 2 decision patterns may be identified by the following algorithm 

A type 3 decision pattern pertains to a DME and its subordinate DMEs for example parent and child processes or a process and its subordinate services assuming certain hierarchical relations between DMEs . A set of decided or confirmed decision outcomes in the DME and its related subordinate DMEs may be identified as a decision pattern. A project architect may constrain search space by specifying one DME such as a particular process and decision pattern miner may identify only the decisions found in the specified DME and its related subordinate DMEs. In some embodiments in which a type 1 decision pattern is identified type 3 decision patterns may be identified by the following algorithm 

In some embodiments a project architect may specify a root DME. Starting with the specified root DME outcomes for type 3 decision patterns may be identified by the following algorithm 

A type 4 decision pattern pertains to an entire project. A type 4 decision pattern comprises a set of decision outcomes for an entire project combined into a single decision pattern. A type 4 decision pattern is found by decision pattern miner if the specified search space of a type 3 decision pattern has a scope of project all outcomes of all decisions in the decision space of the project may be added to the type 4 decision pattern by decision pattern generator . In some embodiments type 4 decision patterns may be identified by the following algorithm 

A type 5 decision pattern pertains to a decision that must be made in a specified phase of a project or by a specified role such as an integration architect. Type 5 decision patterns are identified by the project phase or role associated with a decision. For a specified project phase or role decision pattern miner retrieves all decisions and outcomes in search space and checks the retrieved decision outcomes for common combinations. To constrain the search a project architect may specify a project phase or role to decision pattern miner .

A type 6 decision pattern may include decision outcomes of decisions that are related through logical and temporal decision dependencies such as forces and triggers. Type 6 decision patterns are identified based on defined dependencies. The decision pattern miner may traverse a tree built using decision dependencies and search for combinations which occur frequently in the tree. The decision maker may constrain search by providing a starting decision outcome or a dependency type.

A type 7 decision pattern includes a set of decision outcomes made in sequence by the same role. Roles may include application architect or integration architect. A single project architect may have a single role or multiple roles. Type 7 decision pattern are identified by traversing a decision history which logs the time a decision was made using for example a timestamp and the role by which a decision was made using for example a user id and identifying decision outcomes made in sequence by the same role. The project architect may constrain the search by specifying a time period or a role.

A type 8 decision pattern includes a set of decision outcomes having the same rationale. Type 8 decision patterns are identified by mining justifications of stored decision outcomes for the same or similar text. Similarity may be specified by standard text processing means including but not limited to regular expressions or wildcard queries such as LIKE text in SQL. Decision outcomes having the same justification may be combined into a type 8 decision pattern. The project architect may constrain the search by specifying text to be located in the justifications of the stored decision outcomes.

Decision pattern types 1 6 are be identified based the structure of search space . Types 7 8 are determined based on recorded activities in search space . The above type list is not exhaustive any number and type of decision pattern types may be defined and identified in the method of . Decision pattern types 1 8 may be combined in a fine grained manner to make decision pattern processing more efficient.

In block decision pattern proposal maker proposes one or more decision patterns located in decision pattern repository in block to the project architect. Decision pattern proposal maker may limit the decision patterns proposed to the project architect in some embodiments for example decision pattern proposal maker may propose only decision patterns that apply to the current project phase or to the role of the project architect currently logged in to the system. The project architect may add or remove decisions and outcomes to or from the decision pattern as desired.

An example project having a service oriented architecture SOA may comprise multiple services or other kinds of DMEs such as processes and functions such as ContactCustomerTask and CreatePolicyTask . The design of any service in the project requires a number of technical design decisions. For each of these decisions aspects including but not limited to a problem statement related decisions available alternatives with pros and cons decision drivers decision lifecycle information such as practitioner role or project phase and the chosen decision outcome and justification may be identified and stored. Some example decisions and their available alternatives may include the type of message exchange pattern which may be chosen from request reply or one way message exchange format and transport protocol e.g. SOAP HTTP SOAP JMS or XML over RESTful HTTP transactionality of BPEL invoke activity join existing or create new one choice of SOAP communication style e.g. document literal or rpc encoded illustrating decision dependency assumes that SOAP was chosen as the message exchange format and choice of SOAP engine e.g. Axis2 Axis 1.x Xfire or proprietary engine in application servers also illustrating decision dependency . If outcomes for each of the above decisions for ContactCustomerTask are made and applied successfully a project architect may wish to implement service CreatePolicyTask using some or all of the decision outcomes used for ContactCustomerTask i.e. the stored outcomes of the decisions listed above for ContactCustomerTask may be applied as a decision pattern to service CreatePolicyTask which comprises decision space . In this example ContactCustomerTask comprises search space .

Decision pattern generator may generate a decision pattern shown below in Table 1 based on decisions located in ContactCustomerTask by decision pattern miner 

The decision pattern of Table 1 shows a list of decision outcomes from DME ContactCustomerTask . The decision pattern is stored as a type 2 decision pattern. The decision pattern is proposed by decision pattern proposal maker to a project architect who may add or remove decisions and outcomes to or from the decision pattern before application. The decision pattern may then be applied to DME CreatePolicyTask . The outcomes resulting from the application of the decision pattern to CreatePolicyTask may be set to tentative until they are approved by the project architect.

The computer includes but is not limited to PCs workstations laptops PDAs palm devices servers storages and the like. Generally in terms of hardware architecture the computer may include one or more processors memory and one or more input and or output I O devices that are communicatively coupled via a local interface not shown . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface may have additional elements such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software that can be stored in the memory . The processor can be virtually any custom made or commercially available processor a central processing unit CPU a data signal processor DSP or an auxiliary processor among several processors associated with the computer and the processor may be a semiconductor based microprocessor in the form of a microchip or a macroprocessor.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as dynamic random access memory DRAM static random access memory SRAM etc. and nonvolatile memory elements e.g. ROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM programmable read only memory PROM tape compact disc read only memory CD ROM disk diskette cartridge cassette or the like etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in the memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. The software in the memory includes a suitable operating system O S compiler source code and one or more applications in accordance with exemplary embodiments. As illustrated the application comprises numerous functional components for implementing the features and operations of the exemplary embodiments. The application of the computer may represent various applications computational units logic functional units processes operations virtual entities and or modules in accordance with exemplary embodiments but the application is not meant to be a limitation.

The operating system controls the execution of other computer programs and provides scheduling input output control file and data management memory management and communication control and related services. It is contemplated by the inventors that the application for implementing exemplary embodiments may be applicable on all commercially available operating systems.

Application may be a source program executable program object code script or any other entity comprising a set of instructions to be performed. When a source program then the program is usually translated via a compiler such as the compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the O S . Furthermore the application can be written as a an object oriented programming language which has classes of data and methods or b a procedure programming language which has routines subroutines and or functions for example but not limited to C C C Pascal BASIC API calls HTML XHTML XML ASP scripts FORTRAN COBOL Perl Java ADA .NET and the like.

The I O devices may include input devices such as for example but not limited to a mouse keyboard scanner microphone camera etc. Furthermore the I O devices may also include output devices for example but not limited to a printer display etc. Finally the I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a NIC or modulator demodulator for accessing remote devices other files devices systems or a network a radio frequency RF or other transceiver a telephonic interface a bridge a router etc. The I O devices also include components for communicating over various networks such as the Internet or intranet.

If the computer is a PC workstation intelligent device or the like the software in the memory may further include a basic input output system BIOS omitted for simplicity . The BIOS is a set of essential software routines that initialize and test hardware at startup start the O S and support the transfer of data among the hardware devices. The BIOS is stored in some type of read only memory such as ROM PROM EPROM EEPROM or the like so that the BIOS can be executed when the computer is activated.

When the computer is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the computer pursuant to the software. The application and the O S are read in whole or in part by the processor perhaps buffered within the processor and then executed.

When the application is implemented in software it should be noted that the application can be stored on virtually any computer readable medium for use by or in connection with any computer related system or method. In the context of this document a computer readable medium may be an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method.

The application can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium.

More specific examples a nonexhaustive list of the computer readable medium may include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic or optical a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc memory CDROM CD R W optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed or punched as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In exemplary embodiments where the application is implemented in hardware the application can be implemented with any one or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

The technical effects and benefits of exemplary embodiments include efficient reuse of decision patterns and uniform application of decision patterns within a software project.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

